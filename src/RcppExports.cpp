// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// cppgetX
void cppgetX(arma::mat& EtaM, arma::cube& EtaV, arma::mat& X, arma::mat& newX, int cores);
RcppExport SEXP _BayesianConditionalFPCA_cppgetX(SEXP EtaMSEXP, SEXP EtaVSEXP, SEXP XSEXP, SEXP newXSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type EtaM(EtaMSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type EtaV(EtaVSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type newX(newXSEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    cppgetX(EtaM, EtaV, X, newX, cores);
    return R_NilValue;
END_RCPP
}
// cppupdateall
void cppupdateall(arma::mat& Theta, arma::mat& Lambda, arma::vec& precision, arma::mat& newX, arma::mat& B, arma::mat& newY, arma::uword K);
RcppExport SEXP _BayesianConditionalFPCA_cppupdateall(SEXP ThetaSEXP, SEXP LambdaSEXP, SEXP precisionSEXP, SEXP newXSEXP, SEXP BSEXP, SEXP newYSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type precision(precisionSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type newX(newXSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type newY(newYSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type K(KSEXP);
    cppupdateall(Theta, Lambda, precision, newX, B, newY, K);
    return R_NilValue;
END_RCPP
}
// cppupdateall_Proj
void cppupdateall_Proj(arma::mat& Theta, arma::mat& Lambda, arma::vec& Phi, arma::mat& newX, arma::mat& newY, arma::uword K);
RcppExport SEXP _BayesianConditionalFPCA_cppupdateall_Proj(SEXP ThetaSEXP, SEXP LambdaSEXP, SEXP PhiSEXP, SEXP newXSEXP, SEXP newYSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type newX(newXSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type newY(newYSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type K(KSEXP);
    cppupdateall_Proj(Theta, Lambda, Phi, newX, newY, K);
    return R_NilValue;
END_RCPP
}
// cppupdateeta
void cppupdateeta(arma::mat& Theta, arma::mat& Lambda, arma::vec& precision, arma::mat& EtaM, arma::cube& EtaV, arma::mat& X, arma::mat& B, arma::mat& Y, double K);
RcppExport SEXP _BayesianConditionalFPCA_cppupdateeta(SEXP ThetaSEXP, SEXP LambdaSEXP, SEXP precisionSEXP, SEXP EtaMSEXP, SEXP EtaVSEXP, SEXP XSEXP, SEXP BSEXP, SEXP YSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type precision(precisionSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type EtaM(EtaMSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type EtaV(EtaVSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    cppupdateeta(Theta, Lambda, precision, EtaM, EtaV, X, B, Y, K);
    return R_NilValue;
END_RCPP
}
// cppupdateeta_Proj
void cppupdateeta_Proj(arma::mat& Theta, arma::mat& Lambda, arma::vec& Phi, arma::mat& EtaM, arma::cube& EtaV, arma::mat& X, arma::mat& Y, double K);
RcppExport SEXP _BayesianConditionalFPCA_cppupdateeta_Proj(SEXP ThetaSEXP, SEXP LambdaSEXP, SEXP PhiSEXP, SEXP EtaMSEXP, SEXP EtaVSEXP, SEXP XSEXP, SEXP YSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type EtaM(EtaMSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type EtaV(EtaVSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    cppupdateeta_Proj(Theta, Lambda, Phi, EtaM, EtaV, X, Y, K);
    return R_NilValue;
END_RCPP
}
// cpploglik
double cpploglik(arma::mat& Theta, arma::mat& Lambda, arma::vec& precision, arma::mat& X, arma::mat& B, arma::mat& Y, arma::uword K, int cores);
RcppExport SEXP _BayesianConditionalFPCA_cpploglik(SEXP ThetaSEXP, SEXP LambdaSEXP, SEXP precisionSEXP, SEXP XSEXP, SEXP BSEXP, SEXP YSEXP, SEXP KSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type precision(precisionSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(cpploglik(Theta, Lambda, precision, X, B, Y, K, cores));
    return rcpp_result_gen;
END_RCPP
}
// cpploglik_Proj
double cpploglik_Proj(arma::mat& Theta, arma::mat& Lambda, arma::vec& Phi, arma::mat& X, arma::mat& Y, arma::uword K, int cores);
RcppExport SEXP _BayesianConditionalFPCA_cpploglik_Proj(SEXP ThetaSEXP, SEXP LambdaSEXP, SEXP PhiSEXP, SEXP XSEXP, SEXP YSEXP, SEXP KSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(cpploglik_Proj(Theta, Lambda, Phi, X, Y, K, cores));
    return rcpp_result_gen;
END_RCPP
}
// completeY2Means
void completeY2Means(arma::mat& Y, arma::uvec missing_sub, arma::uvec missing_time);
RcppExport SEXP _BayesianConditionalFPCA_completeY2Means(SEXP YSEXP, SEXP missing_subSEXP, SEXP missing_timeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type missing_sub(missing_subSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type missing_time(missing_timeSEXP);
    completeY2Means(Y, missing_sub, missing_time);
    return R_NilValue;
END_RCPP
}
// cpp_EM2
Rcpp::List cpp_EM2(arma::mat X, arma::mat B, arma::mat Y, arma::uword K, double tol, arma::uword max_iter);
RcppExport SEXP _BayesianConditionalFPCA_cpp_EM2(SEXP XSEXP, SEXP BSEXP, SEXP YSEXP, SEXP KSEXP, SEXP tolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_EM2(X, B, Y, K, tol, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// cpp_EM
List cpp_EM(arma::mat X, arma::mat B, arma::mat Y, arma::uword K, arma::mat Theta_init, int cores);
RcppExport SEXP _BayesianConditionalFPCA_cpp_EM(SEXP XSEXP, SEXP BSEXP, SEXP YSEXP, SEXP KSEXP, SEXP Theta_initSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Theta_init(Theta_initSEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_EM(X, B, Y, K, Theta_init, cores));
    return rcpp_result_gen;
END_RCPP
}
// cpp_EM_Proj
List cpp_EM_Proj(arma::mat X, arma::mat Y, arma::uword K, arma::mat Theta_init, int cores);
RcppExport SEXP _BayesianConditionalFPCA_cpp_EM_Proj(SEXP XSEXP, SEXP YSEXP, SEXP KSEXP, SEXP Theta_initSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Theta_init(Theta_initSEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_EM_Proj(X, Y, K, Theta_init, cores));
    return rcpp_result_gen;
END_RCPP
}
// cpp_EM_new
List cpp_EM_new(arma::mat X, arma::mat B, arma::mat Y, arma::uword K, arma::mat Theta_init, arma::mat Lambda_init, int cores);
RcppExport SEXP _BayesianConditionalFPCA_cpp_EM_new(SEXP XSEXP, SEXP BSEXP, SEXP YSEXP, SEXP KSEXP, SEXP Theta_initSEXP, SEXP Lambda_initSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Theta_init(Theta_initSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Lambda_init(Lambda_initSEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_EM_new(X, B, Y, K, Theta_init, Lambda_init, cores));
    return rcpp_result_gen;
END_RCPP
}
// armadillo_modulus
arma::uvec armadillo_modulus(arma::uvec indicies, arma::uword n);
RcppExport SEXP _BayesianConditionalFPCA_armadillo_modulus(SEXP indiciesSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type indicies(indiciesSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(armadillo_modulus(indicies, n));
    return rcpp_result_gen;
END_RCPP
}
// completeY
void completeY(arma::mat& Y, arma::uvec missing_sub, arma::uvec missing_time);
RcppExport SEXP _BayesianConditionalFPCA_completeY(SEXP YSEXP, SEXP missing_subSEXP, SEXP missing_timeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type missing_sub(missing_subSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type missing_time(missing_timeSEXP);
    completeY(Y, missing_sub, missing_time);
    return R_NilValue;
END_RCPP
}
// MCMC_Impute
List MCMC_Impute(arma::field<arma::vec> y, arma::field<arma::vec> observedTimes, arma::vec fullTimes, arma::mat X, arma::mat B, int K, int iter, int nchains, int thin);
RcppExport SEXP _BayesianConditionalFPCA_MCMC_Impute(SEXP ySEXP, SEXP observedTimesSEXP, SEXP fullTimesSEXP, SEXP XSEXP, SEXP BSEXP, SEXP KSEXP, SEXP iterSEXP, SEXP nchainsSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::vec> >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::field<arma::vec> >::type observedTimes(observedTimesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type fullTimes(fullTimesSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< int >::type nchains(nchainsSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(MCMC_Impute(y, observedTimes, fullTimes, X, B, K, iter, nchains, thin));
    return rcpp_result_gen;
END_RCPP
}
// completeY2
void completeY2(arma::mat& Y, arma::uvec missing_sub, arma::uvec missing_time);
RcppExport SEXP _BayesianConditionalFPCA_completeY2(SEXP YSEXP, SEXP missing_subSEXP, SEXP missing_timeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type missing_sub(missing_subSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type missing_time(missing_timeSEXP);
    completeY2(Y, missing_sub, missing_time);
    return R_NilValue;
END_RCPP
}
// run_mcmc_Morris
List run_mcmc_Morris(arma::mat Y, arma::vec Time, arma::mat X, arma::mat Z, arma::mat B, arma::uword K, arma::uword iter, arma::uword burnin, arma::uword nchains, arma::uword thin, arma::uword loglik);
RcppExport SEXP _BayesianConditionalFPCA_run_mcmc_Morris(SEXP YSEXP, SEXP TimeSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP BSEXP, SEXP KSEXP, SEXP iterSEXP, SEXP burninSEXP, SEXP nchainsSEXP, SEXP thinSEXP, SEXP loglikSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type nchains(nchainsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type loglik(loglikSEXP);
    rcpp_result_gen = Rcpp::wrap(run_mcmc_Morris(Y, Time, X, Z, B, K, iter, burnin, nchains, thin, loglik));
    return rcpp_result_gen;
END_RCPP
}
// run_mcmc_Morris_Tensor
List run_mcmc_Morris_Tensor(arma::mat Y, arma::vec Time, arma::mat X, arma::mat Z, arma::mat B, arma::field<arma::mat> MeanPenalties, arma::field<arma::mat> VarPenalties, arma::uvec Meanindices, arma::uvec Varindices, arma::uword K, arma::uword iter, arma::uword burnin, arma::uword nchains, arma::uword thin, arma::uword loglik);
RcppExport SEXP _BayesianConditionalFPCA_run_mcmc_Morris_Tensor(SEXP YSEXP, SEXP TimeSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP BSEXP, SEXP MeanPenaltiesSEXP, SEXP VarPenaltiesSEXP, SEXP MeanindicesSEXP, SEXP VarindicesSEXP, SEXP KSEXP, SEXP iterSEXP, SEXP burninSEXP, SEXP nchainsSEXP, SEXP thinSEXP, SEXP loglikSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type MeanPenalties(MeanPenaltiesSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type VarPenalties(VarPenaltiesSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type Meanindices(MeanindicesSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type Varindices(VarindicesSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type nchains(nchainsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type loglik(loglikSEXP);
    rcpp_result_gen = Rcpp::wrap(run_mcmc_Morris_Tensor(Y, Time, X, Z, B, MeanPenalties, VarPenalties, Meanindices, Varindices, K, iter, burnin, nchains, thin, loglik));
    return rcpp_result_gen;
END_RCPP
}
// BuildBlkDiag
void BuildBlkDiag(arma::field<arma::mat>& Penalties, arma::uvec& indices, arma::vec& Tau, arma::mat& BlkDiag);
RcppExport SEXP _BayesianConditionalFPCA_BuildBlkDiag(SEXP PenaltiesSEXP, SEXP indicesSEXP, SEXP TauSEXP, SEXP BlkDiagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::mat>& >::type Penalties(PenaltiesSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Tau(TauSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type BlkDiag(BlkDiagSEXP);
    BuildBlkDiag(Penalties, indices, Tau, BlkDiag);
    return R_NilValue;
END_RCPP
}
// testfunc
void testfunc();
RcppExport SEXP _BayesianConditionalFPCA_testfunc() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    testfunc();
    return R_NilValue;
END_RCPP
}
// MCMC_Sparse
List MCMC_Sparse(arma::field<arma::vec> Y, arma::mat X, arma::field<arma::mat> B, int K, int iter, int nchains, int thin);
RcppExport SEXP _BayesianConditionalFPCA_MCMC_Sparse(SEXP YSEXP, SEXP XSEXP, SEXP BSEXP, SEXP KSEXP, SEXP iterSEXP, SEXP nchainsSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::vec> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< int >::type nchains(nchainsSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(MCMC_Sparse(Y, X, B, K, iter, nchains, thin));
    return rcpp_result_gen;
END_RCPP
}
// MCMC_Tempered
List MCMC_Tempered(arma::mat Y, arma::mat X, arma::mat B, int K, arma::uword iter, arma::uword nchains, arma::uword thin, double beta, arma::mat Theta_init, arma::cube Lambda_init, arma::mat Eta_init, double Prec_init);
RcppExport SEXP _BayesianConditionalFPCA_MCMC_Tempered(SEXP YSEXP, SEXP XSEXP, SEXP BSEXP, SEXP KSEXP, SEXP iterSEXP, SEXP nchainsSEXP, SEXP thinSEXP, SEXP betaSEXP, SEXP Theta_initSEXP, SEXP Lambda_initSEXP, SEXP Eta_initSEXP, SEXP Prec_initSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type nchains(nchainsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Theta_init(Theta_initSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Lambda_init(Lambda_initSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Eta_init(Eta_initSEXP);
    Rcpp::traits::input_parameter< double >::type Prec_init(Prec_initSEXP);
    rcpp_result_gen = Rcpp::wrap(MCMC_Tempered(Y, X, B, K, iter, nchains, thin, beta, Theta_init, Lambda_init, Eta_init, Prec_init));
    return rcpp_result_gen;
END_RCPP
}
// MCMC_Wrapper
List MCMC_Wrapper(arma::mat Y, arma::mat X, arma::mat B, arma::uword K, arma::uword iter, arma::uword nchains, arma::uword thin, arma::mat Theta_init, arma::cube Lambda_init, arma::mat Eta_init);
RcppExport SEXP _BayesianConditionalFPCA_MCMC_Wrapper(SEXP YSEXP, SEXP XSEXP, SEXP BSEXP, SEXP KSEXP, SEXP iterSEXP, SEXP nchainsSEXP, SEXP thinSEXP, SEXP Theta_initSEXP, SEXP Lambda_initSEXP, SEXP Eta_initSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type nchains(nchainsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Theta_init(Theta_initSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Lambda_init(Lambda_initSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Eta_init(Eta_initSEXP);
    rcpp_result_gen = Rcpp::wrap(MCMC_Wrapper(Y, X, B, K, iter, nchains, thin, Theta_init, Lambda_init, Eta_init));
    return rcpp_result_gen;
END_RCPP
}
// TemperedMCMC
Rcpp::List TemperedMCMC(arma::mat Y, arma::mat X, arma::mat B, int K, arma::uword iter, arma::uword thin, arma::mat Theta_init, arma::cube Lambda_init, arma::mat Eta_init, double Prec_init, arma::vec beta);
RcppExport SEXP _BayesianConditionalFPCA_TemperedMCMC(SEXP YSEXP, SEXP XSEXP, SEXP BSEXP, SEXP KSEXP, SEXP iterSEXP, SEXP thinSEXP, SEXP Theta_initSEXP, SEXP Lambda_initSEXP, SEXP Eta_initSEXP, SEXP Prec_initSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Theta_init(Theta_initSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Lambda_init(Lambda_initSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Eta_init(Eta_initSEXP);
    Rcpp::traits::input_parameter< double >::type Prec_init(Prec_initSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(TemperedMCMC(Y, X, B, K, iter, thin, Theta_init, Lambda_init, Eta_init, Prec_init, beta));
    return rcpp_result_gen;
END_RCPP
}
// get_proposal
double get_proposal(double old);
RcppExport SEXP _BayesianConditionalFPCA_get_proposal(SEXP oldSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type old(oldSEXP);
    rcpp_result_gen = Rcpp::wrap(get_proposal(old));
    return rcpp_result_gen;
END_RCPP
}
// armadillo_modulus2
arma::uvec armadillo_modulus2(arma::uvec indicies, arma::uword n);
RcppExport SEXP _BayesianConditionalFPCA_armadillo_modulus2(SEXP indiciesSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type indicies(indiciesSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(armadillo_modulus2(indicies, n));
    return rcpp_result_gen;
END_RCPP
}
// armadillo_modulus3
arma::uvec armadillo_modulus3(arma::uvec indicies, arma::uword n);
RcppExport SEXP _BayesianConditionalFPCA_armadillo_modulus3(SEXP indiciesSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type indicies(indiciesSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(armadillo_modulus3(indicies, n));
    return rcpp_result_gen;
END_RCPP
}
// get_omnibus_fit
List get_omnibus_fit(List mod);
RcppExport SEXP _BayesianConditionalFPCA_get_omnibus_fit(SEXP modSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type mod(modSEXP);
    rcpp_result_gen = Rcpp::wrap(get_omnibus_fit(mod));
    return rcpp_result_gen;
END_RCPP
}
// get_omnibus_fit2
List get_omnibus_fit2(List mod);
RcppExport SEXP _BayesianConditionalFPCA_get_omnibus_fit2(SEXP modSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type mod(modSEXP);
    rcpp_result_gen = Rcpp::wrap(get_omnibus_fit2(mod));
    return rcpp_result_gen;
END_RCPP
}
// DiffOp
arma::mat DiffOp(arma::uword n);
RcppExport SEXP _BayesianConditionalFPCA_DiffOp(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(DiffOp(n));
    return rcpp_result_gen;
END_RCPP
}
// getPenalty2
arma::mat getPenalty2(arma::uword n, arma::uword D);
RcppExport SEXP _BayesianConditionalFPCA_getPenalty2(SEXP nSEXP, SEXP DSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type D(DSEXP);
    rcpp_result_gen = Rcpp::wrap(getPenalty2(n, D));
    return rcpp_result_gen;
END_RCPP
}
// getPenalty
arma::mat getPenalty(arma::uword n);
RcppExport SEXP _BayesianConditionalFPCA_getPenalty(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(getPenalty(n));
    return rcpp_result_gen;
END_RCPP
}
// initializeY
arma::rowvec initializeY(arma::vec y, arma::vec observedTimes, arma::vec fullTimes);
RcppExport SEXP _BayesianConditionalFPCA_initializeY(SEXP ySEXP, SEXP observedTimesSEXP, SEXP fullTimesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type observedTimes(observedTimesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type fullTimes(fullTimesSEXP);
    rcpp_result_gen = Rcpp::wrap(initializeY(y, observedTimes, fullTimes));
    return rcpp_result_gen;
END_RCPP
}
// getObservedOrder
arma::uvec getObservedOrder(arma::vec observedTimes, arma::vec fullTimes);
RcppExport SEXP _BayesianConditionalFPCA_getObservedOrder(SEXP observedTimesSEXP, SEXP fullTimesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type observedTimes(observedTimesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type fullTimes(fullTimesSEXP);
    rcpp_result_gen = Rcpp::wrap(getObservedOrder(observedTimes, fullTimes));
    return rcpp_result_gen;
END_RCPP
}
// PredictY
void PredictY(arma::mat& ImputedY, arma::mat X, arma::mat B, arma::mat Theta, arma::mat Eta, arma::cube Lambda, double Prec);
RcppExport SEXP _BayesianConditionalFPCA_PredictY(SEXP ImputedYSEXP, SEXP XSEXP, SEXP BSEXP, SEXP ThetaSEXP, SEXP EtaSEXP, SEXP LambdaSEXP, SEXP PrecSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type ImputedY(ImputedYSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Eta(EtaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< double >::type Prec(PrecSEXP);
    PredictY(ImputedY, X, B, Theta, Eta, Lambda, Prec);
    return R_NilValue;
END_RCPP
}
// PredictY2
void PredictY2(arma::mat& ImputedY, arma::field<arma::uvec> observedOrder, arma::mat X, arma::mat B, arma::mat Theta, arma::cube Lambda, arma::mat Eta, double Prec);
RcppExport SEXP _BayesianConditionalFPCA_PredictY2(SEXP ImputedYSEXP, SEXP observedOrderSEXP, SEXP XSEXP, SEXP BSEXP, SEXP ThetaSEXP, SEXP LambdaSEXP, SEXP EtaSEXP, SEXP PrecSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type ImputedY(ImputedYSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::uvec> >::type observedOrder(observedOrderSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Eta(EtaSEXP);
    Rcpp::traits::input_parameter< double >::type Prec(PrecSEXP);
    PredictY2(ImputedY, observedOrder, X, B, Theta, Lambda, Eta, Prec);
    return R_NilValue;
END_RCPP
}
// Proposal
Rcpp::List Proposal(arma::vec Theta, arma::mat Lambda, double noise, arma::uword samples);
RcppExport SEXP _BayesianConditionalFPCA_Proposal(SEXP ThetaSEXP, SEXP LambdaSEXP, SEXP noiseSEXP, SEXP samplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< double >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type samples(samplesSEXP);
    rcpp_result_gen = Rcpp::wrap(Proposal(Theta, Lambda, noise, samples));
    return rcpp_result_gen;
END_RCPP
}
// cpploglik_bayes
double cpploglik_bayes(arma::mat& Theta, arma::cube& Lambda, double precision, arma::vec& Phi, arma::mat& X, arma::mat& B, arma::mat& Y, int cores);
RcppExport SEXP _BayesianConditionalFPCA_cpploglik_bayes(SEXP ThetaSEXP, SEXP LambdaSEXP, SEXP precisionSEXP, SEXP PhiSEXP, SEXP XSEXP, SEXP BSEXP, SEXP YSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< double >::type precision(precisionSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(cpploglik_bayes(Theta, Lambda, precision, Phi, X, B, Y, cores));
    return rcpp_result_gen;
END_RCPP
}
// find_stepsize
void find_stepsize(arma::mat& Y, arma::mat& Theta, arma::cube& Lambda, double prec, arma::mat& X, arma::mat& B, double noise);
RcppExport SEXP _BayesianConditionalFPCA_find_stepsize(SEXP YSEXP, SEXP ThetaSEXP, SEXP LambdaSEXP, SEXP precSEXP, SEXP XSEXP, SEXP BSEXP, SEXP noiseSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type noise(noiseSEXP);
    find_stepsize(Y, Theta, Lambda, prec, X, B, noise);
    return R_NilValue;
END_RCPP
}
// get_posterior_predictive_bands
arma::mat get_posterior_predictive_bands(List mod, arma::vec quantiles);
RcppExport SEXP _BayesianConditionalFPCA_get_posterior_predictive_bands(SEXP modSEXP, SEXP quantilesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type mod(modSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type quantiles(quantilesSEXP);
    rcpp_result_gen = Rcpp::wrap(get_posterior_predictive_bands(mod, quantiles));
    return rcpp_result_gen;
END_RCPP
}
// get_posterior_predictive_bands2
arma::mat get_posterior_predictive_bands2(List mod, arma::vec quantiles);
RcppExport SEXP _BayesianConditionalFPCA_get_posterior_predictive_bands2(SEXP modSEXP, SEXP quantilesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type mod(modSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type quantiles(quantilesSEXP);
    rcpp_result_gen = Rcpp::wrap(get_posterior_predictive_bands2(mod, quantiles));
    return rcpp_result_gen;
END_RCPP
}
// get_posterior_subject_bands_cpp
Rcpp::List get_posterior_subject_bands_cpp(List mcmc_output, double alpha);
RcppExport SEXP _BayesianConditionalFPCA_get_posterior_subject_bands_cpp(SEXP mcmc_outputSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type mcmc_output(mcmc_outputSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(get_posterior_subject_bands_cpp(mcmc_output, alpha));
    return rcpp_result_gen;
END_RCPP
}
// get_posterior_means_cpp
arma::mat get_posterior_means_cpp(List mcmc_results, arma::vec xi, double alpha);
RcppExport SEXP _BayesianConditionalFPCA_get_posterior_means_cpp(SEXP mcmc_resultsSEXP, SEXP xiSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type mcmc_results(mcmc_resultsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(get_posterior_means_cpp(mcmc_results, xi, alpha));
    return rcpp_result_gen;
END_RCPP
}
// get_posterior_coefs
List get_posterior_coefs(List mod, double alpha);
RcppExport SEXP _BayesianConditionalFPCA_get_posterior_coefs(SEXP modSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type mod(modSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(get_posterior_coefs(mod, alpha));
    return rcpp_result_gen;
END_RCPP
}
// arma_cov2cor
arma::mat arma_cov2cor(arma::mat V);
RcppExport SEXP _BayesianConditionalFPCA_arma_cov2cor(SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(arma_cov2cor(V));
    return rcpp_result_gen;
END_RCPP
}
// get_posterior_eigen_cpp
List get_posterior_eigen_cpp(Rcpp::List mcmc_results, arma::uword eigenvals, arma::vec zi, double alpha);
RcppExport SEXP _BayesianConditionalFPCA_get_posterior_eigen_cpp(SEXP mcmc_resultsSEXP, SEXP eigenvalsSEXP, SEXP ziSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type mcmc_results(mcmc_resultsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type eigenvals(eigenvalsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zi(ziSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(get_posterior_eigen_cpp(mcmc_results, eigenvals, zi, alpha));
    return rcpp_result_gen;
END_RCPP
}
// get_variance_effects
List get_variance_effects(List mod, double alpha);
RcppExport SEXP _BayesianConditionalFPCA_get_variance_effects(SEXP modSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type mod(modSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(get_variance_effects(mod, alpha));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _BayesianConditionalFPCA_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _BayesianConditionalFPCA_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _BayesianConditionalFPCA_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _BayesianConditionalFPCA_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}
// run_mcmc
Rcpp::List run_mcmc(arma::mat response, arma::mat design_mean, arma::mat design_var, arma::mat basis, arma::vec time, arma::field<arma::mat> penalties_mean, arma::field<arma::mat> penalties_var, arma::uvec indices_mean, arma::uvec indices_var, arma::uword kdim, arma::uword iter, arma::uword burnin, arma::uword thin, std::string var);
RcppExport SEXP _BayesianConditionalFPCA_run_mcmc(SEXP responseSEXP, SEXP design_meanSEXP, SEXP design_varSEXP, SEXP basisSEXP, SEXP timeSEXP, SEXP penalties_meanSEXP, SEXP penalties_varSEXP, SEXP indices_meanSEXP, SEXP indices_varSEXP, SEXP kdimSEXP, SEXP iterSEXP, SEXP burninSEXP, SEXP thinSEXP, SEXP varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type response(responseSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type design_mean(design_meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type design_var(design_varSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type time(timeSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type penalties_mean(penalties_meanSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type penalties_var(penalties_varSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type indices_mean(indices_meanSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type indices_var(indices_varSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type kdim(kdimSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< std::string >::type var(varSEXP);
    rcpp_result_gen = Rcpp::wrap(run_mcmc(response, design_mean, design_var, basis, time, penalties_mean, penalties_var, indices_mean, indices_var, kdim, iter, burnin, thin, var));
    return rcpp_result_gen;
END_RCPP
}
// timesTwo
NumericVector timesTwo(NumericVector x);
RcppExport SEXP _BayesianConditionalFPCA_timesTwo(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(timesTwo(x));
    return rcpp_result_gen;
END_RCPP
}
// updateProjBeta
void updateProjBeta(arma::cube& Lambda, arma::mat& Theta, arma::mat& Eta, arma::vec& Delta, double Prec, arma::mat& X, arma::mat& Y, arma::mat B, arma::mat& Proj, double beta);
RcppExport SEXP _BayesianConditionalFPCA_updateProjBeta(SEXP LambdaSEXP, SEXP ThetaSEXP, SEXP EtaSEXP, SEXP DeltaSEXP, SEXP PrecSEXP, SEXP XSEXP, SEXP YSEXP, SEXP BSEXP, SEXP ProjSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Eta(EtaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< double >::type Prec(PrecSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Proj(ProjSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    updateProjBeta(Lambda, Theta, Eta, Delta, Prec, X, Y, B, Proj, beta);
    return R_NilValue;
END_RCPP
}
// updatePrecPBeta
double updatePrecPBeta(arma::mat& Proj, arma::mat& Y, arma::mat& B, double beta);
RcppExport SEXP _BayesianConditionalFPCA_updatePrecPBeta(SEXP ProjSEXP, SEXP YSEXP, SEXP BSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Proj(ProjSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(updatePrecPBeta(Proj, Y, B, beta));
    return rcpp_result_gen;
END_RCPP
}
// updateTauBeta
void updateTauBeta(arma::mat& Theta, arma::cube& Lambda, arma::mat& Tau, double beta);
RcppExport SEXP _BayesianConditionalFPCA_updateTauBeta(SEXP ThetaSEXP, SEXP LambdaSEXP, SEXP TauSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Tau(TauSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    updateTauBeta(Theta, Lambda, Tau, beta);
    return R_NilValue;
END_RCPP
}
// choose_coordinate
arma::uword choose_coordinate(arma::vec log_weights);
RcppExport SEXP _BayesianConditionalFPCA_choose_coordinate(SEXP log_weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type log_weights(log_weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(choose_coordinate(log_weights));
    return rcpp_result_gen;
END_RCPP
}
// updateThetaLambdaPT
double updateThetaLambdaPT(arma::cube& Lambda, arma::mat& Theta, arma::mat& Eta, arma::vec& Delta, arma::mat& Proj, arma::mat& Tau, arma::mat& X, double beta);
RcppExport SEXP _BayesianConditionalFPCA_updateThetaLambdaPT(SEXP LambdaSEXP, SEXP ThetaSEXP, SEXP EtaSEXP, SEXP DeltaSEXP, SEXP ProjSEXP, SEXP TauSEXP, SEXP XSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Eta(EtaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Proj(ProjSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Tau(TauSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(updateThetaLambdaPT(Lambda, Theta, Eta, Delta, Proj, Tau, X, beta));
    return rcpp_result_gen;
END_RCPP
}
// updateEtaPT
double updateEtaPT(arma::cube& Lambda, arma::mat& Theta, arma::mat& Eta, arma::vec& Delta, arma::mat& Proj, arma::mat& X, double beta);
RcppExport SEXP _BayesianConditionalFPCA_updateEtaPT(SEXP LambdaSEXP, SEXP ThetaSEXP, SEXP EtaSEXP, SEXP DeltaSEXP, SEXP ProjSEXP, SEXP XSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Eta(EtaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Proj(ProjSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(updateEtaPT(Lambda, Theta, Eta, Delta, Proj, X, beta));
    return rcpp_result_gen;
END_RCPP
}
// updateProj
void updateProj(arma::cube& Lambda, arma::mat& Theta, arma::mat& Eta, arma::vec& Delta, double Prec, arma::mat& X, arma::mat& Y, arma::mat B, arma::mat& Proj);
RcppExport SEXP _BayesianConditionalFPCA_updateProj(SEXP LambdaSEXP, SEXP ThetaSEXP, SEXP EtaSEXP, SEXP DeltaSEXP, SEXP PrecSEXP, SEXP XSEXP, SEXP YSEXP, SEXP BSEXP, SEXP ProjSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Eta(EtaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< double >::type Prec(PrecSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Proj(ProjSEXP);
    updateProj(Lambda, Theta, Eta, Delta, Prec, X, Y, B, Proj);
    return R_NilValue;
END_RCPP
}
// updateThetaLambdaP
void updateThetaLambdaP(arma::cube& Lambda, arma::mat& Theta, arma::mat& Eta, arma::vec& Delta, arma::mat& Proj, arma::mat& Tau, arma::mat& X);
RcppExport SEXP _BayesianConditionalFPCA_updateThetaLambdaP(SEXP LambdaSEXP, SEXP ThetaSEXP, SEXP EtaSEXP, SEXP DeltaSEXP, SEXP ProjSEXP, SEXP TauSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Eta(EtaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Proj(ProjSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Tau(TauSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    updateThetaLambdaP(Lambda, Theta, Eta, Delta, Proj, Tau, X);
    return R_NilValue;
END_RCPP
}
// updateEtaP
void updateEtaP(arma::cube& Lambda, arma::mat& Theta, arma::mat& Eta, arma::vec& Delta, arma::mat& Proj, arma::mat& X);
RcppExport SEXP _BayesianConditionalFPCA_updateEtaP(SEXP LambdaSEXP, SEXP ThetaSEXP, SEXP EtaSEXP, SEXP DeltaSEXP, SEXP ProjSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Eta(EtaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Proj(ProjSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    updateEtaP(Lambda, Theta, Eta, Delta, Proj, X);
    return R_NilValue;
END_RCPP
}
// updateDelta
void updateDelta(arma::mat& Proj, arma::mat& Theta, arma::cube& Lambda, arma::mat& Eta, arma::vec& Delta, arma::mat& X);
RcppExport SEXP _BayesianConditionalFPCA_updateDelta(SEXP ProjSEXP, SEXP ThetaSEXP, SEXP LambdaSEXP, SEXP EtaSEXP, SEXP DeltaSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Proj(ProjSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Eta(EtaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    updateDelta(Proj, Theta, Lambda, Eta, Delta, X);
    return R_NilValue;
END_RCPP
}
// updatePrecP
double updatePrecP(arma::mat& Proj, arma::mat& Y, arma::mat& B);
RcppExport SEXP _BayesianConditionalFPCA_updatePrecP(SEXP ProjSEXP, SEXP YSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Proj(ProjSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(updatePrecP(Proj, Y, B));
    return rcpp_result_gen;
END_RCPP
}
// updateLambda
void updateLambda(arma::mat& Y, arma::cube& Lambda, arma::vec& r, arma::mat& Gamma, arma::mat& X, arma::mat& B, double prec);
RcppExport SEXP _BayesianConditionalFPCA_updateLambda(SEXP YSEXP, SEXP LambdaSEXP, SEXP rSEXP, SEXP GammaSEXP, SEXP XSEXP, SEXP BSEXP, SEXP precSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type r(rSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Gamma(GammaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    updateLambda(Y, Lambda, r, Gamma, X, B, prec);
    return R_NilValue;
END_RCPP
}
// updateLambda2
void updateLambda2(arma::mat& Y, arma::cube& Lambda, arma::mat& Tau, arma::mat& Gamma, arma::mat& X, arma::mat& B, double prec, arma::mat& Theta);
RcppExport SEXP _BayesianConditionalFPCA_updateLambda2(SEXP YSEXP, SEXP LambdaSEXP, SEXP TauSEXP, SEXP GammaSEXP, SEXP XSEXP, SEXP BSEXP, SEXP precSEXP, SEXP ThetaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Tau(TauSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Gamma(GammaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Theta(ThetaSEXP);
    updateLambda2(Y, Lambda, Tau, Gamma, X, B, prec, Theta);
    return R_NilValue;
END_RCPP
}
// updateTheta
void updateTheta(arma::mat& Y, arma::cube& Lambda, arma::mat& Tau, arma::mat& Gamma, arma::mat& X, arma::mat& B, double prec, arma::mat& Theta);
RcppExport SEXP _BayesianConditionalFPCA_updateTheta(SEXP YSEXP, SEXP LambdaSEXP, SEXP TauSEXP, SEXP GammaSEXP, SEXP XSEXP, SEXP BSEXP, SEXP precSEXP, SEXP ThetaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Tau(TauSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Gamma(GammaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Theta(ThetaSEXP);
    updateTheta(Y, Lambda, Tau, Gamma, X, B, prec, Theta);
    return R_NilValue;
END_RCPP
}
// updateTheta2
void updateTheta2(arma::mat& Y, arma::cube& Lambda, arma::mat& Tau, arma::mat& X, arma::mat& B, double prec, arma::mat& Theta);
RcppExport SEXP _BayesianConditionalFPCA_updateTheta2(SEXP YSEXP, SEXP LambdaSEXP, SEXP TauSEXP, SEXP XSEXP, SEXP BSEXP, SEXP precSEXP, SEXP ThetaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Tau(TauSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Theta(ThetaSEXP);
    updateTheta2(Y, Lambda, Tau, X, B, prec, Theta);
    return R_NilValue;
END_RCPP
}
// updateThetaLambda
void updateThetaLambda(arma::mat& Y, arma::cube& Lambda, arma::mat& Eta, arma::mat& Tau, arma::mat& X, arma::mat& B, double prec, arma::mat& Theta);
RcppExport SEXP _BayesianConditionalFPCA_updateThetaLambda(SEXP YSEXP, SEXP LambdaSEXP, SEXP EtaSEXP, SEXP TauSEXP, SEXP XSEXP, SEXP BSEXP, SEXP precSEXP, SEXP ThetaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Eta(EtaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Tau(TauSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Theta(ThetaSEXP);
    updateThetaLambda(Y, Lambda, Eta, Tau, X, B, prec, Theta);
    return R_NilValue;
END_RCPP
}
// updateThetaLambdaMH
void updateThetaLambdaMH(arma::mat& Y, arma::mat& Theta, arma::cube& Lambda, arma::mat& Tau, double prec, arma::mat& X, arma::mat& B, double noise, arma::uword n);
RcppExport SEXP _BayesianConditionalFPCA_updateThetaLambdaMH(SEXP YSEXP, SEXP ThetaSEXP, SEXP LambdaSEXP, SEXP TauSEXP, SEXP precSEXP, SEXP XSEXP, SEXP BSEXP, SEXP noiseSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Tau(TauSEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n(nSEXP);
    updateThetaLambdaMH(Y, Theta, Lambda, Tau, prec, X, B, noise, n);
    return R_NilValue;
END_RCPP
}
// updateEta
void updateEta(arma::mat& Y, arma::cube& Lambda, arma::vec& Sigma, arma::mat& Eta, arma::mat& X, arma::mat& B, double prec, arma::mat& Theta);
RcppExport SEXP _BayesianConditionalFPCA_updateEta(SEXP YSEXP, SEXP LambdaSEXP, SEXP SigmaSEXP, SEXP EtaSEXP, SEXP XSEXP, SEXP BSEXP, SEXP precSEXP, SEXP ThetaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Eta(EtaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Theta(ThetaSEXP);
    updateEta(Y, Lambda, Sigma, Eta, X, B, prec, Theta);
    return R_NilValue;
END_RCPP
}
// updateEta2
void updateEta2(arma::mat& Y, arma::cube& Lambda, arma::vec& Sigma, arma::mat& Eta, arma::mat& X, arma::mat& B, double prec, arma::mat& Theta);
RcppExport SEXP _BayesianConditionalFPCA_updateEta2(SEXP YSEXP, SEXP LambdaSEXP, SEXP SigmaSEXP, SEXP EtaSEXP, SEXP XSEXP, SEXP BSEXP, SEXP precSEXP, SEXP ThetaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Eta(EtaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Theta(ThetaSEXP);
    updateEta2(Y, Lambda, Sigma, Eta, X, B, prec, Theta);
    return R_NilValue;
END_RCPP
}
// updateEta3
void updateEta3(arma::mat& Y, arma::cube& Lambda, arma::mat& Eta, arma::mat& X, arma::mat& B, double prec, arma::mat& Theta);
RcppExport SEXP _BayesianConditionalFPCA_updateEta3(SEXP YSEXP, SEXP LambdaSEXP, SEXP EtaSEXP, SEXP XSEXP, SEXP BSEXP, SEXP precSEXP, SEXP ThetaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Eta(EtaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Theta(ThetaSEXP);
    updateEta3(Y, Lambda, Eta, X, B, prec, Theta);
    return R_NilValue;
END_RCPP
}
// updatePrec
double updatePrec(arma::mat& Y, arma::cube& Lambda, arma::mat Gamma, arma::mat& X, arma::mat& B, arma::mat& Theta);
RcppExport SEXP _BayesianConditionalFPCA_updatePrec(SEXP YSEXP, SEXP LambdaSEXP, SEXP GammaSEXP, SEXP XSEXP, SEXP BSEXP, SEXP ThetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Gamma(GammaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Theta(ThetaSEXP);
    rcpp_result_gen = Rcpp::wrap(updatePrec(Y, Lambda, Gamma, X, B, Theta));
    return rcpp_result_gen;
END_RCPP
}
// updateTau
void updateTau(arma::mat& Theta, arma::cube& Lambda, arma::mat& Tau);
RcppExport SEXP _BayesianConditionalFPCA_updateTau(SEXP ThetaSEXP, SEXP LambdaSEXP, SEXP TauSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Tau(TauSEXP);
    updateTau(Theta, Lambda, Tau);
    return R_NilValue;
END_RCPP
}
// updateSigma
void updateSigma(arma::mat& Eta, arma::vec& Sigma);
RcppExport SEXP _BayesianConditionalFPCA_updateSigma(SEXP EtaSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Eta(EtaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Sigma(SigmaSEXP);
    updateSigma(Eta, Sigma);
    return R_NilValue;
END_RCPP
}
// updateSigBeta
void updateSigBeta(arma::vec& sigma, arma::vec& SigBeta, double Phi, arma::mat& X);
RcppExport SEXP _BayesianConditionalFPCA_updateSigBeta(SEXP sigmaSEXP, SEXP SigBetaSEXP, SEXP PhiSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type SigBeta(SigBetaSEXP);
    Rcpp::traits::input_parameter< double >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    updateSigBeta(sigma, SigBeta, Phi, X);
    return R_NilValue;
END_RCPP
}
// updateLambdaS
void updateLambdaS(arma::field<arma::vec>& Y, arma::cube& Lambda, arma::mat& Tau, arma::mat& c, arma::mat& Gamma, arma::mat& X, arma::field<arma::mat>& B, double prec, arma::mat& Theta);
RcppExport SEXP _BayesianConditionalFPCA_updateLambdaS(SEXP YSEXP, SEXP LambdaSEXP, SEXP TauSEXP, SEXP cSEXP, SEXP GammaSEXP, SEXP XSEXP, SEXP BSEXP, SEXP precSEXP, SEXP ThetaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::vec>& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Tau(TauSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type c(cSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Gamma(GammaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat>& >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Theta(ThetaSEXP);
    updateLambdaS(Y, Lambda, Tau, c, Gamma, X, B, prec, Theta);
    return R_NilValue;
END_RCPP
}
// updateThetaS
void updateThetaS(arma::field<arma::vec>& Y, arma::cube& Lambda, arma::mat& Tau, arma::mat& Gamma, arma::mat& X, arma::field<arma::mat> B, double prec, arma::mat& Theta);
RcppExport SEXP _BayesianConditionalFPCA_updateThetaS(SEXP YSEXP, SEXP LambdaSEXP, SEXP TauSEXP, SEXP GammaSEXP, SEXP XSEXP, SEXP BSEXP, SEXP precSEXP, SEXP ThetaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::vec>& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Tau(TauSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Gamma(GammaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Theta(ThetaSEXP);
    updateThetaS(Y, Lambda, Tau, Gamma, X, B, prec, Theta);
    return R_NilValue;
END_RCPP
}
// updateEtaS
void updateEtaS(arma::field<arma::vec>& Y, arma::cube& Lambda, arma::vec& Sigma, arma::mat& Eta, arma::mat& X, arma::field<arma::mat>& B, double prec, arma::mat& Theta);
RcppExport SEXP _BayesianConditionalFPCA_updateEtaS(SEXP YSEXP, SEXP LambdaSEXP, SEXP SigmaSEXP, SEXP EtaSEXP, SEXP XSEXP, SEXP BSEXP, SEXP precSEXP, SEXP ThetaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::vec>& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Eta(EtaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat>& >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Theta(ThetaSEXP);
    updateEtaS(Y, Lambda, Sigma, Eta, X, B, prec, Theta);
    return R_NilValue;
END_RCPP
}
// updatePrecS
double updatePrecS(arma::field<arma::vec>& Y, arma::cube& Lambda, arma::mat Gamma, arma::mat& X, arma::field<arma::mat>& B, arma::mat& Theta);
RcppExport SEXP _BayesianConditionalFPCA_updatePrecS(SEXP YSEXP, SEXP LambdaSEXP, SEXP GammaSEXP, SEXP XSEXP, SEXP BSEXP, SEXP ThetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::vec>& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Gamma(GammaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat>& >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Theta(ThetaSEXP);
    rcpp_result_gen = Rcpp::wrap(updatePrecS(Y, Lambda, Gamma, X, B, Theta));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BayesianConditionalFPCA_cppgetX", (DL_FUNC) &_BayesianConditionalFPCA_cppgetX, 5},
    {"_BayesianConditionalFPCA_cppupdateall", (DL_FUNC) &_BayesianConditionalFPCA_cppupdateall, 7},
    {"_BayesianConditionalFPCA_cppupdateall_Proj", (DL_FUNC) &_BayesianConditionalFPCA_cppupdateall_Proj, 6},
    {"_BayesianConditionalFPCA_cppupdateeta", (DL_FUNC) &_BayesianConditionalFPCA_cppupdateeta, 9},
    {"_BayesianConditionalFPCA_cppupdateeta_Proj", (DL_FUNC) &_BayesianConditionalFPCA_cppupdateeta_Proj, 8},
    {"_BayesianConditionalFPCA_cpploglik", (DL_FUNC) &_BayesianConditionalFPCA_cpploglik, 8},
    {"_BayesianConditionalFPCA_cpploglik_Proj", (DL_FUNC) &_BayesianConditionalFPCA_cpploglik_Proj, 7},
    {"_BayesianConditionalFPCA_completeY2Means", (DL_FUNC) &_BayesianConditionalFPCA_completeY2Means, 3},
    {"_BayesianConditionalFPCA_cpp_EM2", (DL_FUNC) &_BayesianConditionalFPCA_cpp_EM2, 6},
    {"_BayesianConditionalFPCA_cpp_EM", (DL_FUNC) &_BayesianConditionalFPCA_cpp_EM, 6},
    {"_BayesianConditionalFPCA_cpp_EM_Proj", (DL_FUNC) &_BayesianConditionalFPCA_cpp_EM_Proj, 5},
    {"_BayesianConditionalFPCA_cpp_EM_new", (DL_FUNC) &_BayesianConditionalFPCA_cpp_EM_new, 7},
    {"_BayesianConditionalFPCA_armadillo_modulus", (DL_FUNC) &_BayesianConditionalFPCA_armadillo_modulus, 2},
    {"_BayesianConditionalFPCA_completeY", (DL_FUNC) &_BayesianConditionalFPCA_completeY, 3},
    {"_BayesianConditionalFPCA_MCMC_Impute", (DL_FUNC) &_BayesianConditionalFPCA_MCMC_Impute, 9},
    {"_BayesianConditionalFPCA_completeY2", (DL_FUNC) &_BayesianConditionalFPCA_completeY2, 3},
    {"_BayesianConditionalFPCA_run_mcmc_Morris", (DL_FUNC) &_BayesianConditionalFPCA_run_mcmc_Morris, 11},
    {"_BayesianConditionalFPCA_run_mcmc_Morris_Tensor", (DL_FUNC) &_BayesianConditionalFPCA_run_mcmc_Morris_Tensor, 15},
    {"_BayesianConditionalFPCA_BuildBlkDiag", (DL_FUNC) &_BayesianConditionalFPCA_BuildBlkDiag, 4},
    {"_BayesianConditionalFPCA_testfunc", (DL_FUNC) &_BayesianConditionalFPCA_testfunc, 0},
    {"_BayesianConditionalFPCA_MCMC_Sparse", (DL_FUNC) &_BayesianConditionalFPCA_MCMC_Sparse, 7},
    {"_BayesianConditionalFPCA_MCMC_Tempered", (DL_FUNC) &_BayesianConditionalFPCA_MCMC_Tempered, 12},
    {"_BayesianConditionalFPCA_MCMC_Wrapper", (DL_FUNC) &_BayesianConditionalFPCA_MCMC_Wrapper, 10},
    {"_BayesianConditionalFPCA_TemperedMCMC", (DL_FUNC) &_BayesianConditionalFPCA_TemperedMCMC, 11},
    {"_BayesianConditionalFPCA_get_proposal", (DL_FUNC) &_BayesianConditionalFPCA_get_proposal, 1},
    {"_BayesianConditionalFPCA_armadillo_modulus2", (DL_FUNC) &_BayesianConditionalFPCA_armadillo_modulus2, 2},
    {"_BayesianConditionalFPCA_armadillo_modulus3", (DL_FUNC) &_BayesianConditionalFPCA_armadillo_modulus3, 2},
    {"_BayesianConditionalFPCA_get_omnibus_fit", (DL_FUNC) &_BayesianConditionalFPCA_get_omnibus_fit, 1},
    {"_BayesianConditionalFPCA_get_omnibus_fit2", (DL_FUNC) &_BayesianConditionalFPCA_get_omnibus_fit2, 1},
    {"_BayesianConditionalFPCA_DiffOp", (DL_FUNC) &_BayesianConditionalFPCA_DiffOp, 1},
    {"_BayesianConditionalFPCA_getPenalty2", (DL_FUNC) &_BayesianConditionalFPCA_getPenalty2, 2},
    {"_BayesianConditionalFPCA_getPenalty", (DL_FUNC) &_BayesianConditionalFPCA_getPenalty, 1},
    {"_BayesianConditionalFPCA_initializeY", (DL_FUNC) &_BayesianConditionalFPCA_initializeY, 3},
    {"_BayesianConditionalFPCA_getObservedOrder", (DL_FUNC) &_BayesianConditionalFPCA_getObservedOrder, 2},
    {"_BayesianConditionalFPCA_PredictY", (DL_FUNC) &_BayesianConditionalFPCA_PredictY, 7},
    {"_BayesianConditionalFPCA_PredictY2", (DL_FUNC) &_BayesianConditionalFPCA_PredictY2, 8},
    {"_BayesianConditionalFPCA_Proposal", (DL_FUNC) &_BayesianConditionalFPCA_Proposal, 4},
    {"_BayesianConditionalFPCA_cpploglik_bayes", (DL_FUNC) &_BayesianConditionalFPCA_cpploglik_bayes, 8},
    {"_BayesianConditionalFPCA_find_stepsize", (DL_FUNC) &_BayesianConditionalFPCA_find_stepsize, 7},
    {"_BayesianConditionalFPCA_get_posterior_predictive_bands", (DL_FUNC) &_BayesianConditionalFPCA_get_posterior_predictive_bands, 2},
    {"_BayesianConditionalFPCA_get_posterior_predictive_bands2", (DL_FUNC) &_BayesianConditionalFPCA_get_posterior_predictive_bands2, 2},
    {"_BayesianConditionalFPCA_get_posterior_subject_bands_cpp", (DL_FUNC) &_BayesianConditionalFPCA_get_posterior_subject_bands_cpp, 2},
    {"_BayesianConditionalFPCA_get_posterior_means_cpp", (DL_FUNC) &_BayesianConditionalFPCA_get_posterior_means_cpp, 3},
    {"_BayesianConditionalFPCA_get_posterior_coefs", (DL_FUNC) &_BayesianConditionalFPCA_get_posterior_coefs, 2},
    {"_BayesianConditionalFPCA_arma_cov2cor", (DL_FUNC) &_BayesianConditionalFPCA_arma_cov2cor, 1},
    {"_BayesianConditionalFPCA_get_posterior_eigen_cpp", (DL_FUNC) &_BayesianConditionalFPCA_get_posterior_eigen_cpp, 4},
    {"_BayesianConditionalFPCA_get_variance_effects", (DL_FUNC) &_BayesianConditionalFPCA_get_variance_effects, 2},
    {"_BayesianConditionalFPCA_rcpparma_hello_world", (DL_FUNC) &_BayesianConditionalFPCA_rcpparma_hello_world, 0},
    {"_BayesianConditionalFPCA_rcpparma_outerproduct", (DL_FUNC) &_BayesianConditionalFPCA_rcpparma_outerproduct, 1},
    {"_BayesianConditionalFPCA_rcpparma_innerproduct", (DL_FUNC) &_BayesianConditionalFPCA_rcpparma_innerproduct, 1},
    {"_BayesianConditionalFPCA_rcpparma_bothproducts", (DL_FUNC) &_BayesianConditionalFPCA_rcpparma_bothproducts, 1},
    {"_BayesianConditionalFPCA_run_mcmc", (DL_FUNC) &_BayesianConditionalFPCA_run_mcmc, 14},
    {"_BayesianConditionalFPCA_timesTwo", (DL_FUNC) &_BayesianConditionalFPCA_timesTwo, 1},
    {"_BayesianConditionalFPCA_updateProjBeta", (DL_FUNC) &_BayesianConditionalFPCA_updateProjBeta, 10},
    {"_BayesianConditionalFPCA_updatePrecPBeta", (DL_FUNC) &_BayesianConditionalFPCA_updatePrecPBeta, 4},
    {"_BayesianConditionalFPCA_updateTauBeta", (DL_FUNC) &_BayesianConditionalFPCA_updateTauBeta, 4},
    {"_BayesianConditionalFPCA_choose_coordinate", (DL_FUNC) &_BayesianConditionalFPCA_choose_coordinate, 1},
    {"_BayesianConditionalFPCA_updateThetaLambdaPT", (DL_FUNC) &_BayesianConditionalFPCA_updateThetaLambdaPT, 8},
    {"_BayesianConditionalFPCA_updateEtaPT", (DL_FUNC) &_BayesianConditionalFPCA_updateEtaPT, 7},
    {"_BayesianConditionalFPCA_updateProj", (DL_FUNC) &_BayesianConditionalFPCA_updateProj, 9},
    {"_BayesianConditionalFPCA_updateThetaLambdaP", (DL_FUNC) &_BayesianConditionalFPCA_updateThetaLambdaP, 7},
    {"_BayesianConditionalFPCA_updateEtaP", (DL_FUNC) &_BayesianConditionalFPCA_updateEtaP, 6},
    {"_BayesianConditionalFPCA_updateDelta", (DL_FUNC) &_BayesianConditionalFPCA_updateDelta, 6},
    {"_BayesianConditionalFPCA_updatePrecP", (DL_FUNC) &_BayesianConditionalFPCA_updatePrecP, 3},
    {"_BayesianConditionalFPCA_updateLambda", (DL_FUNC) &_BayesianConditionalFPCA_updateLambda, 7},
    {"_BayesianConditionalFPCA_updateLambda2", (DL_FUNC) &_BayesianConditionalFPCA_updateLambda2, 8},
    {"_BayesianConditionalFPCA_updateTheta", (DL_FUNC) &_BayesianConditionalFPCA_updateTheta, 8},
    {"_BayesianConditionalFPCA_updateTheta2", (DL_FUNC) &_BayesianConditionalFPCA_updateTheta2, 7},
    {"_BayesianConditionalFPCA_updateThetaLambda", (DL_FUNC) &_BayesianConditionalFPCA_updateThetaLambda, 8},
    {"_BayesianConditionalFPCA_updateThetaLambdaMH", (DL_FUNC) &_BayesianConditionalFPCA_updateThetaLambdaMH, 9},
    {"_BayesianConditionalFPCA_updateEta", (DL_FUNC) &_BayesianConditionalFPCA_updateEta, 8},
    {"_BayesianConditionalFPCA_updateEta2", (DL_FUNC) &_BayesianConditionalFPCA_updateEta2, 8},
    {"_BayesianConditionalFPCA_updateEta3", (DL_FUNC) &_BayesianConditionalFPCA_updateEta3, 7},
    {"_BayesianConditionalFPCA_updatePrec", (DL_FUNC) &_BayesianConditionalFPCA_updatePrec, 6},
    {"_BayesianConditionalFPCA_updateTau", (DL_FUNC) &_BayesianConditionalFPCA_updateTau, 3},
    {"_BayesianConditionalFPCA_updateSigma", (DL_FUNC) &_BayesianConditionalFPCA_updateSigma, 2},
    {"_BayesianConditionalFPCA_updateSigBeta", (DL_FUNC) &_BayesianConditionalFPCA_updateSigBeta, 4},
    {"_BayesianConditionalFPCA_updateLambdaS", (DL_FUNC) &_BayesianConditionalFPCA_updateLambdaS, 9},
    {"_BayesianConditionalFPCA_updateThetaS", (DL_FUNC) &_BayesianConditionalFPCA_updateThetaS, 8},
    {"_BayesianConditionalFPCA_updateEtaS", (DL_FUNC) &_BayesianConditionalFPCA_updateEtaS, 8},
    {"_BayesianConditionalFPCA_updatePrecS", (DL_FUNC) &_BayesianConditionalFPCA_updatePrecS, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_BayesianConditionalFPCA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
