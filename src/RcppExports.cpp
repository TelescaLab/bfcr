// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// get_posterior_subject_bands_cpp
Rcpp::List get_posterior_subject_bands_cpp(List mcmc_output, double alpha, std::string mode);
RcppExport SEXP _BayesianConditionalFPCA_get_posterior_subject_bands_cpp(SEXP mcmc_outputSEXP, SEXP alphaSEXP, SEXP modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type mcmc_output(mcmc_outputSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< std::string >::type mode(modeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_posterior_subject_bands_cpp(mcmc_output, alpha, mode));
    return rcpp_result_gen;
END_RCPP
}
// get_posterior_means_cpp
arma::mat get_posterior_means_cpp(List mcmc_results, arma::vec xi, double alpha, std::string mode);
RcppExport SEXP _BayesianConditionalFPCA_get_posterior_means_cpp(SEXP mcmc_resultsSEXP, SEXP xiSEXP, SEXP alphaSEXP, SEXP modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type mcmc_results(mcmc_resultsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< std::string >::type mode(modeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_posterior_means_cpp(mcmc_results, xi, alpha, mode));
    return rcpp_result_gen;
END_RCPP
}
// get_posterior_eigen_cpp
List get_posterior_eigen_cpp(Rcpp::List mcmc_results, arma::uword eigenvals, arma::vec zi, double alpha, std::string mode);
RcppExport SEXP _BayesianConditionalFPCA_get_posterior_eigen_cpp(SEXP mcmc_resultsSEXP, SEXP eigenvalsSEXP, SEXP ziSEXP, SEXP alphaSEXP, SEXP modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type mcmc_results(mcmc_resultsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type eigenvals(eigenvalsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zi(ziSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< std::string >::type mode(modeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_posterior_eigen_cpp(mcmc_results, eigenvals, zi, alpha, mode));
    return rcpp_result_gen;
END_RCPP
}
// get_posterior_covariance_cpp
Rcpp::List get_posterior_covariance_cpp(Rcpp::List mcmc_results, arma::vec zi);
RcppExport SEXP _BayesianConditionalFPCA_get_posterior_covariance_cpp(SEXP mcmc_resultsSEXP, SEXP ziSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type mcmc_results(mcmc_resultsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zi(ziSEXP);
    rcpp_result_gen = Rcpp::wrap(get_posterior_covariance_cpp(mcmc_results, zi));
    return rcpp_result_gen;
END_RCPP
}
// run_mcmc
Rcpp::List run_mcmc(arma::mat response, arma::mat design_mean, arma::mat design_var, arma::mat basis, arma::vec time, arma::field<arma::mat> penalties_mean, arma::field<arma::mat> penalties_var, arma::uvec indices_mean, arma::uvec indices_var, arma::uword kdim, arma::uword iter, arma::uword burnin, arma::uword thin, std::string var);
RcppExport SEXP _BayesianConditionalFPCA_run_mcmc(SEXP responseSEXP, SEXP design_meanSEXP, SEXP design_varSEXP, SEXP basisSEXP, SEXP timeSEXP, SEXP penalties_meanSEXP, SEXP penalties_varSEXP, SEXP indices_meanSEXP, SEXP indices_varSEXP, SEXP kdimSEXP, SEXP iterSEXP, SEXP burninSEXP, SEXP thinSEXP, SEXP varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type response(responseSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type design_mean(design_meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type design_var(design_varSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type time(timeSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type penalties_mean(penalties_meanSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type penalties_var(penalties_varSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type indices_mean(indices_meanSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type indices_var(indices_varSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type kdim(kdimSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< std::string >::type var(varSEXP);
    rcpp_result_gen = Rcpp::wrap(run_mcmc(response, design_mean, design_var, basis, time, penalties_mean, penalties_var, indices_mean, indices_var, kdim, iter, burnin, thin, var));
    return rcpp_result_gen;
END_RCPP
}
// get_proposal
double get_proposal(double old);
RcppExport SEXP _BayesianConditionalFPCA_get_proposal(SEXP oldSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type old(oldSEXP);
    rcpp_result_gen = Rcpp::wrap(get_proposal(old));
    return rcpp_result_gen;
END_RCPP
}
// armadillo_modulus
arma::uvec armadillo_modulus(arma::uvec indicies, arma::uword n);
RcppExport SEXP _BayesianConditionalFPCA_armadillo_modulus(SEXP indiciesSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type indicies(indiciesSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(armadillo_modulus(indicies, n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BayesianConditionalFPCA_get_posterior_subject_bands_cpp", (DL_FUNC) &_BayesianConditionalFPCA_get_posterior_subject_bands_cpp, 3},
    {"_BayesianConditionalFPCA_get_posterior_means_cpp", (DL_FUNC) &_BayesianConditionalFPCA_get_posterior_means_cpp, 4},
    {"_BayesianConditionalFPCA_get_posterior_eigen_cpp", (DL_FUNC) &_BayesianConditionalFPCA_get_posterior_eigen_cpp, 5},
    {"_BayesianConditionalFPCA_get_posterior_covariance_cpp", (DL_FUNC) &_BayesianConditionalFPCA_get_posterior_covariance_cpp, 2},
    {"_BayesianConditionalFPCA_run_mcmc", (DL_FUNC) &_BayesianConditionalFPCA_run_mcmc, 14},
    {"_BayesianConditionalFPCA_get_proposal", (DL_FUNC) &_BayesianConditionalFPCA_get_proposal, 1},
    {"_BayesianConditionalFPCA_armadillo_modulus", (DL_FUNC) &_BayesianConditionalFPCA_armadillo_modulus, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_BayesianConditionalFPCA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
