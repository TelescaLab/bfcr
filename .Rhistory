for(a in 1:K){
covbayes <- covbayes + B%*%bayes_param$Lambda[[chain,iter]][,,a]%*%outer(x,x)%*%t(bayes_param$Lambda[[chain,iter]][,,a])%*%t(B)
}
}
}
covbayes <- covbayes / ((max_iter - burnin + 1) * nchain)
covtruth <- Btru%*%Lambda1%*%outer(x,x)%*%t(Lambda1)%*%t(Btru) + Btru%*%Lambda2%*%outer(x,x)%*%t(Lambda2)%*%t(Btru)
sum((covfreq - covtruth)^2)/sum((covtruth)^2)*100
sum((covbayes - covtruth)^2)/sum((covtruth^2))*100
par(mfrow = c(1,3))
persp3D(1:tmax,1:tmax, covtruth, theta=90,phi=10, main = "Truth", colkey = FALSE)
persp3D(1:tmax,1:tmax, covfreq, theta=90,phi=10, zlim = c(min(unlist(covtruth)),max(unlist(covtruth))), main = "EM algorithm", colkey = FALSE)
persp3D(1:tmax,1:tmax, covbayes, theta=90,phi=10, zlim = c(min(unlist(covtruth)),max(unlist(covtruth))), main = "Gibbs sampling", colkey = FALSE)
{
set.seed(5)
p <- 12
#B <- bs(T, df = p, intercept = TRUE)
B <- ps(T, df = p, diff = 1, intercept = TRUE)
K <- 2
Xmat <- kronecker(B, X)
reg <- lm(c(Y) ~ Xmat - 1)
Theta_init <- t(matrix(reg$coefficients, nrow = 2))
#Theta_init <- Theta1
param <- cpp_EM(X, B, Y, K,Theta_init, 12)
cpploglik(Theta1, cbind(Lambda1,Lambda2), 1/noise_sd^2, X, Btru, Y, 2, 6)
#    n_500_high_noise_high_between[i] <- cpploglik(param$Theta, param$Lambda, param$Precision, X, B, Y, K,1)
max_iter <- 5000
burnin <- 1000
thin <- 1
nchain <- 1
Lambda_init <- array(param$Lambda, dim = c(p, 2, K))
Eta_init <- t(param$EtaM)
Prec_init <- param$Precision
bayes_param <- MCMC(Y, X, B, K, max_iter, nchain, thin, param$Theta, Lambda_init, Eta_init, Prec_init)
#bayes_logliks <- sapply(seq(from = 1, to = max_iter, by = 1), function(i) cpploglik(bayes_param$Theta[[1]][,,i], array(bayes_param$Lambda[[1,i]], dim = c(p,2*K)), bayes_param$Prec[[1]][i], X, B, Y, K, 6))
}
dev.off()
x <- c(1,-1)
bayes_mean <- matrix(0, nrow = p, ncol = 2)
for(i in 1:nchain){
bayes_mean <- bayes_mean + apply(bayes_param$Theta[[i]][,,burnin:max_iter], c(1,2), mean)
}
bayes_mean <- bayes_mean / nchain
plot(T,Btru%*%Theta1%*%x, type = "l", ylab = "Mean", xlab = "t")
lines(T,B%*%Theta_init%*%x,col="green")
lines(T,B%*%param$Theta%*%x, col = "blue")
lines(T,B%*%bayes_mean%*%x, col = "red")
for(chain in 1:nchain){
for(i in seq(from = burnin, to = max_iter, by = 10)){
lines(T,B%*%bayes_param$Theta[[chain]][,,i]%*%x, col = "gray")
}
}
lines(Btru%*%Theta1%*%x, type = "l",col="red")
sum((B%*%param$Theta%*%x - Btru%*%Theta1%*%x)^2)/sum((Btru%*%Theta1%*%x)^2)*100
sum((B%*%bayes_mean%*%x - Btru%*%Theta1%*%x)^2)/sum((Btru%*%Theta1%*%x)^2)*100
covfreq <- matrix(0, p, p)
for(k in 1:K){
covfreq <- covfreq + param$Lambda[,(d*(k-1)+1):(d*k)]%*%outer(x,x)%*%t(param$Lambda[,(d*(k-1)+1):(d*k)])
}
covfreq <- B%*%covfreq%*%t(B)
covbayes <- matrix(0, nrow = tmax, ncol = tmax)
for(chain in 1:nchain){
for(iter in burnin:max_iter){
for(a in 1:K){
covbayes <- covbayes + B%*%bayes_param$Lambda[[chain,iter]][,,a]%*%outer(x,x)%*%t(bayes_param$Lambda[[chain,iter]][,,a])%*%t(B)
}
}
}
covbayes <- covbayes / ((max_iter - burnin + 1) * nchain)
covtruth <- Btru%*%Lambda1%*%outer(x,x)%*%t(Lambda1)%*%t(Btru) + Btru%*%Lambda2%*%outer(x,x)%*%t(Lambda2)%*%t(Btru)
sum((covfreq - covtruth)^2)/sum((covtruth)^2)*100
sum((covbayes - covtruth)^2)/sum((covtruth^2))*100
par(mfrow = c(1,3))
persp3D(1:tmax,1:tmax, covtruth, theta=90,phi=10, main = "Truth", colkey = FALSE)
persp3D(1:tmax,1:tmax, covfreq, theta=90,phi=10, zlim = c(min(unlist(covtruth)),max(unlist(covtruth))), main = "EM algorithm", colkey = FALSE)
persp3D(1:tmax,1:tmax, covbayes, theta=90,phi=10, zlim = c(min(unlist(covtruth)),max(unlist(covtruth))), main = "Gibbs sampling", colkey = FALSE)
{
set.seed(6)
p <- 12
#B <- bs(T, df = p, intercept = TRUE)
B <- ps(T, df = p, diff = 1, intercept = TRUE)
K <- 2
Xmat <- kronecker(B, X)
reg <- lm(c(Y) ~ Xmat - 1)
Theta_init <- t(matrix(reg$coefficients, nrow = 2))
#Theta_init <- Theta1
param <- cpp_EM(X, B, Y, K,Theta_init, 12)
cpploglik(Theta1, cbind(Lambda1,Lambda2), 1/noise_sd^2, X, Btru, Y, 2, 6)
#    n_500_high_noise_high_between[i] <- cpploglik(param$Theta, param$Lambda, param$Precision, X, B, Y, K,1)
max_iter <- 5000
burnin <- 1000
thin <- 1
nchain <- 1
Lambda_init <- array(param$Lambda, dim = c(p, 2, K))
Eta_init <- t(param$EtaM)
Prec_init <- param$Precision
bayes_param <- MCMC(Y, X, B, K, max_iter, nchain, thin, param$Theta, Lambda_init, Eta_init, Prec_init)
#bayes_logliks <- sapply(seq(from = 1, to = max_iter, by = 1), function(i) cpploglik(bayes_param$Theta[[1]][,,i], array(bayes_param$Lambda[[1,i]], dim = c(p,2*K)), bayes_param$Prec[[1]][i], X, B, Y, K, 6))
}
dev.off()
x <- c(1,-1)
bayes_mean <- matrix(0, nrow = p, ncol = 2)
for(i in 1:nchain){
bayes_mean <- bayes_mean + apply(bayes_param$Theta[[i]][,,burnin:max_iter], c(1,2), mean)
}
bayes_mean <- bayes_mean / nchain
plot(T,Btru%*%Theta1%*%x, type = "l", ylab = "Mean", xlab = "t")
lines(T,B%*%Theta_init%*%x,col="green")
lines(T,B%*%param$Theta%*%x, col = "blue")
lines(T,B%*%bayes_mean%*%x, col = "red")
for(chain in 1:nchain){
for(i in seq(from = burnin, to = max_iter, by = 10)){
lines(T,B%*%bayes_param$Theta[[chain]][,,i]%*%x, col = "gray")
}
}
lines(Btru%*%Theta1%*%x, type = "l",col="red")
sum((B%*%param$Theta%*%x - Btru%*%Theta1%*%x)^2)/sum((Btru%*%Theta1%*%x)^2)*100
sum((B%*%bayes_mean%*%x - Btru%*%Theta1%*%x)^2)/sum((Btru%*%Theta1%*%x)^2)*100
covfreq <- matrix(0, p, p)
for(k in 1:K){
covfreq <- covfreq + param$Lambda[,(d*(k-1)+1):(d*k)]%*%outer(x,x)%*%t(param$Lambda[,(d*(k-1)+1):(d*k)])
}
covfreq <- B%*%covfreq%*%t(B)
covbayes <- matrix(0, nrow = tmax, ncol = tmax)
for(chain in 1:nchain){
for(iter in burnin:max_iter){
for(a in 1:K){
covbayes <- covbayes + B%*%bayes_param$Lambda[[chain,iter]][,,a]%*%outer(x,x)%*%t(bayes_param$Lambda[[chain,iter]][,,a])%*%t(B)
}
}
}
covbayes <- covbayes / ((max_iter - burnin + 1) * nchain)
covtruth <- Btru%*%Lambda1%*%outer(x,x)%*%t(Lambda1)%*%t(Btru) + Btru%*%Lambda2%*%outer(x,x)%*%t(Lambda2)%*%t(Btru)
sum((covfreq - covtruth)^2)/sum((covtruth)^2)*100
sum((covbayes - covtruth)^2)/sum((covtruth^2))*100
par(mfrow = c(1,3))
persp3D(1:tmax,1:tmax, covtruth, theta=90,phi=10, main = "Truth", colkey = FALSE)
persp3D(1:tmax,1:tmax, covfreq, theta=90,phi=10, zlim = c(min(unlist(covtruth)),max(unlist(covtruth))), main = "EM algorithm", colkey = FALSE)
persp3D(1:tmax,1:tmax, covbayes, theta=90,phi=10, zlim = c(min(unlist(covtruth)),max(unlist(covtruth))), main = "Gibbs sampling", colkey = FALSE)
{
set.seed(7)
p <- 12
#B <- bs(T, df = p, intercept = TRUE)
B <- ps(T, df = p, diff = 1, intercept = TRUE)
K <- 2
Xmat <- kronecker(B, X)
reg <- lm(c(Y) ~ Xmat - 1)
Theta_init <- t(matrix(reg$coefficients, nrow = 2))
#Theta_init <- Theta1
param <- cpp_EM(X, B, Y, K,Theta_init, 12)
cpploglik(Theta1, cbind(Lambda1,Lambda2), 1/noise_sd^2, X, Btru, Y, 2, 6)
#    n_500_high_noise_high_between[i] <- cpploglik(param$Theta, param$Lambda, param$Precision, X, B, Y, K,1)
max_iter <- 5000
burnin <- 1000
thin <- 1
nchain <- 1
Lambda_init <- array(param$Lambda, dim = c(p, 2, K))
Eta_init <- t(param$EtaM)
Prec_init <- param$Precision
bayes_param <- MCMC(Y, X, B, K, max_iter, nchain, thin, param$Theta, Lambda_init, Eta_init, Prec_init)
#bayes_logliks <- sapply(seq(from = 1, to = max_iter, by = 1), function(i) cpploglik(bayes_param$Theta[[1]][,,i], array(bayes_param$Lambda[[1,i]], dim = c(p,2*K)), bayes_param$Prec[[1]][i], X, B, Y, K, 6))
}
dev.off()
x <- c(1,-1)
bayes_mean <- matrix(0, nrow = p, ncol = 2)
for(i in 1:nchain){
bayes_mean <- bayes_mean + apply(bayes_param$Theta[[i]][,,burnin:max_iter], c(1,2), mean)
}
bayes_mean <- bayes_mean / nchain
plot(T,Btru%*%Theta1%*%x, type = "l", ylab = "Mean", xlab = "t")
lines(T,B%*%Theta_init%*%x,col="green")
lines(T,B%*%param$Theta%*%x, col = "blue")
lines(T,B%*%bayes_mean%*%x, col = "red")
for(chain in 1:nchain){
for(i in seq(from = burnin, to = max_iter, by = 10)){
lines(T,B%*%bayes_param$Theta[[chain]][,,i]%*%x, col = "gray")
}
}
lines(Btru%*%Theta1%*%x, type = "l",col="red")
sum((B%*%param$Theta%*%x - Btru%*%Theta1%*%x)^2)/sum((Btru%*%Theta1%*%x)^2)*100
sum((B%*%bayes_mean%*%x - Btru%*%Theta1%*%x)^2)/sum((Btru%*%Theta1%*%x)^2)*100
{
set.seed(7)
p <- 12
#B <- bs(T, df = p, intercept = TRUE)
B <- ps(T, df = p, diff = 1, intercept = TRUE)
K <- 2
Xmat <- kronecker(B, X)
reg <- lm(c(Y) ~ Xmat - 1)
Theta_init <- t(matrix(reg$coefficients, nrow = 2))
Theta_init <- Theta1
param <- cpp_EM(X, B, Y, K,Theta_init, 12)
cpploglik(Theta1, cbind(Lambda1,Lambda2), 1/noise_sd^2, X, Btru, Y, 2, 6)
#    n_500_high_noise_high_between[i] <- cpploglik(param$Theta, param$Lambda, param$Precision, X, B, Y, K,1)
max_iter <- 5000
burnin <- 1000
thin <- 1
nchain <- 1
Lambda_init <- array(param$Lambda, dim = c(p, 2, K))
Eta_init <- t(param$EtaM)
Prec_init <- param$Precision
bayes_param <- MCMC(Y, X, B, K, max_iter, nchain, thin, param$Theta, Lambda_init, Eta_init, Prec_init)
#bayes_logliks <- sapply(seq(from = 1, to = max_iter, by = 1), function(i) cpploglik(bayes_param$Theta[[1]][,,i], array(bayes_param$Lambda[[1,i]], dim = c(p,2*K)), bayes_param$Prec[[1]][i], X, B, Y, K, 6))
}
dev.off()
x <- c(1,-1)
bayes_mean <- matrix(0, nrow = p, ncol = 2)
for(i in 1:nchain){
bayes_mean <- bayes_mean + apply(bayes_param$Theta[[i]][,,burnin:max_iter], c(1,2), mean)
}
bayes_mean <- bayes_mean / nchain
plot(T,Btru%*%Theta1%*%x, type = "l", ylab = "Mean", xlab = "t")
lines(T,B%*%Theta_init%*%x,col="green")
lines(T,B%*%param$Theta%*%x, col = "blue")
lines(T,B%*%bayes_mean%*%x, col = "red")
plot(T,Btru%*%Theta1%*%x, type = "l", ylab = "Mean", xlab = "t")
lines(T,B%*%Theta_init%*%x,col="green")
lines(T,B%*%param$Theta%*%x, col = "blue")
lines(T,B%*%bayes_mean%*%x, col = "red")
for(chain in 1:nchain){
for(i in seq(from = burnin, to = max_iter, by = 10)){
lines(T,B%*%bayes_param$Theta[[chain]][,,i]%*%x, col = "gray")
}
}
lines(Btru%*%Theta1%*%x, type = "l",col="red")
sum((B%*%param$Theta%*%x - Btru%*%Theta1%*%x)^2)/sum((Btru%*%Theta1%*%x)^2)*100
sum((B%*%bayes_mean%*%x - Btru%*%Theta1%*%x)^2)/sum((Btru%*%Theta1%*%x)^2)*100
covfreq <- matrix(0, p, p)
for(k in 1:K){
covfreq <- covfreq + param$Lambda[,(d*(k-1)+1):(d*k)]%*%outer(x,x)%*%t(param$Lambda[,(d*(k-1)+1):(d*k)])
}
covfreq <- B%*%covfreq%*%t(B)
covbayes <- matrix(0, nrow = tmax, ncol = tmax)
for(chain in 1:nchain){
for(iter in burnin:max_iter){
for(a in 1:K){
covbayes <- covbayes + B%*%bayes_param$Lambda[[chain,iter]][,,a]%*%outer(x,x)%*%t(bayes_param$Lambda[[chain,iter]][,,a])%*%t(B)
}
}
}
covbayes <- covbayes / ((max_iter - burnin + 1) * nchain)
covtruth <- Btru%*%Lambda1%*%outer(x,x)%*%t(Lambda1)%*%t(Btru) + Btru%*%Lambda2%*%outer(x,x)%*%t(Lambda2)%*%t(Btru)
sum((covfreq - covtruth)^2)/sum((covtruth)^2)*100
sum((covbayes - covtruth)^2)/sum((covtruth^2))*100
par(mfrow = c(1,3))
persp3D(1:tmax,1:tmax, covtruth, theta=90,phi=10, main = "Truth", colkey = FALSE)
persp3D(1:tmax,1:tmax, covfreq, theta=90,phi=10, zlim = c(min(unlist(covtruth)),max(unlist(covtruth))), main = "EM algorithm", colkey = FALSE)
persp3D(1:tmax,1:tmax, covbayes, theta=90,phi=10, zlim = c(min(unlist(covtruth)),max(unlist(covtruth))), main = "Gibbs sampling", colkey = FALSE)
{
set.seed(2)
n <- 500
tmax <- 50
p <- 12
T <- seq(from = 0, to = 1, length.out = tmax)
library(plot3D)
library(splines)
#Btru <- ps(T, df = p)
Btru <- bs(T, df = p, intercept = TRUE)
#X <- cbind(rep(1,n))
#X <- cbind(rep(1,n),runif(n,min=-1,max=1))
X <- cbind(rep(1,n), rnorm(n, sd = 1))
d <- dim(X)[2]
Eta1 <- rnorm(n)
Eta2 <- rnorm(n)
Y <- matrix(0, nrow = n, ncol = tmax)
#Lambda1 <- matrix(rnorm(p * dim(X)[2]), nrow = p, ncol = d)
#Lambda2 <- matrix(rnorm(p * dim(X)[2]), nrow = p, ncol = d)
#Lambda1 <- L1[,1]
#Lambda2 <- L2[,1]
Lambda1 <-  10*L1
Lambda2 <-  10*L2
#Theta1 <- Theta[,1]
Theta1 <- 1*Theta
#X <- as.matrix(X[,1])
#Lambda%*%t(Lambda)
#Theta <- matrix(rnorm(p * dim(X)[2]), nrow = p, ncol = dim(X)[2])
noise_sd <- .0001
E <- matrix(rnorm(tmax * n,sd=noise_sd), nrow = n, ncol = tmax)
Y <- X%*%t(Theta1)%*%t(Btru) + diag(Eta1)%*%X%*%t(Lambda1)%*%t(Btru) + E + diag(Eta2)%*%X%*%t(Lambda2)%*%t(Btru)# + E
inflation <- 5
Et1 <- matrix(rnorm(tmax * n, sd = inflation), nrow = n, ncol = tmax)
Yt <- Y + Et1
}
plot(Y[1,],type="p")
{
set.seed(7)
p <- 25
#B <- bs(T, df = p, intercept = TRUE)
B <- ps(T, df = p, diff = 1, intercept = TRUE)
K <- 2
Xmat <- kronecker(B, X)
reg <- lm(c(Y) ~ Xmat - 1)
Theta_init <- t(matrix(reg$coefficients, nrow = 2))
#Theta_init <- Theta1
param <- cpp_EM(X, B, Y, K,Theta_init, 12)
cpploglik(Theta1, cbind(Lambda1,Lambda2), 1/noise_sd^2, X, Btru, Y, 2, 6)
#    n_500_high_noise_high_between[i] <- cpploglik(param$Theta, param$Lambda, param$Precision, X, B, Y, K,1)
max_iter <- 5000
burnin <- 1000
thin <- 1
nchain <- 1
Lambda_init <- array(param$Lambda, dim = c(p, 2, K))
Eta_init <- t(param$EtaM)
Prec_init <- param$Precision
bayes_param <- MCMC(Y, X, B, K, max_iter, nchain, thin, param$Theta, Lambda_init, Eta_init, Prec_init)
#bayes_logliks <- sapply(seq(from = 1, to = max_iter, by = 1), function(i) cpploglik(bayes_param$Theta[[1]][,,i], array(bayes_param$Lambda[[1,i]], dim = c(p,2*K)), bayes_param$Prec[[1]][i], X, B, Y, K, 6))
}
dev.off()
x <- c(1,-1)
bayes_mean <- matrix(0, nrow = p, ncol = 2)
for(i in 1:nchain){
bayes_mean <- bayes_mean + apply(bayes_param$Theta[[i]][,,burnin:max_iter], c(1,2), mean)
}
bayes_mean <- bayes_mean / nchain
plot(T,Btru%*%Theta1%*%x, type = "l", ylab = "Mean", xlab = "t")
lines(T,B%*%Theta_init%*%x,col="green")
lines(T,B%*%param$Theta%*%x, col = "blue")
lines(T,B%*%bayes_mean%*%x, col = "red")
for(chain in 1:nchain){
for(i in seq(from = burnin, to = max_iter, by = 10)){
lines(T,B%*%bayes_param$Theta[[chain]][,,i]%*%x, col = "gray")
}
}
lines(Btru%*%Theta1%*%x, type = "l",col="red")
sum((B%*%param$Theta%*%x - Btru%*%Theta1%*%x)^2)/sum((Btru%*%Theta1%*%x)^2)*100
sum((B%*%bayes_mean%*%x - Btru%*%Theta1%*%x)^2)/sum((Btru%*%Theta1%*%x)^2)*100
covfreq <- matrix(0, p, p)
for(k in 1:K){
covfreq <- covfreq + param$Lambda[,(d*(k-1)+1):(d*k)]%*%outer(x,x)%*%t(param$Lambda[,(d*(k-1)+1):(d*k)])
}
covfreq <- B%*%covfreq%*%t(B)
covbayes <- matrix(0, nrow = tmax, ncol = tmax)
for(chain in 1:nchain){
for(iter in burnin:max_iter){
for(a in 1:K){
covbayes <- covbayes + B%*%bayes_param$Lambda[[chain,iter]][,,a]%*%outer(x,x)%*%t(bayes_param$Lambda[[chain,iter]][,,a])%*%t(B)
}
}
}
covbayes <- covbayes / ((max_iter - burnin + 1) * nchain)
covtruth <- Btru%*%Lambda1%*%outer(x,x)%*%t(Lambda1)%*%t(Btru) + Btru%*%Lambda2%*%outer(x,x)%*%t(Lambda2)%*%t(Btru)
sum((covfreq - covtruth)^2)/sum((covtruth)^2)*100
sum((covbayes - covtruth)^2)/sum((covtruth^2))*100
par(mfrow = c(1,3))
persp3D(1:tmax,1:tmax, covtruth, theta=90,phi=10, main = "Truth", colkey = FALSE)
persp3D(1:tmax,1:tmax, covfreq, theta=90,phi=10, zlim = c(min(unlist(covtruth)),max(unlist(covtruth))), main = "EM algorithm", colkey = FALSE)
persp3D(1:tmax,1:tmax, covbayes, theta=90,phi=10, zlim = c(min(unlist(covtruth)),max(unlist(covtruth))), main = "Gibbs sampling", colkey = FALSE)
{
set.seed(8)
p <- 25
#B <- bs(T, df = p, intercept = TRUE)
B <- ps(T, df = p, diff = 1, intercept = TRUE)
K <- 2
Xmat <- kronecker(B, X)
reg <- lm(c(Y) ~ Xmat - 1)
Theta_init <- t(matrix(reg$coefficients, nrow = 2))
#Theta_init <- Theta1
param <- cpp_EM(X, B, Y, K,Theta_init, 12)
cpploglik(Theta1, cbind(Lambda1,Lambda2), 1/noise_sd^2, X, Btru, Y, 2, 6)
#    n_500_high_noise_high_between[i] <- cpploglik(param$Theta, param$Lambda, param$Precision, X, B, Y, K,1)
max_iter <- 5000
burnin <- 1000
thin <- 1
nchain <- 1
Lambda_init <- array(param$Lambda, dim = c(p, 2, K))
Eta_init <- t(param$EtaM)
Prec_init <- param$Precision
bayes_param <- MCMC(Y, X, B, K, max_iter, nchain, thin, param$Theta, Lambda_init, Eta_init, Prec_init)
#bayes_logliks <- sapply(seq(from = 1, to = max_iter, by = 1), function(i) cpploglik(bayes_param$Theta[[1]][,,i], array(bayes_param$Lambda[[1,i]], dim = c(p,2*K)), bayes_param$Prec[[1]][i], X, B, Y, K, 6))
}
dev.off()
x <- c(1,-1)
bayes_mean <- matrix(0, nrow = p, ncol = 2)
for(i in 1:nchain){
bayes_mean <- bayes_mean + apply(bayes_param$Theta[[i]][,,burnin:max_iter], c(1,2), mean)
}
bayes_mean <- bayes_mean / nchain
plot(T,Btru%*%Theta1%*%x, type = "l", ylab = "Mean", xlab = "t")
lines(T,B%*%Theta_init%*%x,col="green")
lines(T,B%*%param$Theta%*%x, col = "blue")
lines(T,B%*%bayes_mean%*%x, col = "red")
for(chain in 1:nchain){
for(i in seq(from = burnin, to = max_iter, by = 10)){
lines(T,B%*%bayes_param$Theta[[chain]][,,i]%*%x, col = "gray")
}
}
lines(Btru%*%Theta1%*%x, type = "l",col="red")
sum((B%*%param$Theta%*%x - Btru%*%Theta1%*%x)^2)/sum((Btru%*%Theta1%*%x)^2)*100
sum((B%*%bayes_mean%*%x - Btru%*%Theta1%*%x)^2)/sum((Btru%*%Theta1%*%x)^2)*100
covfreq <- matrix(0, p, p)
for(k in 1:K){
covfreq <- covfreq + param$Lambda[,(d*(k-1)+1):(d*k)]%*%outer(x,x)%*%t(param$Lambda[,(d*(k-1)+1):(d*k)])
}
covfreq <- B%*%covfreq%*%t(B)
covbayes <- matrix(0, nrow = tmax, ncol = tmax)
for(chain in 1:nchain){
for(iter in burnin:max_iter){
for(a in 1:K){
covbayes <- covbayes + B%*%bayes_param$Lambda[[chain,iter]][,,a]%*%outer(x,x)%*%t(bayes_param$Lambda[[chain,iter]][,,a])%*%t(B)
}
}
}
covbayes <- covbayes / ((max_iter - burnin + 1) * nchain)
covtruth <- Btru%*%Lambda1%*%outer(x,x)%*%t(Lambda1)%*%t(Btru) + Btru%*%Lambda2%*%outer(x,x)%*%t(Lambda2)%*%t(Btru)
sum((covfreq - covtruth)^2)/sum((covtruth)^2)*100
sum((covbayes - covtruth)^2)/sum((covtruth^2))*100
par(mfrow = c(1,3))
persp3D(1:tmax,1:tmax, covtruth, theta=90,phi=10, main = "Truth", colkey = FALSE)
persp3D(1:tmax,1:tmax, covfreq, theta=90,phi=10, zlim = c(min(unlist(covtruth)),max(unlist(covtruth))), main = "EM algorithm", colkey = FALSE)
persp3D(1:tmax,1:tmax, covbayes, theta=90,phi=10, zlim = c(min(unlist(covtruth)),max(unlist(covtruth))), main = "Gibbs sampling", colkey = FALSE)
{
set.seed(2)
n <- 500
tmax <- 50
p <- 12
T <- seq(from = 0, to = 1, length.out = tmax)
library(plot3D)
library(splines)
#Btru <- ps(T, df = p)
Btru <- bs(T, df = p, intercept = TRUE)
#X <- cbind(rep(1,n))
#X <- cbind(rep(1,n),runif(n,min=-1,max=1))
X <- cbind(rep(1,n), rnorm(n, sd = 1))
d <- dim(X)[2]
Eta1 <- rnorm(n)
Eta2 <- rnorm(n)
Y <- matrix(0, nrow = n, ncol = tmax)
#Lambda1 <- matrix(rnorm(p * dim(X)[2]), nrow = p, ncol = d)
#Lambda2 <- matrix(rnorm(p * dim(X)[2]), nrow = p, ncol = d)
#Lambda1 <- L1[,1]
#Lambda2 <- L2[,1]
Lambda1 <-  10*L1
Lambda2 <-  10*L2
#Theta1 <- Theta[,1]
Theta1 <- 1*Theta
#X <- as.matrix(X[,1])
#Lambda%*%t(Lambda)
#Theta <- matrix(rnorm(p * dim(X)[2]), nrow = p, ncol = dim(X)[2])
noise_sd <- .1
E <- matrix(rnorm(tmax * n,sd=noise_sd), nrow = n, ncol = tmax)
Y <- X%*%t(Theta1)%*%t(Btru) + diag(Eta1)%*%X%*%t(Lambda1)%*%t(Btru) + E + diag(Eta2)%*%X%*%t(Lambda2)%*%t(Btru)# + E
inflation <- 5
Et1 <- matrix(rnorm(tmax * n, sd = inflation), nrow = n, ncol = tmax)
Yt <- Y + Et1
}
{
set.seed(8)
p <- 25
#B <- bs(T, df = p, intercept = TRUE)
B <- ps(T, df = p, diff = 1, intercept = TRUE)
K <- 2
Xmat <- kronecker(B, X)
reg <- lm(c(Y) ~ Xmat - 1)
Theta_init <- t(matrix(reg$coefficients, nrow = 2))
#Theta_init <- Theta1
param <- cpp_EM(X, B, Y, K,Theta_init, 12)
cpploglik(Theta1, cbind(Lambda1,Lambda2), 1/noise_sd^2, X, Btru, Y, 2, 6)
#    n_500_high_noise_high_between[i] <- cpploglik(param$Theta, param$Lambda, param$Precision, X, B, Y, K,1)
max_iter <- 5000
burnin <- 1000
thin <- 1
nchain <- 1
Lambda_init <- array(param$Lambda, dim = c(p, 2, K))
Eta_init <- t(param$EtaM)
Prec_init <- param$Precision
bayes_param <- MCMC(Y, X, B, K, max_iter, nchain, thin, param$Theta, Lambda_init, Eta_init, Prec_init)
#bayes_logliks <- sapply(seq(from = 1, to = max_iter, by = 1), function(i) cpploglik(bayes_param$Theta[[1]][,,i], array(bayes_param$Lambda[[1,i]], dim = c(p,2*K)), bayes_param$Prec[[1]][i], X, B, Y, K, 6))
}
dev.off()
x <- c(1,-1)
bayes_mean <- matrix(0, nrow = p, ncol = 2)
for(i in 1:nchain){
bayes_mean <- bayes_mean + apply(bayes_param$Theta[[i]][,,burnin:max_iter], c(1,2), mean)
}
bayes_mean <- bayes_mean / nchain
plot(T,Btru%*%Theta1%*%x, type = "l", ylab = "Mean", xlab = "t")
lines(T,B%*%Theta_init%*%x,col="green")
lines(T,B%*%param$Theta%*%x, col = "blue")
lines(T,B%*%bayes_mean%*%x, col = "red")
for(chain in 1:nchain){
for(i in seq(from = burnin, to = max_iter, by = 10)){
lines(T,B%*%bayes_param$Theta[[chain]][,,i]%*%x, col = "gray")
}
}
sum((B%*%param$Theta%*%x - Btru%*%Theta1%*%x)^2)/sum((Btru%*%Theta1%*%x)^2)*100
sum((B%*%bayes_mean%*%x - Btru%*%Theta1%*%x)^2)/sum((Btru%*%Theta1%*%x)^2)*100
{
set.seed(1)
p <- 25
#B <- bs(T, df = p, intercept = TRUE)
B <- ps(T, df = p, diff = 1, intercept = TRUE)
K <- 2
Xmat <- kronecker(B, X)
reg <- lm(c(Y) ~ Xmat - 1)
Theta_init <- t(matrix(reg$coefficients, nrow = 2))
#Theta_init <- Theta1
param <- cpp_EM(X, B, Y, K,Theta_init, 12)
cpploglik(Theta1, cbind(Lambda1,Lambda2), 1/noise_sd^2, X, Btru, Y, 2, 6)
#    n_500_high_noise_high_between[i] <- cpploglik(param$Theta, param$Lambda, param$Precision, X, B, Y, K,1)
max_iter <- 5000
burnin <- 1000
thin <- 1
nchain <- 1
Lambda_init <- array(param$Lambda, dim = c(p, 2, K))
Eta_init <- t(param$EtaM)
Prec_init <- param$Precision
bayes_param <- MCMC(Y, X, B, K, max_iter, nchain, thin, param$Theta, Lambda_init, Eta_init, Prec_init)
#bayes_logliks <- sapply(seq(from = 1, to = max_iter, by = 1), function(i) cpploglik(bayes_param$Theta[[1]][,,i], array(bayes_param$Lambda[[1,i]], dim = c(p,2*K)), bayes_param$Prec[[1]][i], X, B, Y, K, 6))
}
sample(c(0,1))
sample(c(0,1),1)
sample(c(0,1),1)
