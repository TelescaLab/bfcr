eig_names <- c(eig_names, paste("Eigenfunction", k))
eig_labs <- c(eig_labs, paste("Eigenfunction", k, " ", round(eigen_bands$eigenval_pve_intervals[1,k], 2), "-", round(eigen_bands$eigenval_pve_intervals[3,k], 2)))
}
names(eig_labs) <- eig_names
eigen_bands_tibble <- tibble(Time = rep(t, evals),
number = factor(rep(eig_names, each = length(t))),
lower = c(eigen_bands$lower),
mean = c(eigen_bands$mean),
upper = c(eigen_bands$upper),
val_lower = rep(eigen_bands$eigenval_intervals[1,], each = length(t)),
val_median = rep(eigen_bands$eigenval_intervals[2,], each = length(t)),
val_upper = rep(eigen_bands$eigenval_intervals[3,], each = length(t)))
eigen_bands$eigenval_intervals
xi <- c(1, 1)
eigen_bands <- get_posterior_eigen(mcmc_results, evals, xi, alpha)
eigen_bands$eigenval_intervals
### Some covariance visualization ###
evals <- 6
xi <- c(1, 1)
alpha <- .05
eigen_bands <- get_posterior_eigen(mcmc_results, evals, xi, alpha)
eig_names <- c()
eig_labs <- c()
for(k in 1:evals){
eig_names <- c(eig_names, paste("Eigenfunction", k))
eig_labs <- c(eig_labs, paste("Eigenfunction", k, " ", round(eigen_bands$eigenval_pve_intervals[1,k], 2), "-", round(eigen_bands$eigenval_pve_intervals[3,k], 2)))
}
names(eig_labs) <- eig_names
eigen_bands_tibble <- tibble(Time = rep(t, evals),
number = factor(rep(eig_names, each = length(t))),
lower = c(eigen_bands$lower),
mean = c(eigen_bands$mean),
upper = c(eigen_bands$upper),
val_lower = rep(eigen_bands$eigenval_intervals[1,], each = length(t)),
val_median = rep(eigen_bands$eigenval_intervals[2,], each = length(t)),
val_upper = rep(eigen_bands$eigenval_intervals[3,], each = length(t)))
eigen_bands_tibble %>%
ggplot(aes(x = Time)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = number), alpha = 0.5) +
facet_wrap(number ~., labeller = labeller(number = eig_labs)) +
theme_bw() +
theme(legend.position="none")
### Some covariance visualization ###
evals <- 10
xi <- c(1, 1)
alpha <- .05
eigen_bands <- get_posterior_eigen(mcmc_results, evals, xi, alpha)
eig_names <- c()
eig_labs <- c()
for(k in 1:evals){
eig_names <- c(eig_names, paste("Eigenfunction", k))
eig_labs <- c(eig_labs, paste("Eigenfunction", k, " ", round(eigen_bands$eigenval_pve_intervals[1,k], 2), "-", round(eigen_bands$eigenval_pve_intervals[3,k], 2)))
}
names(eig_labs) <- eig_names
eigen_bands_tibble <- tibble(Time = rep(t, evals),
number = factor(rep(eig_names, each = length(t))),
lower = c(eigen_bands$lower),
mean = c(eigen_bands$mean),
upper = c(eigen_bands$upper),
val_lower = rep(eigen_bands$eigenval_intervals[1,], each = length(t)),
val_median = rep(eigen_bands$eigenval_intervals[2,], each = length(t)),
val_upper = rep(eigen_bands$eigenval_intervals[3,], each = length(t)))
eigen_bands_tibble %>%
ggplot(aes(x = Time)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = number), alpha = 0.5) +
facet_wrap(number ~., labeller = labeller(number = eig_labs)) +
theme_bw() +
theme(legend.position="none")
### Some covariance visualization ###
evals <- 12
xi <- c(1, 1)
alpha <- .05
eigen_bands <- get_posterior_eigen(mcmc_results, evals, xi, alpha)
eig_names <- c()
eig_labs <- c()
for(k in 1:evals){
eig_names <- c(eig_names, paste("Eigenfunction", k))
eig_labs <- c(eig_labs, paste("Eigenfunction", k, " ", round(eigen_bands$eigenval_pve_intervals[1,k], 2), "-", round(eigen_bands$eigenval_pve_intervals[3,k], 2)))
}
names(eig_labs) <- eig_names
eigen_bands_tibble <- tibble(Time = rep(t, evals),
number = factor(rep(eig_names, each = length(t))),
lower = c(eigen_bands$lower),
mean = c(eigen_bands$mean),
upper = c(eigen_bands$upper),
val_lower = rep(eigen_bands$eigenval_intervals[1,], each = length(t)),
val_median = rep(eigen_bands$eigenval_intervals[2,], each = length(t)),
val_upper = rep(eigen_bands$eigenval_intervals[3,], each = length(t)))
eigen_bands_tibble %>%
ggplot(aes(x = Time)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = number), alpha = 0.5) +
facet_wrap(number ~., labeller = labeller(number = eig_labs)) +
theme_bw() +
theme(legend.position="none")
### Some covariance visualization ###
evals <- 6
xi <- c(1, 1)
alpha <- .05
eigen_bands <- get_posterior_eigen(mcmc_results, evals, xi, alpha)
eig_names <- c()
eig_labs <- c()
for(k in 1:evals){
eig_names <- c(eig_names, paste("Eigenfunction", k))
eig_labs <- c(eig_labs, paste("Eigenfunction", k, " ", round(eigen_bands$eigenval_pve_intervals[1,k], 2), "-", round(eigen_bands$eigenval_pve_intervals[3,k], 2)))
}
names(eig_labs) <- eig_names
eigen_bands_tibble <- tibble(Time = rep(t, evals),
number = factor(rep(eig_names, each = length(t))),
lower = c(eigen_bands$lower),
mean = c(eigen_bands$mean),
upper = c(eigen_bands$upper),
val_lower = rep(eigen_bands$eigenval_intervals[1,], each = length(t)),
val_median = rep(eigen_bands$eigenval_intervals[2,], each = length(t)),
val_upper = rep(eigen_bands$eigenval_intervals[3,], each = length(t)))
eigen_bands_tibble %>%
ggplot(aes(x = Time)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = number), alpha = 0.5) +
facet_wrap(number ~., labeller = labeller(number = eig_labs)) +
theme_bw() +
theme(legend.position="none")
library(BayesianConditionalFPCA)
eigen_bands <- get_posterior_eigen(mcmc_results, evals, xi, alpha)
eigen_bands$magnitude
xi <- c(1, 0)
alpha <- .05
eigen_bands <- get_posterior_eigen(mcmc_results, evals, xi, alpha)
eigen_bands$magnitude
xi <- c(1, .2)
alpha <- .05
eigen_bands <- get_posterior_eigen(mcmc_results, evals, xi, alpha)
eigen_bands$magnitude
xi <- c(1, .4)
alpha <- .05
eigen_bands <- get_posterior_eigen(mcmc_results, evals, xi, alpha)
eigen_bands$magnitude
xi <- c(1, 1)
alpha <- .05
eigen_bands <- get_posterior_eigen(mcmc_results, evals, xi, alpha)
eigen_bands$magnitude
max(X[,2])
which.max(X[,2])
truecov <- matrix(0, nrow = tmax, ncol = tmax)
truecov <- Btru %*% Lambda1 %*% outer(X[58,], X[58,]) %*% t(Lambda1) %*% t(Btru) +
Btru %*% Lambda2 %*% outer(X[58,], X[58,]) %*% t(Lambda2) %*% t(Btru)
sum(eigen(truecov))
sum(eigen(truecov)$values)
plotly::plot_ly(x = t, y = t, z = eigen_bands$surface, type = "surface") %>%
plotly::layout(scene = list(xaxis = aX, yaxis = aY, zaxis = aZ, dragmode = "turntable"))
library(MASS)
library(splines)
library(mvtnorm)
library(plot3D)
library(splines)
library(Rcpp)
library(microbenchmark)
library(dlnm)
library(BayesianConditionalFPCA)
library(rstan)
library(loo)
library(tidyverse)
library(pracma)
library(expm)
setwd("E:/Rcpp stuff/BayesianConditionalFPCA/Rfuns")
source('simulated_data.r')
### MCMC sanity check ###
K <- 2
mcmc_results <- run_mcmc(Y, t, X, Btru, K, iter = 5000, burnin = 2500, nchains = 1, thin = 1, loglik = 0)
xi <- c(1, 0)
alpha <- .05
eigen_bands <- get_posterior_eigen(mcmc_results, evals, xi, alpha)
eig_names <- c()
eig_labs <- c()
### Some covariance visualization ###
evals <- 2
xi <- c(1, 0)
alpha <- .05
eigen_bands <- get_posterior_eigen(mcmc_results, evals, xi, alpha)
eig_names <- c()
eig_labs <- c()
for(k in 1:evals){
eig_names <- c(eig_names, paste("Eigenfunction", k))
eig_labs <- c(eig_labs, paste("Eigenfunction", k, " ", round(eigen_bands$eigenval_pve_intervals[1,k], 2), "-", round(eigen_bands$eigenval_pve_intervals[3,k], 2)))
}
names(eig_labs) <- eig_names
eigen_bands_tibble <- tibble(Time = rep(t, evals),
number = factor(rep(eig_names, each = length(t))),
lower = c(eigen_bands$lower),
mean = c(eigen_bands$mean),
upper = c(eigen_bands$upper),
val_lower = rep(eigen_bands$eigenval_intervals[1,], each = length(t)),
val_median = rep(eigen_bands$eigenval_intervals[2,], each = length(t)),
val_upper = rep(eigen_bands$eigenval_intervals[3,], each = length(t)))
eigen_bands_tibble %>%
ggplot(aes(x = Time)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = number), alpha = 0.5) +
facet_wrap(number ~., labeller = labeller(number = eig_labs)) +
theme_bw() +
theme(legend.position="none")
mcmc_results <- run_mcmc(Y[1:50,], t, X[1:50,], Btru, K, iter = 5000, burnin = 2500, nchains = 1, thin = 1, loglik = 0)
mcmc_results <- run_mcmc(Y[1:50,], t, X[1:50,1], Btru, K, iter = 5000, burnin = 2500, nchains = 1, thin = 1, loglik = 0)
mcmc_results <- run_mcmc(Y[1:50,], t, Intercept_only[1:50], Btru, K, iter = 5000, burnin = 2500, nchains = 1, thin = 1, loglik = 0)
mcmc_results <- run_mcmc(Y[1:50,], t, cbind(Intercept_only[1:50]), Btru, K, iter = 5000, burnin = 2500, nchains = 1, thin = 1, loglik = 0)
eigen_bands <- get_posterior_eigen(mcmc_results, evals, xi, alpha)
xi <- c(1)
eigen_bands <- get_posterior_eigen(mcmc_results, evals, xi, alpha)
eig_names <- c()
eig_labs <- c()
for(k in 1:evals){
eig_names <- c(eig_names, paste("Eigenfunction", k))
eig_labs <- c(eig_labs, paste("Eigenfunction", k, " ", round(eigen_bands$eigenval_pve_intervals[1,k], 2), "-", round(eigen_bands$eigenval_pve_intervals[3,k], 2)))
}
names(eig_labs) <- eig_names
eigen_bands_tibble <- tibble(Time = rep(t, evals),
number = factor(rep(eig_names, each = length(t))),
lower = c(eigen_bands$lower),
mean = c(eigen_bands$mean),
upper = c(eigen_bands$upper),
val_lower = rep(eigen_bands$eigenval_intervals[1,], each = length(t)),
val_median = rep(eigen_bands$eigenval_intervals[2,], each = length(t)),
val_upper = rep(eigen_bands$eigenval_intervals[3,], each = length(t)))
eigen_bands_tibble %>%
ggplot(aes(x = Time)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = number), alpha = 0.5) +
facet_wrap(number ~., labeller = labeller(number = eig_labs)) +
theme_bw() +
theme(legend.position="none")
mcmc_results <- run_mcmc(Y[1:50,], t, cbind(Intercept_only[1:50]), Btru, K, iter = 10000, burnin = 2500, nchains = 1, thin = 1, loglik = 0)
### Some covariance visualization ###
evals <- 2
xi <- c(1)
alpha <- .05
eigen_bands <- get_posterior_eigen(mcmc_results, evals, xi, alpha)
eig_names <- c()
eig_labs <- c()
for(k in 1:evals){
eig_names <- c(eig_names, paste("Eigenfunction", k))
eig_labs <- c(eig_labs, paste("Eigenfunction", k, " ", round(eigen_bands$eigenval_pve_intervals[1,k], 2), "-", round(eigen_bands$eigenval_pve_intervals[3,k], 2)))
}
names(eig_labs) <- eig_names
eigen_bands_tibble <- tibble(Time = rep(t, evals),
number = factor(rep(eig_names, each = length(t))),
lower = c(eigen_bands$lower),
mean = c(eigen_bands$mean),
upper = c(eigen_bands$upper),
val_lower = rep(eigen_bands$eigenval_intervals[1,], each = length(t)),
val_median = rep(eigen_bands$eigenval_intervals[2,], each = length(t)),
val_upper = rep(eigen_bands$eigenval_intervals[3,], each = length(t)))
eigen_bands_tibble %>%
ggplot(aes(x = Time)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = number), alpha = 0.5) +
facet_wrap(number ~., labeller = labeller(number = eig_labs)) +
theme_bw() +
theme(legend.position="none")
mcmc_results <- run_mcmc(Y, t, X, Btru, K, iter = 10000, burnin = 2500, nchains = 1, thin = 1, loglik = 0)
### Some covariance visualization ###
evals <- 2
xi <- c(1, 0)
alpha <- .05
eigen_bands <- get_posterior_eigen(mcmc_results, evals, xi, alpha)
eig_names <- c()
eig_labs <- c()
for(k in 1:evals){
eig_names <- c(eig_names, paste("Eigenfunction", k))
eig_labs <- c(eig_labs, paste("Eigenfunction", k, " ", round(eigen_bands$eigenval_pve_intervals[1,k], 2), "-", round(eigen_bands$eigenval_pve_intervals[3,k], 2)))
}
names(eig_labs) <- eig_names
eigen_bands_tibble <- tibble(Time = rep(t, evals),
number = factor(rep(eig_names, each = length(t))),
lower = c(eigen_bands$lower),
mean = c(eigen_bands$mean),
upper = c(eigen_bands$upper),
val_lower = rep(eigen_bands$eigenval_intervals[1,], each = length(t)),
val_median = rep(eigen_bands$eigenval_intervals[2,], each = length(t)),
val_upper = rep(eigen_bands$eigenval_intervals[3,], each = length(t)))
eigen_bands_tibble %>%
ggplot(aes(x = Time)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = number), alpha = 0.5) +
facet_wrap(number ~., labeller = labeller(number = eig_labs)) +
theme_bw() +
theme(legend.position="none")
plotly::plot_ly(x = t, y = t, z = eigen_bands$surface, type = "surface") %>%
plotly::layout(scene = list(xaxis = aX, yaxis = aY, zaxis = aZ, dragmode = "turntable"))
aX <- list(title = "Time")
aY <- list(title = "Time")
aZ <- list(title = "Response")
plotly::plot_ly(x = t, y = t, z = eigen_bands$surface, type = "surface") %>%
plotly::layout(scene = list(xaxis = aX, yaxis = aY, zaxis = aZ, dragmode = "turntable"))
mcmc_results <- run_mcmc(Y[1:50,], t, cbind(Intercept_only[1:50]), Btru, K, iter = 10000, burnin = 2500, nchains = 1, thin = 1, loglik = 0)
### Some covariance visualization ###
evals <- 2
xi <- c(1)
alpha <- .05
eig_names <- c()
eigen_bands <- get_posterior_eigen(mcmc_results, evals, xi, alpha)
eig_labs <- c()
for(k in 1:evals){
eig_names <- c(eig_names, paste("Eigenfunction", k))
eig_labs <- c(eig_labs, paste("Eigenfunction", k, " ", round(eigen_bands$eigenval_pve_intervals[1,k], 2), "-", round(eigen_bands$eigenval_pve_intervals[3,k], 2)))
}
names(eig_labs) <- eig_names
eigen_bands_tibble <- tibble(Time = rep(t, evals),
number = factor(rep(eig_names, each = length(t))),
lower = c(eigen_bands$lower),
mean = c(eigen_bands$mean),
upper = c(eigen_bands$upper),
val_lower = rep(eigen_bands$eigenval_intervals[1,], each = length(t)),
val_median = rep(eigen_bands$eigenval_intervals[2,], each = length(t)),
val_upper = rep(eigen_bands$eigenval_intervals[3,], each = length(t)))
eigen_bands_tibble %>%
ggplot(aes(x = Time)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = number), alpha = 0.5) +
facet_wrap(number ~., labeller = labeller(number = eig_labs)) +
theme_bw() +
theme(legend.position="none")
aX <- list(title = "Time")
aY <- list(title = "Time")
aZ <- list(title = "Response")
plotly::plot_ly(x = t, y = t, z = eigen_bands$surface, type = "surface") %>%
plotly::layout(scene = list(xaxis = aX, yaxis = aY, zaxis = aZ, dragmode = "turntable"))
truecov <- matrix(0, nrow = tmax, ncol = tmax)
truecov <- Btru %*% Lambda1 %*% outer(X[1,], X[1,]) %*% t(Lambda1) %*% t(Btru) +
Btru %*% Lambda2 %*% outer(X[1,], X[1,]) %*% t(Lambda2) %*% t(Btru)
trapz1true <- trapz(t, eigen(truecov)$vectors[,1]^2)
trapz2true <- trapz(t, eigen(truecov)$vectors[,2]^2)
v1 <- 1/sqrt(trapz1true) * eigen(truecov)$vectors[,1]
v2 <- 1/sqrt(trapz2true) * eigen(truecov)$vectors[,2]
trapz(t, (eigen_bands$mean[,1] - v1)^2)
trapz(t, (eigen_bands$mean[,1] + v1)^2)
mcmc_results <- run_mcmc(Y, t, X, Btru, K, iter = 10000, burnin = 2500, nchains = 1, thin = 1, loglik = 0)
xi <- c(1, 0)
alpha <- .05
eigen_bands <- get_posterior_eigen(mcmc_results, evals, xi, alpha)
eig_names <- c()
eig_labs <- c()
for(k in 1:evals){
eig_names <- c(eig_names, paste("Eigenfunction", k))
eig_labs <- c(eig_labs, paste("Eigenfunction", k, " ", round(eigen_bands$eigenval_pve_intervals[1,k], 2), "-", round(eigen_bands$eigenval_pve_intervals[3,k], 2)))
}
names(eig_labs) <- eig_names
eigen_bands_tibble <- tibble(Time = rep(t, evals),
number = factor(rep(eig_names, each = length(t))),
lower = c(eigen_bands$lower),
mean = c(eigen_bands$mean),
upper = c(eigen_bands$upper),
val_lower = rep(eigen_bands$eigenval_intervals[1,], each = length(t)),
val_median = rep(eigen_bands$eigenval_intervals[2,], each = length(t)),
val_upper = rep(eigen_bands$eigenval_intervals[3,], each = length(t)))
eigen_bands_tibble %>%
ggplot(aes(x = Time)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = number), alpha = 0.5) +
facet_wrap(number ~., labeller = labeller(number = eig_labs)) +
theme_bw() +
theme(legend.position="none")
trapz(t, (eigen_bands$mean[,1] + v1)^2)
trapz(t, (eigen_bands$mean[,1] - v1)^2)
trapz(t, (eigen_bands$mean[,2] - v2)^2)
trapz(t, (eigen_bands$mean[,2] + v2)^2)
n
mcmc_results <- run_mcmc(Y[1:50,], t, cbind(Intercept_only), Btru, K, iter = 10000, burnin = 2500, nchains = 1, thin = 1, loglik = 0)
mcmc_results <- run_mcmc(Y[1:50,], t, cbind(Intercept_only[1:50]), Btru, K, iter = 10000, burnin = 2500, nchains = 1, thin = 1, loglik = 0)
### Some covariance visualization ###
evals <- 2
xi <- c(1)
alpha <- .05
eigen_bands <- get_posterior_eigen(mcmc_results, evals, xi, alpha)
trapz(t, (eigen_bands$mean[,1] - v1)^2)
trapz(t, (eigen_bands$mean[,2] + v2)^2)
X
source('simulated_data.r')
mcmc_results <- run_mcmc(Y[1:150,], t, cbind(Intercept_only[1:150]), Btru, K, iter = 10000, burnin = 2500, nchains = 1, thin = 1, loglik = 0)
eigen_bands <- get_posterior_eigen(mcmc_results, evals, xi, alpha)
trapz(t, (eigen_bands$mean[,1] - v1)^2)
trapz(t, (eigen_bands$mean[,2] + v2)^2)
mcmc_results <- run_mcmc(Y, t, X, Btru, K, iter = 10000, burnin = 2500, nchains = 1, thin = 1, loglik = 0)
xi <- c(1, 0)
eigen_bands <- get_posterior_eigen(mcmc_results, evals, xi, alpha)
v1 <- 1/sqrt(trapz1true) * eigen(truecov)$vectors[,1]
v2 <- 1/sqrt(trapz2true) * eigen(truecov)$vectors[,2]
trapz(t, (eigen_bands$mean[,1] - v1)^2)
trapz(t, (eigen_bands$mean[,2] + v2)^2)
trapz(t, (eigen_bands$mean[,2] - v2)^2)
### MCMC sanity check ###
K <- 5
mcmc_results <- run_mcmc(Y, t, X, Btru, K, iter = 10000, burnin = 2500, nchains = 1, thin = 1, loglik = 0)
eigen_bands <- get_posterior_eigen(mcmc_results, evals, xi, alpha)
trapz(t, (eigen_bands$mean[,1] - v1)^2)
trapz(t, (eigen_bands$mean[,2] - v2)^2)
trapz(t, (eigen_bands$mean[,2] + v2)^2)
eigen_bands_tibble %>%
ggplot(aes(x = Time)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = number), alpha = 0.5) +
facet_wrap(number ~., labeller = labeller(number = eig_labs)) +
theme_bw() +
theme(legend.position="none")
eig_names <- c()
eig_labs <- c()
for(k in 1:evals){
eig_names <- c(eig_names, paste("Eigenfunction", k))
eig_labs <- c(eig_labs, paste("Eigenfunction", k, " ", round(eigen_bands$eigenval_pve_intervals[1,k], 2), "-", round(eigen_bands$eigenval_pve_intervals[3,k], 2)))
}
names(eig_labs) <- eig_names
eigen_bands_tibble <- tibble(Time = rep(t, evals),
number = factor(rep(eig_names, each = length(t))),
lower = c(eigen_bands$lower),
mean = c(eigen_bands$mean),
upper = c(eigen_bands$upper),
val_lower = rep(eigen_bands$eigenval_intervals[1,], each = length(t)),
val_median = rep(eigen_bands$eigenval_intervals[2,], each = length(t)),
val_upper = rep(eigen_bands$eigenval_intervals[3,], each = length(t)))
eigen_bands_tibble %>%
ggplot(aes(x = Time)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = number), alpha = 0.5) +
facet_wrap(number ~., labeller = labeller(number = eig_labs)) +
theme_bw() +
theme(legend.position="none")
### Posterior mean bands ###
xi <- c(1, 0)
alpha <- .05
coef_bands <- get_posterior_means(mcmc_results, xi, alpha)
coef_bands <- cbind(t, coef_bands)
colnames(coef_bands) <- c("Time", "Lower", "Mean", "Upper")
coef_bands <- as_tibble(coef_bands)
coef_bands %>%
ggplot(aes(x = Time)) +
geom_ribbon(aes(ymin = Lower, ymax = Upper), alpha = 0.3, fill = "blue") +
geom_line(aes(y = Mean)) +
xlab("Time") +
ylab("Response") +
ggtitle("Conditional mean bands") +
theme_bw()
### Posterior mean bands ###
xi <- c(1, 1)
alpha <- .05
coef_bands <- get_posterior_means(mcmc_results, xi, alpha)
coef_bands <- cbind(t, coef_bands)
colnames(coef_bands) <- c("Time", "Lower", "Mean", "Upper")
coef_bands <- as_tibble(coef_bands)
coef_bands %>%
ggplot(aes(x = Time)) +
geom_ribbon(aes(ymin = Lower, ymax = Upper), alpha = 0.3, fill = "blue") +
geom_line(aes(y = Mean)) +
xlab("Time") +
ylab("Response") +
ggtitle("Conditional mean bands") +
theme_bw()
X1 <- Intercept_only[1:50]
t(X1)%*%X1
t(X)%*%X
n
X1 <- Intercept_only[1:150]
t(X1)%*%X1
solve(t(X)%*%X)
solve(t(X1)%*%X1)
A <- solve(t(X)%*%X)
A[1,1] + 2*A[2,1] + A[2,2]
A[1,1]
1/150
### Visualization ###
posterior_intervals <- get_posterior_predictive_bands(mcmc_results, c(.05, .5, .95))
colnames(posterior_intervals) <- c("ID", "Time", "Y", "Lower_P", "Median_P", "Upper_P", "Lower_M", "Median_M", "Upper_M")
posterior_intervals <- as_tibble(posterior_intervals)
posterior_intervals %>%
filter(ID == 3) %>%
ggplot(aes(x = Time, y = Y)) +
geom_point(na.rm = TRUE) +
geom_ribbon(aes(ymin = Lower_P, ymax = Upper_P), alpha = 0.3) +
theme_bw()
posterior_intervals %>%
filter(ID == 0) %>%
ggplot(aes(x = Time, y = Y)) +
geom_point(na.rm = TRUE) +
geom_ribbon(aes(ymin = Lower_P, ymax = Upper_P), alpha = 0.3) +
theme_bw()
posterior_intervals %>%
filter(ID == 1) %>%
ggplot(aes(x = Time, y = Y)) +
geom_point(na.rm = TRUE) +
geom_ribbon(aes(ymin = Lower_M, ymax = Upper_M), alpha = 0.3) +
theme_bw()
posterior_intervals %>%
group_by(ID) %>%
filter(Y > Lower_P & Y < Upper_P) %>%
summarize(coverage = n() / tmax)
posterior_intervals %>%
filter(Y > Lower_P & Y < Upper_P) %>%
summarize(coverage = n() / (tmax * n))
eigen_bands$magnitude
xi <- c(1, 1)
alpha <- .05
eigen_bands <- get_posterior_eigen(mcmc_results, evals, xi, alpha)
eigen_bands$magnitude
eig_names <- c()
eig_labs <- c()
for(k in 1:evals){
eig_names <- c(eig_names, paste("Eigenfunction", k))
eig_labs <- c(eig_labs, paste("Eigenfunction", k, " ", round(eigen_bands$eigenval_pve_intervals[1,k], 2), "-", round(eigen_bands$eigenval_pve_intervals[3,k], 2)))
}
names(eig_labs) <- eig_names
eigen_bands_tibble <- tibble(Time = rep(t, evals),
number = factor(rep(eig_names, each = length(t))),
lower = c(eigen_bands$lower),
mean = c(eigen_bands$mean),
upper = c(eigen_bands$upper),
val_lower = rep(eigen_bands$eigenval_intervals[1,], each = length(t)),
val_median = rep(eigen_bands$eigenval_intervals[2,], each = length(t)),
val_upper = rep(eigen_bands$eigenval_intervals[3,], each = length(t)))
eigen_bands_tibble %>%
ggplot(aes(x = Time)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = number), alpha = 0.5) +
facet_wrap(number ~., labeller = labeller(number = eig_labs)) +
theme_bw() +
theme(legend.position="none")
