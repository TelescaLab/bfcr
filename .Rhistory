Y_mean <- t(mean_grid)
Y_no_error <-  t(mean_grid) + diag(Eta1)%*%t(basis1_grid) + diag(Eta2)%*%t(basis2_grid)
Y <- Y_no_error + E
Age <- X[,2]
TBasis <- smooth.construct(s(t, bs = "ps", k = 12), data.frame(t), NULL)
AgeBasis <- smooth.construct(s(Age, bs = "ps", k = 4), data.frame(Age), NULL)
Q <- precmat.IGMRFreglat(12, 4, order = 2)
matlist <- list()
matlist[[1]] <- as.matrix(Q)
mcmc_results <- run_mcmc_Morris_Tensor(Y, t, AgeBasis$X, AgeBasis$X, TBasis$X,
matlist, matlist, c(1), c(1), K = 4, iter = 20000,
burnin = 20000, nchains = 1,
thin = 1, loglik = 0)
Age_seq <- seq(from = -1, to = 1, length.out = 20)
Age_df <- data.frame(Age = Age_seq)
new_points <- Predict.matrix(AgeBasis, Age_df)
idx <- 20
evals <- 2
zi <- new_points[idx,]
zim <- c(1, Age_seq[idx])
#zi <- c(1, Age_seq[10])
#truecov <- tcrossprod(lbasis1_int) + tcrossprod(lbasis2_int)
truecov <- basis1_fn %*% outer(zim, zim) %*% t(basis1_fn) +
basis2_fn %*% outer(zim, zim) %*% t(basis2_fn)
eigen_bands <- get_posterior_eigen2(mcmc_results, evals, zi, alpha)
persp3D(1:50,1:50, truecov)
persp3D(1:50,1:50, eigen_bands$surface)
idx <- 15
evals <- 2
zi <- new_points[idx,]
zim <- c(1, Age_seq[idx])
#zi <- c(1, Age_seq[10])
#truecov <- tcrossprod(lbasis1_int) + tcrossprod(lbasis2_int)
truecov <- basis1_fn %*% outer(zim, zim) %*% t(basis1_fn) +
basis2_fn %*% outer(zim, zim) %*% t(basis2_fn)
eigen_bands <- get_posterior_eigen2(mcmc_results, evals, zi, alpha)
persp3D(1:50,1:50, truecov)
persp3D(1:50,1:50, eigen_bands$surface)
idx <- 10
evals <- 2
zi <- new_points[idx,]
zim <- c(1, Age_seq[idx])
#zi <- c(1, Age_seq[10])
#truecov <- tcrossprod(lbasis1_int) + tcrossprod(lbasis2_int)
truecov <- basis1_fn %*% outer(zim, zim) %*% t(basis1_fn) +
basis2_fn %*% outer(zim, zim) %*% t(basis2_fn)
eigen_bands <- get_posterior_eigen2(mcmc_results, evals, zi, alpha)
persp3D(1:50,1:50, truecov)
persp3D(1:50,1:50, eigen_bands$surface)
idx <- 1
evals <- 2
zi <- new_points[idx,]
zim <- c(1, Age_seq[idx])
#zi <- c(1, Age_seq[10])
#truecov <- tcrossprod(lbasis1_int) + tcrossprod(lbasis2_int)
truecov <- basis1_fn %*% outer(zim, zim) %*% t(basis1_fn) +
basis2_fn %*% outer(zim, zim) %*% t(basis2_fn)
eigen_bands <- get_posterior_eigen2(mcmc_results, evals, zi, alpha)
persp3D(1:50,1:50, truecov)
persp3D(1:50,1:50, eigen_bands$surface)
alpha <- 0.05
Age_seq <- seq(from = -3, to = 3, length.out = 20)
Age_df <- data.frame(Age = Age_seq)
new_points <- Predict.matrix(AgeBasis, Age_df)
idx <- 1
evals <- 2
zi <- new_points[idx,]
zim <- c(1, Age_seq[idx])
#zi <- c(1, Age_seq[10])
#truecov <- tcrossprod(lbasis1_int) + tcrossprod(lbasis2_int)
truecov <- basis1_fn %*% outer(zim, zim) %*% t(basis1_fn) +
basis2_fn %*% outer(zim, zim) %*% t(basis2_fn)
eigen_bands <- get_posterior_eigen2(mcmc_results, evals, zi, alpha)
persp3D(1:50,1:50, truecov)
persp3D(1:50,1:50, eigen_bands$surface)
idx <- 20
evals <- 2
zi <- new_points[idx,]
zim <- c(1, Age_seq[idx])
#zi <- c(1, Age_seq[10])
#truecov <- tcrossprod(lbasis1_int) + tcrossprod(lbasis2_int)
truecov <- basis1_fn %*% outer(zim, zim) %*% t(basis1_fn) +
basis2_fn %*% outer(zim, zim) %*% t(basis2_fn)
eigen_bands <- get_posterior_eigen2(mcmc_results, evals, zi, alpha)
persp3D(1:50,1:50, truecov)
persp3D(1:50,1:50, eigen_bands$surface)
estmeanmat <- matrix(0, nrow = length(Age_seq), ncol = length(t))
truemeanmat <- matrix(0, nrow = length(Age_seq), ncol = length(t))
for(i in 1:length(Age_seq)){
xi <- new_points[i, ]
coef_bands <- get_posterior_means(mcmc_results, xi, alpha)
estmeanmat[i,] <- coef_bands[,2]
truemeanmat[i,] <- mean_fn%*%c(1, Age_seq[i])
}
par(mfrow = c(1,2))
persp3D(1:length(Age_seq), 1:length(t), estmeanmat)
persp3D(1:length(Age_seq), 1:length(t), truemeanmat)
results <- numeric(21)
for(i in 1:length(Age_seq)){
evals <- 2
zi <- new_points[i,]
zim <- c(1, Age_seq[i])
alpha <- .05
eigen_bands <- get_posterior_eigen2(mcmc_results, evals, zi, alpha)
eig_names <- c()
eig_labs <- c()
for(k in 1:evals){
eig_names <- c(eig_names, paste("Eigenfunction", k))
eig_labs <- c(eig_labs, paste("Eigenfunction", k, " ", round(eigen_bands$eigenval_pve_intervals[1,k], 2), "-", round(eigen_bands$eigenval_pve_intervals[3,k], 2)))
}
names(eig_labs) <- eig_names
eigen_bands_tibble <- tibble(Time = rep(t, evals),
number = factor(rep(eig_names, each = length(t))),
lower = c(eigen_bands$lower),
mean = c(eigen_bands$mean),
upper = c(eigen_bands$upper),
val_lower = rep(eigen_bands$eigenval_intervals[1,], each = length(t)),
val_median = rep(eigen_bands$eigenval_intervals[2,], each = length(t)),
val_upper = rep(eigen_bands$eigenval_intervals[3,], each = length(t)))
#truecov <- matrix(0, nrow = tmax, ncol = tmax)
#truecov <- tcrossprod(basis1_fn[,1]) + tcrossprod(basis2_fn[,1])
truecov <- basis1_fn %*% outer(zim, zim) %*% t(basis1_fn) +
basis2_fn %*% outer(zim, zim) %*% t(basis2_fn)
#truecov <- Btru %*% Lambda1 %*% outer(zi, zi) %*% t(Lambda1) %*% t(Btru) +
#  Btru %*% Lambda2 %*% outer(zi, zi) %*% t(Lambda2) %*% t(Btru)
eigvec <- eigen(truecov)$vectors
for(i in 1:2){
eigvec[,i] <- eigvec[,i] / sqrt(trapz(t, eigvec[,i]^2))
}
eigen_bands_tibble <- eigen_bands_tibble %>%
mutate(eigvec = c(eigvec[,1], eigvec[,2]))
eigen_bands_tibble <- eigen_bands_tibble %>%
group_by(number) %>%
mutate(eigvec = case_when(as.numeric(trapz(t, (mean + eigvec)^2) < trapz(t,
(mean - eigvec)^2)) == 1 ~ -eigvec, TRUE ~ eigvec))
results[15:16] <- 100 * unlist((eigen_bands_tibble %>%
group_by(number) %>%
summarize(RISE = trapz(t, (mean - eigvec)^2) / trapz(t, eigvec^2)))[,2]) +
results[15:16]
results[17:18] <- unlist((eigen_bands_tibble %>%
group_by(number) %>%
filter(eigvec >= lower & eigvec <= upper) %>%
summarize(coverage = 100 * n() / tmax))[,2]) + results[17:18]
results[19:20] <- unlist((eigen_bands_tibble %>%
group_by(number) %>%
summarize(mean_l = mean(upper - lower)))[,2]) + results[19:20]
results[21] <- trapz(t,sapply(1:tmax, function(i) trapz(t, (eigen_bands$surface[,i] -
truecov[,i])^2))) / trapz(t, sapply(1:tmax, function(i) trapz(t,
truecov[,i]^2))) * 100 + results[21]
print(trapz(t,sapply(1:tmax, function(i) trapz(t, (eigen_bands$surface[,i] -
truecov[,i])^2))) / trapz(t, sapply(1:tmax, function(i) trapz(t,
truecov[,i]^2))))
# results[22] <- trapz(t,sapply(1:tmax, function(i) trapz(t, (eigen_bands$surface_cor[,i] -
#                                                               cov2cor(truecov)[,i])^2))) / trapz(t, sapply(1:tmax, function(i) trapz(t,
#                                                                                                                             cov2cor(truecov)[,i]^2))) * 100 + results[22]
}
results[15:21] <- results[15:21] / length(Age_seq)
results
for(i in 1:length(Age_seq)){
evals <- 2
zi <- new_points[i,]
zim <- c(1, Age_seq[i])
alpha <- .05
eigen_bands <- get_posterior_eigen2(mcmc_results, evals, zi, alpha)
eig_names <- c()
eig_labs <- c()
for(k in 1:evals){
eig_names <- c(eig_names, paste("Eigenfunction", k))
eig_labs <- c(eig_labs, paste("Eigenfunction", k, " ", round(eigen_bands$eigenval_pve_intervals[1,k], 2), "-", round(eigen_bands$eigenval_pve_intervals[3,k], 2)))
}
names(eig_labs) <- eig_names
eigen_bands_tibble <- tibble(Time = rep(t, evals),
number = factor(rep(eig_names, each = length(t))),
lower = c(eigen_bands$lower),
mean = c(eigen_bands$mean),
upper = c(eigen_bands$upper),
val_lower = rep(eigen_bands$eigenval_intervals[1,], each = length(t)),
val_median = rep(eigen_bands$eigenval_intervals[2,], each = length(t)),
val_upper = rep(eigen_bands$eigenval_intervals[3,], each = length(t)))
#truecov <- matrix(0, nrow = tmax, ncol = tmax)
#truecov <- tcrossprod(basis1_fn[,1]) + tcrossprod(basis2_fn[,1])
truecov <- basis1_fn %*% outer(zim, zim) %*% t(basis1_fn) +
basis2_fn %*% outer(zim, zim) %*% t(basis2_fn)
#truecov <- Btru %*% Lambda1 %*% outer(zi, zi) %*% t(Lambda1) %*% t(Btru) +
#  Btru %*% Lambda2 %*% outer(zi, zi) %*% t(Lambda2) %*% t(Btru)
eigvec <- eigen(truecov)$vectors
for(i in 1:2){
eigvec[,i] <- eigvec[,i] / sqrt(trapz(t, eigvec[,i]^2))
}
eigen_bands_tibble <- eigen_bands_tibble %>%
mutate(eigvec = c(eigvec[,1], eigvec[,2]))
eigen_bands_tibble <- eigen_bands_tibble %>%
group_by(number) %>%
mutate(eigvec = case_when(as.numeric(trapz(t, (mean + eigvec)^2) < trapz(t,
(mean - eigvec)^2)) == 1 ~ -eigvec, TRUE ~ eigvec))
results[15:16] <- 100 * unlist((eigen_bands_tibble %>%
group_by(number) %>%
summarize(RISE = trapz(t, (mean - eigvec)^2) / trapz(t, eigvec^2)))[,2]) +
results[15:16]
results[17:18] <- unlist((eigen_bands_tibble %>%
group_by(number) %>%
filter(eigvec >= lower & eigvec <= upper) %>%
summarize(coverage = 100 * n() / tmax))[,2]) + results[17:18]
results[19:20] <- unlist((eigen_bands_tibble %>%
group_by(number) %>%
summarize(mean_l = mean(upper - lower)))[,2]) + results[19:20]
results[21] <- trapz(t,sapply(1:tmax, function(i) trapz(t, (eigen_bands$surface[,i] -
truecov[,i])^2))) / trapz(t, sapply(1:tmax, function(i) trapz(t,
truecov[,i]^2))) * 100 + results[21]
print(trapz(t,sapply(1:tmax, function(i) trapz(t, (eigen_bands$surface[,i] -
truecov[,i])^2))) / trapz(t, sapply(1:tmax, function(i) trapz(t,
truecov[,i]^2)))) *100
# results[22] <- trapz(t,sapply(1:tmax, function(i) trapz(t, (eigen_bands$surface_cor[,i] -
#                                                               cov2cor(truecov)[,i])^2))) / trapz(t, sapply(1:tmax, function(i) trapz(t,
#                                                                                                                             cov2cor(truecov)[,i]^2))) * 100 + results[22]
}
results <- numeric(21)
for(i in 1:length(Age_seq)){
evals <- 2
zi <- new_points[i,]
zim <- c(1, Age_seq[i])
alpha <- .05
eigen_bands <- get_posterior_eigen2(mcmc_results, evals, zi, alpha)
eig_names <- c()
eig_labs <- c()
for(k in 1:evals){
eig_names <- c(eig_names, paste("Eigenfunction", k))
eig_labs <- c(eig_labs, paste("Eigenfunction", k, " ", round(eigen_bands$eigenval_pve_intervals[1,k], 2), "-", round(eigen_bands$eigenval_pve_intervals[3,k], 2)))
}
names(eig_labs) <- eig_names
eigen_bands_tibble <- tibble(Time = rep(t, evals),
number = factor(rep(eig_names, each = length(t))),
lower = c(eigen_bands$lower),
mean = c(eigen_bands$mean),
upper = c(eigen_bands$upper),
val_lower = rep(eigen_bands$eigenval_intervals[1,], each = length(t)),
val_median = rep(eigen_bands$eigenval_intervals[2,], each = length(t)),
val_upper = rep(eigen_bands$eigenval_intervals[3,], each = length(t)))
#truecov <- matrix(0, nrow = tmax, ncol = tmax)
#truecov <- tcrossprod(basis1_fn[,1]) + tcrossprod(basis2_fn[,1])
truecov <- basis1_fn %*% outer(zim, zim) %*% t(basis1_fn) +
basis2_fn %*% outer(zim, zim) %*% t(basis2_fn)
#truecov <- Btru %*% Lambda1 %*% outer(zi, zi) %*% t(Lambda1) %*% t(Btru) +
#  Btru %*% Lambda2 %*% outer(zi, zi) %*% t(Lambda2) %*% t(Btru)
eigvec <- eigen(truecov)$vectors
for(i in 1:2){
eigvec[,i] <- eigvec[,i] / sqrt(trapz(t, eigvec[,i]^2))
}
eigen_bands_tibble <- eigen_bands_tibble %>%
mutate(eigvec = c(eigvec[,1], eigvec[,2]))
eigen_bands_tibble <- eigen_bands_tibble %>%
group_by(number) %>%
mutate(eigvec = case_when(as.numeric(trapz(t, (mean + eigvec)^2) < trapz(t,
(mean - eigvec)^2)) == 1 ~ -eigvec, TRUE ~ eigvec))
results[15:16] <- 100 * unlist((eigen_bands_tibble %>%
group_by(number) %>%
summarize(RISE = trapz(t, (mean - eigvec)^2) / trapz(t, eigvec^2)))[,2]) +
results[15:16]
results[17:18] <- unlist((eigen_bands_tibble %>%
group_by(number) %>%
filter(eigvec >= lower & eigvec <= upper) %>%
summarize(coverage = 100 * n() / tmax))[,2]) + results[17:18]
results[19:20] <- unlist((eigen_bands_tibble %>%
group_by(number) %>%
summarize(mean_l = mean(upper - lower)))[,2]) + results[19:20]
results[21] <- trapz(t,sapply(1:tmax, function(i) trapz(t, (eigen_bands$surface[,i] -
truecov[,i])^2))) / trapz(t, sapply(1:tmax, function(i) trapz(t,
truecov[,i]^2))) * 100 + results[21]
print(trapz(t,sapply(1:tmax, function(i) trapz(t, (eigen_bands$surface[,i] -
truecov[,i])^2))) / trapz(t, sapply(1:tmax, function(i) trapz(t,
truecov[,i]^2)))) *100
# results[22] <- trapz(t,sapply(1:tmax, function(i) trapz(t, (eigen_bands$surface_cor[,i] -
#                                                               cov2cor(truecov)[,i])^2))) / trapz(t, sapply(1:tmax, function(i) trapz(t,
#                                                                                                                             cov2cor(truecov)[,i]^2))) * 100 + results[22]
}
results[21]
results[21] / 20
print(trapz(t,sapply(1:tmax, function(i) trapz(t, (eigen_bands$surface[,i] -
truecov[,i])^2))) / trapz(t, sapply(1:tmax, function(i) trapz(t,
truecov[,i]^2)))) *100
print(trapz(t,sapply(1:tmax, function(i) trapz(t, (eigen_bands$surface[,i] -
truecov[,i])^2))) / trapz(t, sapply(1:tmax, function(i) trapz(t,
truecov[,i]^2)))) *100
print(100 * trapz(t,sapply(1:tmax, function(i) trapz(t, (eigen_bands$surface[,i] -
truecov[,i])^2))) / trapz(t, sapply(1:tmax, function(i) trapz(t,
truecov[,i]^2))))
results <- numeric(21)
for(i in 1:length(Age_seq)){
evals <- 2
zi <- new_points[i,]
zim <- c(1, Age_seq[i])
alpha <- .05
eigen_bands <- get_posterior_eigen2(mcmc_results, evals, zi, alpha)
eig_names <- c()
eig_labs <- c()
for(k in 1:evals){
eig_names <- c(eig_names, paste("Eigenfunction", k))
eig_labs <- c(eig_labs, paste("Eigenfunction", k, " ", round(eigen_bands$eigenval_pve_intervals[1,k], 2), "-", round(eigen_bands$eigenval_pve_intervals[3,k], 2)))
}
names(eig_labs) <- eig_names
eigen_bands_tibble <- tibble(Time = rep(t, evals),
number = factor(rep(eig_names, each = length(t))),
lower = c(eigen_bands$lower),
mean = c(eigen_bands$mean),
upper = c(eigen_bands$upper),
val_lower = rep(eigen_bands$eigenval_intervals[1,], each = length(t)),
val_median = rep(eigen_bands$eigenval_intervals[2,], each = length(t)),
val_upper = rep(eigen_bands$eigenval_intervals[3,], each = length(t)))
#truecov <- matrix(0, nrow = tmax, ncol = tmax)
#truecov <- tcrossprod(basis1_fn[,1]) + tcrossprod(basis2_fn[,1])
truecov <- basis1_fn %*% outer(zim, zim) %*% t(basis1_fn) +
basis2_fn %*% outer(zim, zim) %*% t(basis2_fn)
#truecov <- Btru %*% Lambda1 %*% outer(zi, zi) %*% t(Lambda1) %*% t(Btru) +
#  Btru %*% Lambda2 %*% outer(zi, zi) %*% t(Lambda2) %*% t(Btru)
eigvec <- eigen(truecov)$vectors
for(i in 1:2){
eigvec[,i] <- eigvec[,i] / sqrt(trapz(t, eigvec[,i]^2))
}
eigen_bands_tibble <- eigen_bands_tibble %>%
mutate(eigvec = c(eigvec[,1], eigvec[,2]))
eigen_bands_tibble <- eigen_bands_tibble %>%
group_by(number) %>%
mutate(eigvec = case_when(as.numeric(trapz(t, (mean + eigvec)^2) < trapz(t,
(mean - eigvec)^2)) == 1 ~ -eigvec, TRUE ~ eigvec))
results[15:16] <- 100 * unlist((eigen_bands_tibble %>%
group_by(number) %>%
summarize(RISE = trapz(t, (mean - eigvec)^2) / trapz(t, eigvec^2)))[,2]) +
results[15:16]
results[17:18] <- unlist((eigen_bands_tibble %>%
group_by(number) %>%
filter(eigvec >= lower & eigvec <= upper) %>%
summarize(coverage = 100 * n() / tmax))[,2]) + results[17:18]
results[19:20] <- unlist((eigen_bands_tibble %>%
group_by(number) %>%
summarize(mean_l = mean(upper - lower)))[,2]) + results[19:20]
results[21] <- trapz(t,sapply(1:tmax, function(i) trapz(t, (eigen_bands$surface[,i] -
truecov[,i])^2))) / trapz(t, sapply(1:tmax, function(i) trapz(t,
truecov[,i]^2))) * 100 + results[21]
print(100 * trapz(t,sapply(1:tmax, function(i) trapz(t, (eigen_bands$surface[,i] -
truecov[,i])^2))) / trapz(t, sapply(1:tmax, function(i) trapz(t,
truecov[,i]^2))))
# results[22] <- trapz(t,sapply(1:tmax, function(i) trapz(t, (eigen_bands$surface_cor[,i] -
#                                                               cov2cor(truecov)[,i])^2))) / trapz(t, sapply(1:tmax, function(i) trapz(t,
#                                                                                                                             cov2cor(truecov)[,i]^2))) * 100 + results[22]
}
length(Age_seq)
idx <- 9
evals <- 2
zi <- new_points[idx,]
zim <- c(1, Age_seq[idx])
#zi <- c(1, Age_seq[10])
#truecov <- tcrossprod(lbasis1_int) + tcrossprod(lbasis2_int)
truecov <- basis1_fn %*% outer(zim, zim) %*% t(basis1_fn) +
basis2_fn %*% outer(zim, zim) %*% t(basis2_fn)
eigen_bands <- get_posterior_eigen2(mcmc_results, evals, zi, alpha)
persp3D(1:50,1:50, truecov)
persp3D(1:50,1:50, eigen_bands$surface)
n <- 50
tmax <- 50
t <- seq(from = 0, to = 1, length.out = tmax)
p <- 12
B <- bs(t, df = p, intercept = TRUE)
int_function <- 1*(t-.5*t^2)
x_function <- t*sin(2*pi*t)
#x_function <- .2*sqrt(t)
lbasis1_int <- .2*(1-1*(t-.5)^2)
#lbasis1_int <- rep(0, length(t))
#lbasis1_int <- .25*cos(t*pi)
lbasis2_int <- .25*sin(t*pi)
lbasis1_z <- .25*exp(cos(t))
lbasis2_z <- .25*exp(sin(t))
#lbasis1_z <- rep(0, length(t))
#lbasis2_z <- rep(0, length(t))
#####################################################################
####################### DATA GENERATION #############################
#####################################################################
X <- cbind(rep(1,n), rnorm(n, sd = 1))
Age <- X[,2]
AgeBasis <- smooth.construct(s(Age, bs = "ps", k = 10), data.frame(Age), NULL)
noise_sd <- .1
# E <- matrix(rnorm(tmax * n,sd=noise_sd), nrow = n, ncol = tmax)
E <- matrix(0, nrow = n, ncol = tmax)
for(i in 1:n){
# E[i, ] <- rnorm(tmax, mean = 0, sd = noise_sd + (i %% 5) * noise_sd / 5)
E[i, ] <- rnorm(tmax, mean = 0, sd = noise_sd)
}
mean_fn <- cbind(int_function, x_function)
mean_grid <- cbind(int_function, x_function) %*% t(X)
basis1_fn <- cbind(lbasis1_int, lbasis1_z)
basis2_fn <- cbind(lbasis2_int, lbasis2_z)
basis1_grid <- cbind(lbasis1_int, lbasis1_z) %*% t(X)
basis2_grid <- cbind(lbasis2_int, lbasis2_z) %*% t(X)
Eta1 <- rnorm(n, sd = sqrt(1))
Eta2 <- rnorm(n, sd = sqrt(1))
Y_mean <- t(mean_grid)
Y_no_error <-  t(mean_grid) + diag(Eta1)%*%t(basis1_grid) + diag(Eta2)%*%t(basis2_grid)
Y <- Y_no_error + E
#####################################################################
########################## MCMC #####################################
#####################################################################
K <- 4
Age <- X[,2]
TBasis <- smooth.construct(s(t, bs = "ps", k = 12), data.frame(t), NULL)
AgeBasis <- smooth.construct(s(Age, bs = "ps", k = 4), data.frame(Age), NULL)
Q <- precmat.IGMRFreglat(12, 4, order = 2)
matlist <- list()
matlist[[1]] <- as.matrix(Q)
mcmc_results <- run_mcmc_Morris_Tensor(Y, t, AgeBasis$X, AgeBasis$X, TBasis$X,
matlist, matlist, c(1), c(1), K = 4, iter = 20000,
burnin = 20000, nchains = 1,
thin = 1, loglik = 0)
alpha <- 0.05
Age_seq <- seq(from = -3, to = 3, length.out = 20)
Age_df <- data.frame(Age = Age_seq)
new_points <- Predict.matrix(AgeBasis, Age_df)
idx <- 1
xi <- new_points[idx,]
#xi <- c(1, Age_seq[idx])
coef_bands <- get_posterior_means(mcmc_results, xi, alpha)
plot(coef_bands[,2], type = "l")
lines(mean_fn%*%c(1, Age_seq[idx]), col = "red")
lines(coef_bands[,1], col = "blue", lty = 2)
lines(coef_bands[,3], col = "blue", lty = 2)
estmeanmat <- matrix(0, nrow = length(Age_seq), ncol = length(t))
truemeanmat <- matrix(0, nrow = length(Age_seq), ncol = length(t))
for(i in 1:length(Age_seq)){
xi <- new_points[i, ]
coef_bands <- get_posterior_means(mcmc_results, xi, alpha)
estmeanmat[i,] <- coef_bands[,2]
truemeanmat[i,] <- mean_fn%*%c(1, Age_seq[i])
}
par(mfrow = c(1,2))
persp3D(1:length(Age_seq), 1:length(t), estmeanmat)
persp3D(1:length(Age_seq), 1:length(t), truemeanmat)
idx <- 9
evals <- 2
zi <- new_points[idx,]
zim <- c(1, Age_seq[idx])
#zi <- c(1, Age_seq[10])
#truecov <- tcrossprod(lbasis1_int) + tcrossprod(lbasis2_int)
truecov <- basis1_fn %*% outer(zim, zim) %*% t(basis1_fn) +
basis2_fn %*% outer(zim, zim) %*% t(basis2_fn)
eigen_bands <- get_posterior_eigen2(mcmc_results, evals, zi, alpha)
persp3D(1:50,1:50, truecov)
persp3D(1:50,1:50, eigen_bands$surface)
idx <- 1
evals <- 2
zi <- new_points[idx,]
zim <- c(1, Age_seq[idx])
#zi <- c(1, Age_seq[10])
#truecov <- tcrossprod(lbasis1_int) + tcrossprod(lbasis2_int)
truecov <- basis1_fn %*% outer(zim, zim) %*% t(basis1_fn) +
basis2_fn %*% outer(zim, zim) %*% t(basis2_fn)
eigen_bands <- get_posterior_eigen2(mcmc_results, evals, zi, alpha)
persp3D(1:50,1:50, truecov)
persp3D(1:50,1:50, eigen_bands$surface)
idx <- 10
evals <- 2
zi <- new_points[idx,]
zim <- c(1, Age_seq[idx])
#zi <- c(1, Age_seq[10])
#truecov <- tcrossprod(lbasis1_int) + tcrossprod(lbasis2_int)
truecov <- basis1_fn %*% outer(zim, zim) %*% t(basis1_fn) +
basis2_fn %*% outer(zim, zim) %*% t(basis2_fn)
eigen_bands <- get_posterior_eigen2(mcmc_results, evals, zi, alpha)
persp3D(1:50,1:50, truecov)
persp3D(1:50,1:50, eigen_bands$surface)
Age_seq
idx <- 11
evals <- 2
zi <- new_points[idx,]
zim <- c(1, Age_seq[idx])
#zi <- c(1, Age_seq[10])
#truecov <- tcrossprod(lbasis1_int) + tcrossprod(lbasis2_int)
truecov <- basis1_fn %*% outer(zim, zim) %*% t(basis1_fn) +
basis2_fn %*% outer(zim, zim) %*% t(basis2_fn)
eigen_bands <- get_posterior_eigen2(mcmc_results, evals, zi, alpha)
persp3D(1:50,1:50, truecov)
persp3D(1:50,1:50, eigen_bands$surface)
idx <- 13
evals <- 2
zi <- new_points[idx,]
zim <- c(1, Age_seq[idx])
#zi <- c(1, Age_seq[10])
#truecov <- tcrossprod(lbasis1_int) + tcrossprod(lbasis2_int)
truecov <- basis1_fn %*% outer(zim, zim) %*% t(basis1_fn) +
basis2_fn %*% outer(zim, zim) %*% t(basis2_fn)
eigen_bands <- get_posterior_eigen2(mcmc_results, evals, zi, alpha)
persp3D(1:50,1:50, truecov)
persp3D(1:50,1:50, eigen_bands$surface)
idx <- 20
evals <- 2
zi <- new_points[idx,]
zim <- c(1, Age_seq[idx])
#zi <- c(1, Age_seq[10])
#truecov <- tcrossprod(lbasis1_int) + tcrossprod(lbasis2_int)
truecov <- basis1_fn %*% outer(zim, zim) %*% t(basis1_fn) +
basis2_fn %*% outer(zim, zim) %*% t(basis2_fn)
eigen_bands <- get_posterior_eigen2(mcmc_results, evals, zi, alpha)
persp3D(1:50,1:50, truecov)
persp3D(1:50,1:50, eigen_bands$surface)
plot(eigen_bands$raw_magnitude, type = "l")
idx <- 11
evals <- 2
zi <- new_points[idx,]
zim <- c(1, Age_seq[idx])
#zi <- c(1, Age_seq[10])
#truecov <- tcrossprod(lbasis1_int) + tcrossprod(lbasis2_int)
truecov <- basis1_fn %*% outer(zim, zim) %*% t(basis1_fn) +
basis2_fn %*% outer(zim, zim) %*% t(basis2_fn)
eigen_bands <- get_posterior_eigen2(mcmc_results, evals, zi, alpha)
plot(eigen_bands$raw_magnitude, type = "l")
