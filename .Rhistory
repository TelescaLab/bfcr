Psi_sqrt %*% Psi_sqrt
eigenfns <- Btru %*% extract_eigenfn(mcmc_results$Lambda[[1,5000]], 1 / mcmc_results$Delta[[1]][,5000], Psi_sqrt, Psi_sqrt_inv, c(1,0))
pracma::trapz(t, eigenfns[,12])
plot(eigenfns[,12], type = "l")
### Some covariance visualization ###
Psi <- matrix(0, nrow = p, ncol = p)
for(i in 1:p){
for(j in 1:p){
Psi[i, j] <- trapz(t, Btru[, i] * Btru[, j])
}
}
Psi_sqrt <- pracma::sqrtm(Psi)$B
Psi_sqrt_inv <- solve(Psi_sqrt)
eigenfns <- Btru %*% extract_eigenfn(mcmc_results$Lambda[[1,5000]], mcmc_results$Delta[[1]][,5000], Psi_sqrt, Psi_sqrt_inv, c(1,0))
pracma::trapz(t, eigenfns[,12])
plot(eigenfns[,12], type = "l")
lines(200*eigen(truecov)$vectors[,1])
library(BayesianConditionalFPCA)
library(BayesianConditionalFPCA)
eigenfns <- Btru %*% extract_eigenfn(mcmc_results$Lambda[[1,5000]], mcmc_results$Delta[[1]][,5000], Psi_sqrt, Psi_sqrt_inv, c(1,0))
pracma::trapz(t, eigenfns[,12])
plot(eigenfns[,12], type = "l")
lines(200*eigen(truecov)$vectors[,1])
Psi_sqrt_inv
Btru[,1]
### Some covariance visualization ###
Btru_bsp <- bs(t, df = 12, intercept = TRUE)
### Some covariance visualization ###
Btru_bsp <- bs(t, df = 12, intercept = TRUE)
Psi <- matrix(0, nrow = p, ncol = p)
for(i in 1:p){
for(j in 1:p){
Psi[i, j] <- trapz(t, Btru_bsp[, i] * Btru_bsp[, j])
}
}
Psi_sqrt <- pracma::sqrtm(Psi)$B
Psi_sqrt_inv <- solve(Psi_sqrt)
eigenfns <- Btru %*% extract_eigenfn(mcmc_results$Lambda[[1,5000]], mcmc_results$Delta[[1]][,5000], Psi_sqrt, Psi_sqrt_inv, c(1,0))
pracma::trapz(t, eigenfns[,12])
plot(eigenfns[,12], type = "l")
Psi <- matrix(0, nrow = p, ncol = p)
for(i in 1:p){
for(j in 1:p){
Psi[i, j] <- trapz(t, Btr[, i] * Btru[, j])
}
}
Psi_sqrt <- pracma::sqrtm(Psi)$B
Psi_sqrt_inv <- solve(Psi_sqrt)
Psi <- matrix(0, nrow = p, ncol = p)
for(i in 1:p){
for(j in 1:p){
Psi[i, j] <- trapz(t, Btru[, i] * Btru[, j])
}
}
Psi_sqrt <- pracma::sqrtm(Psi)$B
Psi_sqrt_inv <- solve(Psi_sqrt)
eigenfns <- Btru %*% extract_eigenfn(mcmc_results$Lambda[[1,5000]], mcmc_results$Delta[[1]][,5000], Psi_sqrt, Psi_sqrt_inv, c(1,0))
extract_eigenfn(mcmc_results$Lambda[[1,5000]], mcmc_results$Delta[[1]][,5000], Psi_sqrt, Psi_sqrt_inv, c(1,0))
library(BayesianConditionalFPCA)
extract_eigenfn(mcmc_results$Lambda[[1,5000]], mcmc_results$Delta[[1]][,5000], Psi_sqrt, Psi_sqrt_inv, c(1,0))
mycov <- matrix(0, nrow = 12, ncol = 12)
for(i in 5000:5000){
# mycov <- matrix(0, nrow = tmax, ncol = tmax)
for(j in 1:K){
mycov <- mycov + mcmc_results$Lambda[[1,i]][,,j] %*% outer(X[51,], X[51,]) %*% t(mcmc_results$Lambda[[1,i]][,,j])
}
}
mycov <- matrix(0, nrow = 12, ncol = 12)
for(i in 5000:5000){
mycov <- mycov + diag(1/mcmc_results$Delta[[1]][,5000])
for(j in 1:K){
mycov <- mycov + mcmc_results$Lambda[[1,i]][,,j] %*% outer(X[1,], X[1,]) %*% t(mcmc_results$Lambda[[1,i]][,,j])
}
}
plot(eigen(mycov)$vectors[,1], type = "l")
plot(eigen(Btru%*%mycov%*%t(Btru))$vectors[,1], type = "l")
plot(eigenfns[,12], type = "l")
### Some covariance visualization ###
Btru_bsp <- bs(t, df = 12, intercept = TRUE)
Psi <- matrix(0, nrow = p, ncol = p)
for(i in 1:p){
for(j in 1:p){
Psi[i, j] <- trapz(t, Btru[, i] * Btru[, j])
}
}
Psi_sqrt <- pracma::sqrtm(Psi)$B
Psi_sqrt_inv <- solve(Psi_sqrt)
eigenfns <- Btru %*% extract_eigenfn(mcmc_results$Lambda[[1,5000]], mcmc_results$Delta[[1]][,5000], Psi_sqrt, Psi_sqrt_inv, c(1,0))
pracma::trapz(t, eigenfns[,12])
plot(eigenfns[,12], type = "l")
plot(eigen(Btru_bsp%*%mycov%*%t(Btru_bsp))$vectors[,1], type = "l")
Psi <- matrix(0, nrow = p, ncol = p)
for(i in 1:p){
for(j in 1:p){
Psi[i, j] <- trapz(t, Btru_bsp[, i] * Btru_bsp[, j])
}
}
Psi_sqrt <- pracma::sqrtm(Psi)$B
Psi_sqrt_inv <- solve(Psi_sqrt)
eigenfns <- Btru %*% extract_eigenfn(mcmc_results$Lambda[[1,5000]], mcmc_results$Delta[[1]][,5000], Psi_sqrt, Psi_sqrt_inv, c(1,0))
pracma::trapz(t, eigenfns[,12])
plot(eigenfns[,12], type = "l")
plot(eigen(Btru_bsp%*%mycov%*%t(Btru_bsp))$vectors[,1], type = "l")
K
dim(mcmc_results$Lambda[[1,5000]])
Psi <- matrix(0, nrow = p, ncol = p)
for(i in 1:p){
for(j in 1:p){
Psi[i, j] <- trapz(t, Btru[, i] * Btru[, j])
}
}
Psi_sqrt <- pracma::sqrtm(Psi)$B
Psi_sqrt_inv <- solve(Psi_sqrt)
eigenfns <- Btru %*% extract_eigenfn(mcmc_results$Lambda[[1,5000]], mcmc_results$Delta[[1]][,5000], Psi_sqrt, Psi_sqrt_inv, c(1,0))
pracma::trapz(t, eigenfns[,12])
plot(eigenfns[,12], type = "l")
mycov <- matrix(0, nrow = 12, ncol = 12)
for(i in 5000:5000){
mycov <- mycov + diag(1/mcmc_results$Delta[[1]][,5000])
for(j in 1:K){
mycov <- mycov + mcmc_results$Lambda[[1,i]][,,j] %*% outer(X[1,], X[1,]) %*% t(mcmc_results$Lambda[[1,i]][,,j])
}
}
plot(eigen(Btru%*%mycov%*%t(Btru))$vectors[,1], type = "l")
lines(200*eigen(truecov)$vectors[,1])
lines(eigen(truecov)$vectors[,1])
extract_eigenfn(mcmc_results$Lambda[[1,5000]], mcmc_results$Delta[[1]][,5000], Psi_sqrt, Psi_sqrt_inv, c(1,0))
Btru %*% extract_eigenfn(mcmc_results$Lambda[[1,5000]], mcmc_results$Delta[[1]][,5000], Psi_sqrt, Psi_sqrt_inv, c(1,0))
Psi <- matrix(0, nrow = p, ncol = p)
for(i in 1:p){
for(j in 1:p){
Psi[i, j] <- trapz(t, Btru[, i] * Btru[, j])
}
}
Psi_sqrt <- pracma::sqrtm(Psi)$B
Psi_sqrt_inv <- solve(Psi_sqrt)
eigenfns <- Btru %*% extract_eigenfn(mcmc_results$Lambda[[1,5000]], mcmc_results$Delta[[1]][,5000], Psi_sqrt, Psi_sqrt_inv, c(1,0))
eigenfns
plot(eigenfns[,12], type = "l")
trapz(t, eigenfns[,12])
trapz(t, eigenfns[,12]^2)
library(BayesianConditionalFPCA)
library(BayesianConditionalFPCA)
Psi <- matrix(0, nrow = p, ncol = p)
for(i in 1:p){
for(j in 1:p){
Psi[i, j] <- trapz(t, Btru[, i] * Btru[, j])
}
}
Psi_sqrt <- pracma::sqrtm(Psi)$B
Psi_sqrt_inv <- solve(Psi_sqrt)
eigenfns <- Btru %*% extract_eigenfn(mcmc_results$Lambda[[1,5000]], mcmc_results$Delta[[1]][,5000], Psi_sqrt, Psi_sqrt_inv, c(1,0))
pracma::trapz(t, eigenfns[,12]^2)
plot(eigenfns[,12], type = "l")
pracma::trapz(t, eigenfns[,11]^2)
plot(eigenfns[,11], type = "l")
lines(eigen(truecov)$vectors[,2])
lines(-eigen(truecov)$vectors[,2])
plot(eigen(truecov)$vectors[,2])
plot(eigenfns[,11]/eigenfn[,11]^2, type = "l")
plot(eigenfns[,11]/eigenfns[,11]^2, type = "l")
lines(-eigen(truecov)$vectors[,2])
lines(eigen(truecov)$vectors[,2])
sum((eigenfns[,11]/eigenfns[,11]^2)^2)
plot(eigenfns[,11]/sum(eigenfns[,11]^2), type = "l")
lines(eigen(truecov)$vectors[,2])
lines(-eigen(truecov)$vectors[,2])
sum((eigenfns[,11]/sum(eigenfns[,11]^2)))
sum((eigenfns[,11]/sqrt(sum(eigenfns[,11]^2))))
a1 <- c(1,2,3,5)
sum(a1^2)
a1_t <- a1 / sqrt(sum(a1^2))
sum(a1_t^2)
temp_vec <- eigenfns[,11] / sqrt(sum(eigenfns[,11]))
sum(temp_vec^2)
temp_vec <- eigenfns[,11] / sqrt(sum(eigenfns[,11]^2))
sum(temp_vec^2)
plot(temp_vec)
plot(temp_vec, type = "l")
lines(-eigen(truecov)$vectors[,2])
lines(eigen(mycov)$vectors[,2], col = "blue")
mycov <- matrix(0, nrow = 12, ncol = 12)
for(i in 5000:5000){
mycov <- mycov + diag(1/mcmc_results$Delta[[1]][,5000])
for(j in 1:K){
mycov <- mycov + mcmc_results$Lambda[[1,i]][,,j] %*% outer(X[1,], X[1,]) %*% t(mcmc_results$Lambda[[1,i]][,,j])
}
}
mycov <- Btru %*% mycov %*% t(Btru)
lines(eigen(mycov)$vectors[,2], col = "blue")
lines(-eigen(mycov)$vectors[,2], col = "blue")
eigenfns <- Btru %*% extract_eigenfn(mcmc_results$Lambda[[1,4000]], mcmc_results$Delta[[1]][,4000], Psi_sqrt, Psi_sqrt_inv, c(1,0))
temp_vec <- eigenfns[,11] / sqrt(sum(eigenfns[,11]^2))
plot(temp_vec, type = "l")
lines(-eigen(truecov)$vectors[,2])
mycov <- matrix(0, nrow = 12, ncol = 12)
for(i in 4000:4000){
mycov <- mycov + diag(1/mcmc_results$Delta[[1]][,5000])
for(j in 1:K){
mycov <- mycov + mcmc_results$Lambda[[1,i]][,,j] %*% outer(X[1,], X[1,]) %*% t(mcmc_results$Lambda[[1,i]][,,j])
}
}
mycov <- Btru %*% mycov %*% t(Btru)
lines(-eigen(mycov)$vectors[,2], col = "blue")
mycov <- matrix(0, nrow = 12, ncol = 12)
for(i in 4000:4000){
mycov <- mycov + diag(1/mcmc_results$Delta[[1]][,i])
for(j in 1:K){
mycov <- mycov + mcmc_results$Lambda[[1,i]][,,j] %*% outer(X[1,], X[1,]) %*% t(mcmc_results$Lambda[[1,i]][,,j])
}
}
mycov <- Btru %*% mycov %*% t(Btru)
lines(-eigen(mycov)$vectors[,2], col = "blue")
lines(eigen(mycov)$vectors[,2], col = "blue")
eigenfns <- Btru %*% extract_eigenfn(mcmc_results$Lambda[[1,3000]], mcmc_results$Delta[[1]][,3000], Psi_sqrt, Psi_sqrt_inv, c(1,0))
temp_vec <- eigenfns[,11] / sqrt(sum(eigenfns[,11]^2))
plot(temp_vec, type = "l")
mycov <- matrix(0, nrow = 12, ncol = 12)
for(i in 3000:3000){
mycov <- mycov + diag(1/mcmc_results$Delta[[1]][,i])
for(j in 1:K){
mycov <- mycov + mcmc_results$Lambda[[1,i]][,,j] %*% outer(X[1,], X[1,]) %*% t(mcmc_results$Lambda[[1,i]][,,j])
}
}
mycov <- Btru %*% mycov %*% t(Btru)
lines(eigen(mycov)$vectors[,2], col = "blue")
plot(eigenfns[,12], type = "l")
temp_vec <- eigenfns[,12] / sqrt(sum(eigenfns[,12]^2))
plot(temp_vec, type = "l")
lines(eigen(mycov)$vectors[,1], col = "blue")
lines(-eigen(mycov)$vectors[,1], col = "blue")
library(BayesianConditionalFPCA)
library(BayesianConditionalFPCA)
eigenfns <- Btru %*% extract_eigenfn(mcmc_results$Lambda[[1,3000]], mcmc_results$Delta[[1]][,3000], Psi_sqrt, Psi_sqrt_inv, c(1,0))
eigenfns <- Btru %*% extract_eigenfn(mcmc_results$Lambda[[1,3000]], mcmc_results$Delta[[1]][,3000], Psi_sqrt, Psi_sqrt_inv, Btru, 2, c(1,0))
eigenfns <- Btru %*% extract_eigenfn(mcmc_results$Lambda[[1,3000]], mcmc_results$Delta[[1]][,3000], Psi_sqrt, Psi_sqrt_inv, Btru, 1, c(1,0))
library(BayesianConditionalFPCA)
eigenfns <- Btru %*% extract_eigenfn(mcmc_results$Lambda[[1,3000]], mcmc_results$Delta[[1]][,3000], Psi_sqrt, Psi_sqrt_inv, Btru, 1, c(1,0))
library(BayesianConditionalFPCA)
eigenfns <- Btru %*% extract_eigenfn(mcmc_results$Lambda[[1,3000]], mcmc_results$Delta[[1]][,3000], Psi_sqrt, Psi_sqrt_inv, Btru, 1, c(1,0))
library(BayesianConditionalFPCA)
eigenfns <- Btru %*% extract_eigenfn(mcmc_results$Lambda[[1,3000]], mcmc_results$Delta[[1]][,3000], Psi_sqrt, Psi_sqrt_inv, Btru, 1, c(1,0))
library(BayesianConditionalFPCA)
extract_eigenfn(mcmc_results$Lambda[[1,3000]], mcmc_results$Delta[[1]][,3000], Psi_sqrt, Psi_sqrt_inv, Btru, 1, c(1,0))
extract_eigenfn(mcmc_results$Lambda[[1,3000]], mcmc_results$Delta[[1]][,3000], Psi_sqrt, Psi_sqrt_inv, Btru, 2, c(1,0))
extract_eigenfn(mcmc_results$Lambda[[1,3000]], mcmc_results$Delta[[1]][,3000], Psi_sqrt, Psi_sqrt_inv, Btru, 3, c(1,0))
library(BayesianConditionalFPCA)
extract_eigenfn(mcmc_results$Lambda[[1,3000]], mcmc_results$Delta[[1]][,3000], Psi_sqrt, Psi_sqrt_inv, Btru, 3, c(1,0))
library(BayesianConditionalFPCA)
extract_eigenfn(mcmc_results$Lambda[[1,3000]], mcmc_results$Delta[[1]][,3000], Psi_sqrt, Psi_sqrt_inv, Btru, 3, c(1,0))
library(BayesianConditionalFPCA)
extract_eigenfn(mcmc_results$Lambda[[1,3000]], mcmc_results$Delta[[1]][,3000], Psi_sqrt, Psi_sqrt_inv, Btru, 3, c(1,0))
library(BayesianConditionalFPCA)
extract_eigenfn(mcmc_results$Lambda[[1,3000]], mcmc_results$Delta[[1]][,3000], Psi_sqrt, Psi_sqrt_inv, Btru, 3, c(1,0))
library(BayesianConditionalFPCA)
extract_eigenfn(mcmc_results$Lambda[[1,3000]], mcmc_results$Delta[[1]][,3000], Psi_sqrt, Psi_sqrt_inv, Btru, 3, c(1,0))
library(BayesianConditionalFPCA)
extract_eigenfn(mcmc_results$Lambda[[1,3000]], mcmc_results$Delta[[1]][,3000], Psi_sqrt, Psi_sqrt_inv, Btru, 3, c(1,0))
eigenfns <- extract_eigenfn(mcmc_results$Lambda[[1,3000]], mcmc_results$Delta[[1]][,3000], Psi_sqrt, Psi_sqrt_inv, Btru, 2, c(1,0))
eigenfns$eigenval
eigen(mycov)$values[1:2]
eigenfns$eigenval[1] / eigenfns$eigenval[2]
eigen(mycov)$values[1]/eigen(mycov)$values[2]
mycov <- matrix(0, nrow = 12, ncol = 12)
for(i in 3000:3000){
mycov <- mycov + diag(1/mcmc_results$Delta[[1]][,i])
for(j in 1:K){
mycov <- mycov + mcmc_results$Lambda[[1,i]][,,j] %*% outer(X[1,], X[1,]) %*% t(mcmc_results$Lambda[[1,i]][,,j])
}
}
t(eigenfns$eigenfn) %*% Psi %*% mycov %*% Psi %*% eigenfns$eigenfn
dim(t(eigenfns$eigenfn))
library(BayesianConditionalFPCA)
eigenfns <- extract_eigenfn(mcmc_results$Lambda[[1,3000]], mcmc_results$Delta[[1]][,3000], Psi, Psi_sqrt, Psi_sqrt_inv, Btru, 2, c(1,0))
eigenfns$eigenval
eigval <- eigenfns$eigenval
eigval
mycov <- matrix(0, nrow = 12, ncol = 12)
for(i in 3000:3000){
mycov <- mycov + diag(1/mcmc_results$Delta[[1]][,i])
for(j in 1:K){
mycov <- mycov + mcmc_results$Lambda[[1,i]][,,j] %*% outer(X[1,], X[1,]) %*% t(mcmc_results$Lambda[[1,i]][,,j])
}
}
mycov <- Btru %*% mycov %*% t(Btru)
eigenfns$eigenval[1] / eigenfns$eigenval[2]
eigenfns$eigenval[1]/eigenfns$eigenval[2]
eigen(mycov)$values[1:3]
eigen(mycov)$values[1:5]
eigenfns <- extract_eigenfn(mcmc_results$Lambda[[1,3000]], mcmc_results$Delta[[1]][,3000], Psi, Psi_sqrt, Psi_sqrt_inv, Btru, 5, c(1,0))
cumsum(eigen(mycov)$values)/sum(eigen(mycov)$values)
mycov <- matrix(0, nrow = 12, ncol = 12)
for(i in 3000:3000){
mycov <- mycov #+ diag(1/mcmc_results$Delta[[1]][,i])
for(j in 1:K){
mycov <- mycov + mcmc_results$Lambda[[1,i]][,,j] %*% outer(X[1,], X[1,]) %*% t(mcmc_results$Lambda[[1,i]][,,j])
}
}
mycov <- Btru %*% mycov %*% t(Btru)
cumsum(eigen(mycov)$values)/sum(eigen(mycov)$values)
cumsum(truecov$values)/sum(truecov$values)
cumsum(eigen(truecov)$values)/sum(eigen(truecov)$values)
Matrix::rankMatrix(truecov)
eigen(truecov)$values[1:2]
eigen(truecov)$values[1:3]
mycov <- matrix(0, nrow = 12, ncol = 12)
for(i in 4000:4000){
mycov <- mycov + diag(1/mcmc_results$Delta[[1]][,i])
for(j in 1:K){
mycov <- mycov + mcmc_results$Lambda[[1,i]][,,j] %*% outer(X[1,], X[1,]) %*% t(mcmc_results$Lambda[[1,i]][,,j])
}
}
mycov <- Btru %*% mycov %*% t(Btru)
cumsum(eigen(mycov)$values)/sum(eigen(mycov)$values)
eigen(truecov)$values
eigen(truecov)$values[1:2]
mycov <- matrix(0, nrow = 12, ncol = 12)
for(i in 4000:4000){
mycov <- mycov #+ diag(1/mcmc_results$Delta[[1]][,i])
for(j in 1:K){
mycov <- mycov + mcmc_results$Lambda[[1,i]][,,j] %*% outer(X[1,], X[1,]) %*% t(mcmc_results$Lambda[[1,i]][,,j])
}
}
mycov <- Btru %*% mycov %*% t(Btru)
eigen(mycov)$values[1:2]
mycov <- matrix(0, nrow = 12, ncol = 12)
for(i in 5000:5000){
mycov <- mycov #+ diag(1/mcmc_results$Delta[[1]][,i])
for(j in 1:K){
mycov <- mycov + mcmc_results$Lambda[[1,i]][,,j] %*% outer(X[1,], X[1,]) %*% t(mcmc_results$Lambda[[1,i]][,,j])
}
}
mycov <- Btru %*% mycov %*% t(Btru)
eigen(mycov)$values[1:2]
mycov <- matrix(0, nrow = 12, ncol = 12)
for(i in 5000:5000){
mycov <- mycov + diag(1/mcmc_results$Delta[[1]][,i])
for(j in 1:K){
mycov <- mycov + mcmc_results$Lambda[[1,i]][,,j] %*% outer(X[1,], X[1,]) %*% t(mcmc_results$Lambda[[1,i]][,,j])
}
}
mycov <- Btru %*% mycov %*% t(Btru)
eigen(mycov)$values[1:2]
mycov <- matrix(0, nrow = 12, ncol = 12)
for(i in 4500:4500){
mycov <- mycov + diag(1/mcmc_results$Delta[[1]][,i])
for(j in 1:K){
mycov <- mycov + mcmc_results$Lambda[[1,i]][,,j] %*% outer(X[1,], X[1,]) %*% t(mcmc_results$Lambda[[1,i]][,,j])
}
}
mycov <- Btru %*% mycov %*% t(Btru)
eigen(mycov)$values[1:2]
mycov <- matrix(0, nrow = 12, ncol = 12)
for(i in 4500:4500){
mycov <- mycov# + diag(1/mcmc_results$Delta[[1]][,i])
for(j in 1:K){
mycov <- mycov + mcmc_results$Lambda[[1,i]][,,j] %*% outer(X[1,], X[1,]) %*% t(mcmc_results$Lambda[[1,i]][,,j])
}
}
mycov <- Btru %*% mycov %*% t(Btru)
eigen(mycov)$values[1:2]
mycov <- matrix(0, nrow = 12, ncol = 12)
for(i in 5000:5000){
mycov <- mycov# + diag(1/mcmc_results$Delta[[1]][,i])
for(j in 1:K){
mycov <- mycov + mcmc_results$Lambda[[1,i]][,,j] %*% outer(X[1,], X[1,]) %*% t(mcmc_results$Lambda[[1,i]][,,j])
}
}
mycov <- Btru %*% mycov %*% t(Btru) / 5000
eigen(mycov)$values[1:3]
mycov <- matrix(0, nrow = 12, ncol = 12)
for(i in 1:5000){
mycov <- mycov# + diag(1/mcmc_results$Delta[[1]][,i])
for(j in 1:K){
mycov <- mycov + mcmc_results$Lambda[[1,i]][,,j] %*% outer(X[1,], X[1,]) %*% t(mcmc_results$Lambda[[1,i]][,,j])
}
}
mycov <- Btru %*% mycov %*% t(Btru) / 5000
eigen(mycov)$values[1:3]
mycov <- matrix(0, nrow = 12, ncol = 12)
for(i in 1:5000){
mycov <- mycov + diag(1/mcmc_results$Delta[[1]][,i])
for(j in 1:K){
mycov <- mycov + mcmc_results$Lambda[[1,i]][,,j] %*% outer(X[1,], X[1,]) %*% t(mcmc_results$Lambda[[1,i]][,,j])
}
}
mycov <- Btru %*% mycov %*% t(Btru) / 5000
eigen(mycov)$values[1:3]
eigen(truecov)$values[1:2]
library(BayesianConditionalFPCA)
get_posterior_eigen(mcmc_results, 3, c(1,1))
library(BayesianConditionalFPCA)
mcmc_results <- run_mcmc(Y, t, X, Btru, K, iter = 5000, burnin = 5000, nchains = 1, thin = 1, loglik = 0)
mcmc_results$Time
library(BayesianConditionalFPCA)
Psi2 <- get_posterior_eigen(mcmc_results, 3, c(1,1))
Psi2
Psi
library(BayesianConditionalFPCA)
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
dim(mcmc_results$Delta[[1]])
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
dim(mcmc_results$Lambda)
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
library(BayesianConditionalFPCA)
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
mcmc_results <- run_mcmc(Y, t, X, Btru, K, iter = 5000, burnin = 5000, nchains = 2, thin = 1, loglik = 0)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
library(BayesianConditionalFPCA)
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
library(BayesianConditionalFPCA)
library(BayesianConditionalFPCA)
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
boobie
quantile(boobie[,1], .95)
quantile(boobie[,2], .95)
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0))
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0), .05)
dim(boobie)
plot(boobie[,1], type = "l")
lines(boobie[,2], col ="red")
lines(boobie[,3])
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0), .05)
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0), .05)
boobie$eigenval_intervals
library(BayesianConditionalFPCA)
library(BayesianConditionalFPCA)
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0), .05)
boobie$eigenval_intervals
boobie <- get_posterior_eigen(mcmc_results, 4, c(1,0), .05)
boobie <- get_posterior_eigen(mcmc_results, 2, c(1,0), .05)
boobie$eigenval_intervals
A <- boobie$eigenval_intervals
boobie <- get_posterior_eigen(mcmc_results, 3, c(1,0), .05)
boobie$eigenval_intervals
A
