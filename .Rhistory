#   plotly::layout(scene = list(xaxis = aX, yaxis = aY, zaxis = aZ, dragmode = "turntable"))
plot(eigen_bands$raw_magnitude, type = "l")
eigen_bands_tibble %>%
ggplot(aes(x = Time)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = number), alpha = 0.5) +
geom_line(aes(y = mean)) +
facet_wrap(number ~., labeller = labeller(number = eig_labs)) +
theme_bw() +
theme(legend.position="none")
# eigen_bands$magnitude
# aX <- list(title = "Time")
# aY <- list(title = "Time")
# aZ <- list(title = "Response")
# plotly::plot_ly(x = t, y = t, z = eigen_bands$surface, type = "surface") %>%
#   plotly::layout(scene = list(xaxis = aX, yaxis = aY, zaxis = aZ, dragmode = "turntable"))
plot(eigen_bands$raw_magnitude, type = "l")
truecov <- matrix(0, nrow = tmax, ncol = tmax)
truecov <- Btru %*% Lambda1 %*% outer(X[sub,], X[sub,]) %*% t(Lambda1) %*% t(Btru) +
Btru %*% Lambda2 %*% outer(X[sub,], X[sub,]) %*% t(Lambda2) %*% t(Btru)
par(mfrow = c(1,2))
persp3D(1:50, 1:50, eigen_bands$surface)
persp3D(1:50, 1:50, truecov)
covariance visualization ###
sub <- 2
evals <- 5
zi <- X[sub,]
alpha <- .05
eigen_bands <- get_posterior_eigen2(mcmc_results, evals, zi, alpha)
eig_names <- c()
eig_labs <- c()
for(k in 1:evals){
eig_names <- c(eig_names, paste("Eigenfunction", k))
eig_labs <- c(eig_labs, paste("Eigenfunction", k, " ", round(eigen_bands$eigenval_pve_intervals[1,k], 2), "-", round(eigen_bands$eigenval_pve_intervals[3,k], 2)))
}
names(eig_labs) <- eig_names
eigen_bands_tibble <- tibble(Time = rep(t, evals),
number = factor(rep(eig_names, each = length(t))),
lower = c(eigen_bands$lower),
mean = c(eigen_bands$mean),
upper = c(eigen_bands$upper),
val_lower = rep(eigen_bands$eigenval_intervals[1,], each = length(t)),
val_median = rep(eigen_bands$eigenval_intervals[2,], each = length(t)),
val_upper = rep(eigen_bands$eigenval_intervals[3,], each = length(t)))
eigen_bands_tibble %>%
ggplot(aes(x = Time)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = number), alpha = 0.5) +
geom_line(aes(y = mean)) +
facet_wrap(number ~., labeller = labeller(number = eig_labs)) +
theme_bw() +
theme(legend.position="none")
# eigen_bands$magnitude
# aX <- list(title = "Time")
# aY <- list(title = "Time")
# aZ <- list(title = "Response")
# plotly::plot_ly(x = t, y = t, z = eigen_bands$surface, type = "surface") %>%
#   plotly::layout(scene = list(xaxis = aX, yaxis = aY, zaxis = aZ, dragmode = "turntable"))
plot(eigen_bands$raw_magnitude, type = "l")
truecov <- matrix(0, nrow = tmax, ncol = tmax)
truecov <- Btru %*% Lambda1 %*% outer(X[sub,], X[sub,]) %*% t(Lambda1) %*% t(Btru) +
Btru %*% Lambda2 %*% outer(X[sub,], X[sub,]) %*% t(Lambda2) %*% t(Btru)
par(mfrow = c(1,2))
persp3D(1:50, 1:50, eigen_bands$surface)
persp3D(1:50, 1:50, truecov)
eigen_bands$magnitude
aX <- list(title = "Time")
aY <- list(title = "Time")
aZ <- list(title = "Response")
plotly::plot_ly(x = t, y = t, z = eigen_bands$surface, type = "surface") %>%
plotly::layout(scene = list(xaxis = aX, yaxis = aY, zaxis = aZ, dragmode = "turntable"))
mcmc_results <- run_mcmc2(Y, t, X2, X2, myB, K, iter = 5000, burnin = 2500, nchains = 1, thin = 5, loglik = 0)
### Some covariance visualization ###
sub <- 2
evals <- 5
zi <- X2[sub,]
alpha <- .05
eigen_bands <- get_posterior_eigen2(mcmc_results, evals, zi, alpha)
eig_names <- c()
eig_labs <- c()
for(k in 1:evals){
eig_names <- c(eig_names, paste("Eigenfunction", k))
eig_labs <- c(eig_labs, paste("Eigenfunction", k, " ", round(eigen_bands$eigenval_pve_intervals[1,k], 2), "-", round(eigen_bands$eigenval_pve_intervals[3,k], 2)))
}
names(eig_labs) <- eig_names
eigen_bands_tibble <- tibble(Time = rep(t, evals),
number = factor(rep(eig_names, each = length(t))),
lower = c(eigen_bands$lower),
mean = c(eigen_bands$mean),
upper = c(eigen_bands$upper),
val_lower = rep(eigen_bands$eigenval_intervals[1,], each = length(t)),
val_median = rep(eigen_bands$eigenval_intervals[2,], each = length(t)),
val_upper = rep(eigen_bands$eigenval_intervals[3,], each = length(t)))
eigen_bands_tibble %>%
ggplot(aes(x = Time)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = number), alpha = 0.5) +
geom_line(aes(y = mean)) +
facet_wrap(number ~., labeller = labeller(number = eig_labs)) +
theme_bw() +
theme(legend.position="none")
eigen_bands$magnitude
aX <- list(title = "Time")
aY <- list(title = "Time")
aZ <- list(title = "Response")
plotly::plot_ly(x = t, y = t, z = eigen_bands$surface, type = "surface") %>%
plotly::layout(scene = list(xaxis = aX, yaxis = aY, zaxis = aZ, dragmode = "turntable"))
truecov <- Btru %*% Lambda1 %*% outer(X[sub,], X[sub,]) %*% t(Lambda1) %*% t(Btru) +
Btru %*% Lambda2 %*% outer(X[sub,], X[sub,]) %*% t(Lambda2) %*% t(Btru)
plot(eigen_bands$raw_magnitude, type = "l")
truecov <- matrix(0, nrow = tmax, ncol = tmax)
par(mfrow = c(1,2))
persp3D(1:50, 1:50, eigen_bands$surface)
persp3D(1:50, 1:50, truecov)
persp3D(1:50, 1:50, eigen_bands$surface)
persp3D(1:50, 1:50, truecov)
truecov <- Btru %*% Lambda1 %*% outer(X[sub,], X[sub,]) %*% t(Lambda1) %*% t(Btru) +
Btru %*% Lambda2 %*% outer(X[sub,], X[sub,]) %*% t(Lambda2) %*% t(Btru)
par(mfrow = c(1,2))
persp3D(1:50, 1:50, eigen_bands$surface)
persp3D(1:50, 1:50, truecov)
sum((eigen_bands$surface - truecov)^2)/sum(truecov^2)
sub <- 26
evals <- 5
zi <- X2[sub,]
alpha <- .05
eigen_bands <- get_posterior_eigen2(mcmc_results, evals, zi, alpha)
eig_names <- c()
eig_labs <- c()
for(k in 1:evals){
eig_names <- c(eig_names, paste("Eigenfunction", k))
eig_labs <- c(eig_labs, paste("Eigenfunction", k, " ", round(eigen_bands$eigenval_pve_intervals[1,k], 2), "-", round(eigen_bands$eigenval_pve_intervals[3,k], 2)))
}
names(eig_labs) <- eig_names
eigen_bands_tibble <- tibble(Time = rep(t, evals),
number = factor(rep(eig_names, each = length(t))),
lower = c(eigen_bands$lower),
mean = c(eigen_bands$mean),
upper = c(eigen_bands$upper),
val_lower = rep(eigen_bands$eigenval_intervals[1,], each = length(t)),
val_median = rep(eigen_bands$eigenval_intervals[2,], each = length(t)),
val_upper = rep(eigen_bands$eigenval_intervals[3,], each = length(t)))
eigen_bands_tibble %>%
ggplot(aes(x = Time)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = number), alpha = 0.5) +
geom_line(aes(y = mean)) +
facet_wrap(number ~., labeller = labeller(number = eig_labs)) +
theme_bw() +
theme(legend.position="none")
eigen_bands$magnitude
aX <- list(title = "Time")
aY <- list(title = "Time")
aZ <- list(title = "Response")
plotly::plot_ly(x = t, y = t, z = eigen_bands$surface, type = "surface") %>%
plotly::layout(scene = list(xaxis = aX, yaxis = aY, zaxis = aZ, dragmode = "turntable"))
plot(eigen_bands$raw_magnitude, type = "l")
truecov <- matrix(0, nrow = tmax, ncol = tmax)
truecov <- Btru %*% Lambda1 %*% outer(X[sub,], X[sub,]) %*% t(Lambda1) %*% t(Btru) +
Btru %*% Lambda2 %*% outer(X[sub,], X[sub,]) %*% t(Lambda2) %*% t(Btru)
par(mfrow = c(1,2))
persp3D(1:50, 1:50, eigen_bands$surface)
persp3D(1:50, 1:50, truecov)
sum((eigen_bands$surface - truecov)^2)/sum(truecov^2)
sum(eigen(eigen_bands$surface))
sum(eigen(eigen_bands$surface)$values)
sum(eigen(truecov)$values)
### Some covariance visualization ###
sub <- 27
evals <- 5
zi <- X2[sub,]
alpha <- .05
eigen_bands <- get_posterior_eigen2(mcmc_results, evals, zi, alpha)
eig_names <- c()
eig_labs <- c()
for(k in 1:evals){
eig_names <- c(eig_names, paste("Eigenfunction", k))
eig_labs <- c(eig_labs, paste("Eigenfunction", k, " ", round(eigen_bands$eigenval_pve_intervals[1,k], 2), "-", round(eigen_bands$eigenval_pve_intervals[3,k], 2)))
}
names(eig_labs) <- eig_names
eigen_bands_tibble <- tibble(Time = rep(t, evals),
number = factor(rep(eig_names, each = length(t))),
lower = c(eigen_bands$lower),
mean = c(eigen_bands$mean),
upper = c(eigen_bands$upper),
val_lower = rep(eigen_bands$eigenval_intervals[1,], each = length(t)),
val_median = rep(eigen_bands$eigenval_intervals[2,], each = length(t)),
val_upper = rep(eigen_bands$eigenval_intervals[3,], each = length(t)))
eigen_bands_tibble %>%
ggplot(aes(x = Time)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = number), alpha = 0.5) +
geom_line(aes(y = mean)) +
facet_wrap(number ~., labeller = labeller(number = eig_labs)) +
theme_bw() +
theme(legend.position="none")
eigen_bands$magnitude
aX <- list(title = "Time")
aY <- list(title = "Time")
aZ <- list(title = "Response")
plotly::plot_ly(x = t, y = t, z = eigen_bands$surface, type = "surface") %>%
plotly::layout(scene = list(xaxis = aX, yaxis = aY, zaxis = aZ, dragmode = "turntable"))
plot(eigen_bands$raw_magnitude, type = "l")
truecov <- matrix(0, nrow = tmax, ncol = tmax)
truecov <- Btru %*% Lambda1 %*% outer(X[sub,], X[sub,]) %*% t(Lambda1) %*% t(Btru) +
Btru %*% Lambda2 %*% outer(X[sub,], X[sub,]) %*% t(Lambda2) %*% t(Btru)
par(mfrow = c(1,2))
persp3D(1:50, 1:50, eigen_bands$surface)
persp3D(1:50, 1:50, truecov)
source('simulated_data.r')
### MCMC sanity check ###
K <- 4
mcmc_results <- run_mcmc2(Y, t, X2, X2, myB, K, iter = 5000, burnin = 2500, nchains = 1, thin = 5, loglik = 0)
X2 <- cbind(X[,1], poly(X[,2], 3))
mcmc_results <- run_mcmc2(Y, t, X2, X2, myB, K, iter = 5000, burnin = 2500, nchains = 1, thin = 5, loglik = 0)
### Some covariance visualization ###
sub <- 27
evals <- 5
zi <- X2[sub,]
alpha <- .05
eigen_bands <- get_posterior_eigen2(mcmc_results, evals, zi, alpha)
eig_names <- c()
eig_labs <- c()
for(k in 1:evals){
eig_names <- c(eig_names, paste("Eigenfunction", k))
eig_labs <- c(eig_labs, paste("Eigenfunction", k, " ", round(eigen_bands$eigenval_pve_intervals[1,k], 2), "-", round(eigen_bands$eigenval_pve_intervals[3,k], 2)))
}
names(eig_labs) <- eig_names
eigen_bands_tibble <- tibble(Time = rep(t, evals),
number = factor(rep(eig_names, each = length(t))),
lower = c(eigen_bands$lower),
mean = c(eigen_bands$mean),
upper = c(eigen_bands$upper),
val_lower = rep(eigen_bands$eigenval_intervals[1,], each = length(t)),
val_median = rep(eigen_bands$eigenval_intervals[2,], each = length(t)),
val_upper = rep(eigen_bands$eigenval_intervals[3,], each = length(t)))
eigen_bands_tibble %>%
ggplot(aes(x = Time)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = number), alpha = 0.5) +
geom_line(aes(y = mean)) +
facet_wrap(number ~., labeller = labeller(number = eig_labs)) +
theme_bw() +
theme(legend.position="none")
eigen_bands$magnitude
aX <- list(title = "Time")
aY <- list(title = "Time")
aZ <- list(title = "Response")
plotly::plot_ly(x = t, y = t, z = eigen_bands$surface, type = "surface") %>%
plotly::layout(scene = list(xaxis = aX, yaxis = aY, zaxis = aZ, dragmode = "turntable"))
plot(eigen_bands$raw_magnitude, type = "l")
truecov <- matrix(0, nrow = tmax, ncol = tmax)
truecov <- Btru %*% Lambda1 %*% outer(X[sub,], X[sub,]) %*% t(Lambda1) %*% t(Btru) +
Btru %*% Lambda2 %*% outer(X[sub,], X[sub,]) %*% t(Lambda2) %*% t(Btru)
par(mfrow = c(1,2))
persp3D(1:50, 1:50, eigen_bands$surface)
persp3D(1:50, 1:50, truecov)
eigen_bands$magnitude
plot(eigen_bands$raw_magnitude, type = "l")
library(BayesianConditionalFPCA)
mcmc_results <- run_mcmc2(Y, t, X2, X2, myB, K, iter = 5000, burnin = 2500, nchains = 1, thin = 5, loglik = 0)
library(BayesianConditionalFPCA)
mcmc_results <- run_mcmc2(Y, t, X2, X2, myB, K, iter = 5000, burnin = 2500, nchains = 1, thin = 5, loglik = 0)
library(BayesianConditionalFPCA)
mcmc_results <- run_mcmc2(Y, t, X2, X2, myB, K, iter = 5000, burnin = 2500, nchains = 1, thin = 5, loglik = 0)
library(BayesianConditionalFPCA)
mcmc_results <- run_mcmc2(Y, t, X2, X2, myB, K, iter = 5000, burnin = 2500, nchains = 1, thin = 5, loglik = 0)
microbenchmark(mcmc_results <- run_mcmc2(Y, t, X2, X2, myB, K, iter = 5000, burnin = 2500, nchains = 1, thin = 1, loglik = 0), times = 1)
library(BayesianConditionalFPCA)
microbenchmark(mcmc_results <- run_mcmc2(Y, t, X2, X2, myB, K, iter = 5000, burnin = 2500, nchains = 1, thin = 1, loglik = 0), times = 1)
microbenchmark(mcmc_results <- run_mcmc2(Y, t, X2, X2, myB, K, iter = 5000, burnin = 2500, nchains = 1, thin = 1, loglik = 0), times = 1)
library(BayesianConditionalFPCA)
microbenchmark(mcmc_results <- run_mcmc2(Y, t, X2, X2, myB, K, iter = 5000, burnin = 2500, nchains = 1, thin = 1, loglik = 0), times = 1)
library(BayesianConditionalFPCA)
microbenchmark(mcmc_results <- run_mcmc2(Y, t, X2, X2, myB, K, iter = 5000, burnin = 2500, nchains = 1, thin = 1, loglik = 0), times = 1)
library(BayesianConditionalFPCA)
microbenchmark(mcmc_results <- run_mcmc2(Y, t, X2, X2, myB, K, iter = 5000, burnin = 2500, nchains = 1, thin = 1, loglik = 0), times = 1)
Y[1,1:10] <- NA
Y[2, 25:35] <- NA
Y[4,1:20] <- NA
mcmc_results <- run_mcmc2(Y, t, X2, X2, myB, K, iter = 5000, burnin = 2500, nchains = 1, thin = 1, loglik = 0)
library(BayesianConditionalFPCA)
mcmc_results <- run_mcmc2(Y, t, X2, X2, myB, K, iter = 5000, burnin = 2500, nchains = 1, thin = 1, loglik = 0)
### Visualization ###
posterior_intervals <- get_posterior_predictive_bands2(mcmc_results, c(.025, .5, .975))
colnames(posterior_intervals) <- c("ID", "Time", "Y", "Lower_P", "Median_P", "Upper_P", "Lower_M", "Median_M", "Upper_M")
posterior_intervals <- as_tibble(posterior_intervals)
posterior_intervals %>%
filter(ID == 26) %>%
ggplot(aes(x = Time, y = Y)) +
geom_point(na.rm = TRUE) +
geom_ribbon(aes(ymin = Lower_P, ymax = Upper_P), alpha = 0.3) +
theme_bw()
posterior_intervals %>%
filter(ID == 0) %>%
ggplot(aes(x = Time, y = Y)) +
geom_point(na.rm = TRUE) +
geom_ribbon(aes(ymin = Lower_P, ymax = Upper_P), alpha = 0.3) +
theme_bw()
posterior_intervals %>%
filter(ID == 0) %>%
ggplot(aes(x = Time, y = Y)) +
geom_point(na.rm = TRUE) +
geom_line(aes(y = Median_M)) +
theme_bw()
posterior_intervals %>%
filter(ID == 0) %>%
ggplot(aes(x = Time, y = Y)) +
geom_point(na.rm = TRUE) +
geom_ribbon(aes(ymin = Lower_M, ymax = Upper_M), alpha = 0.3) +
theme_bw()
posterior_intervals %>%
group_by(ID) %>%
filter(Y > Lower_P & Y < Upper_P) %>%
summarize(coverage = n() / tmax)
posterior_intervals %>%
filter(Y > Lower_P & Y < Upper_P) %>%
summarize(coverage = n() / (tmax * n))
posterior_intervals %>%
filter(ID == 0) %>%
ggplot(aes(x = Time, y = Y)) +
geom_point(na.rm = TRUE) +
geom_ribbon(aes(ymin = Lower_P, ymax = Upper_P), alpha = 0.3) +
theme_bw()
posterior_intervals
### Posterior mean bands ###
sub <- 1
xi <- X[sub,]
alpha <- .05
coef_bands <- get_posterior_means(mcmc_results, xi, alpha)
coef_bands <- cbind(t, coef_bands)
xi <- X2[sub,]
alpha <- .05
coef_bands <- get_posterior_means(mcmc_results, xi, alpha)
coef_bands <- cbind(t, coef_bands)
colnames(coef_bands) <- c("Time", "Lower", "Mean", "Upper")
coef_bands <- as_tibble(coef_bands)
coef_bands %>%
ggplot(aes(x = Time)) +
geom_ribbon(aes(ymin = Lower, ymax = Upper), alpha = 0.3, fill = "blue") +
geom_line(aes(y = Mean)) +
xlab("Time") +
ylab("Response") +
ggtitle("Conditional mean bands") +
theme_bw()
plot(coef_bands$Upper, type = "l")
lines(coef_bands$Lower)
lines(Btru%*%Theta1 %*% X[sub,],col="green")
### Some covariance visualization ###
sub <- 27
evals <- 5
zi <- X2[sub,]
alpha <- .05
eigen_bands <- get_posterior_eigen2(mcmc_results, evals, zi, alpha)
eig_names <- c()
eig_labs <- c()
for(k in 1:evals){
eig_names <- c(eig_names, paste("Eigenfunction", k))
eig_labs <- c(eig_labs, paste("Eigenfunction", k, " ", round(eigen_bands$eigenval_pve_intervals[1,k], 2), "-", round(eigen_bands$eigenval_pve_intervals[3,k], 2)))
}
names(eig_labs) <- eig_names
eigen_bands_tibble <- tibble(Time = rep(t, evals),
number = factor(rep(eig_names, each = length(t))),
lower = c(eigen_bands$lower),
mean = c(eigen_bands$mean),
upper = c(eigen_bands$upper),
val_lower = rep(eigen_bands$eigenval_intervals[1,], each = length(t)),
val_median = rep(eigen_bands$eigenval_intervals[2,], each = length(t)),
val_upper = rep(eigen_bands$eigenval_intervals[3,], each = length(t)))
eigen_bands_tibble %>%
ggplot(aes(x = Time)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = number), alpha = 0.5) +
geom_line(aes(y = mean)) +
facet_wrap(number ~., labeller = labeller(number = eig_labs)) +
theme_bw() +
theme(legend.position="none")
eigen_bands$magnitude
aX <- list(title = "Time")
aY <- list(title = "Time")
aZ <- list(title = "Response")
plotly::plot_ly(x = t, y = t, z = eigen_bands$surface, type = "surface") %>%
plotly::layout(scene = list(xaxis = aX, yaxis = aY, zaxis = aZ, dragmode = "turntable"))
plot(eigen_bands$raw_magnitude, type = "l")
truecov <- matrix(0, nrow = tmax, ncol = tmax)
truecov <- Btru %*% Lambda1 %*% outer(X[sub,], X[sub,]) %*% t(Lambda1) %*% t(Btru) +
Btru %*% Lambda2 %*% outer(X[sub,], X[sub,]) %*% t(Lambda2) %*% t(Btru)
par(mfrow = c(1,2))
persp3D(1:50, 1:50, eigen_bands$surface)
persp3D(1:50, 1:50, truecov)
### Some covariance visualization ###
sub <- 28
evals <- 5
zi <- X2[sub,]
alpha <- .05
eigen_bands <- get_posterior_eigen2(mcmc_results, evals, zi, alpha)
eig_names <- c()
eig_labs <- c()
for(k in 1:evals){
eig_names <- c(eig_names, paste("Eigenfunction", k))
eig_labs <- c(eig_labs, paste("Eigenfunction", k, " ", round(eigen_bands$eigenval_pve_intervals[1,k], 2), "-", round(eigen_bands$eigenval_pve_intervals[3,k], 2)))
}
names(eig_labs) <- eig_names
eigen_bands_tibble <- tibble(Time = rep(t, evals),
number = factor(rep(eig_names, each = length(t))),
lower = c(eigen_bands$lower),
mean = c(eigen_bands$mean),
upper = c(eigen_bands$upper),
val_lower = rep(eigen_bands$eigenval_intervals[1,], each = length(t)),
val_median = rep(eigen_bands$eigenval_intervals[2,], each = length(t)),
val_upper = rep(eigen_bands$eigenval_intervals[3,], each = length(t)))
eigen_bands_tibble %>%
ggplot(aes(x = Time)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = number), alpha = 0.5) +
geom_line(aes(y = mean)) +
facet_wrap(number ~., labeller = labeller(number = eig_labs)) +
theme_bw() +
theme(legend.position="none")
eigen_bands$magnitude
aX <- list(title = "Time")
aY <- list(title = "Time")
aZ <- list(title = "Response")
plotly::plot_ly(x = t, y = t, z = eigen_bands$surface, type = "surface") %>%
plotly::layout(scene = list(xaxis = aX, yaxis = aY, zaxis = aZ, dragmode = "turntable"))
plot(eigen_bands$raw_magnitude, type = "l")
truecov <- matrix(0, nrow = tmax, ncol = tmax)
truecov <- Btru %*% Lambda1 %*% outer(X[sub,], X[sub,]) %*% t(Lambda1) %*% t(Btru) +
Btru %*% Lambda2 %*% outer(X[sub,], X[sub,]) %*% t(Lambda2) %*% t(Btru)
par(mfrow = c(1,2))
persp3D(1:50, 1:50, eigen_bands$surface)
persp3D(1:50, 1:50, truecov)
mcmc_results <- run_mcmc2(Y, t, X2, X[,1], myB, K, iter = 5000, burnin = 2500, nchains = 1, thin = 1, loglik = 0)
mcmc_results <- run_mcmc2(Y, t, X2, cbind(X[,1]), myB, K, iter = 5000, burnin = 2500, nchains = 1, thin = 1, loglik = 0)
### Posterior mean bands ###
sub <- 1
xi <- X2[sub,]
alpha <- .05
coef_bands <- get_posterior_means(mcmc_results, xi, alpha)
coef_bands <- cbind(t, coef_bands)
colnames(coef_bands) <- c("Time", "Lower", "Mean", "Upper")
coef_bands <- as_tibble(coef_bands)
coef_bands %>%
ggplot(aes(x = Time)) +
geom_ribbon(aes(ymin = Lower, ymax = Upper), alpha = 0.3, fill = "blue") +
geom_line(aes(y = Mean)) +
xlab("Time") +
ylab("Response") +
ggtitle("Conditional mean bands") +
theme_bw()
plot(coef_bands$Upper, type = "l")
lines(coef_bands$Lower)
lines(Btru%*%Theta1 %*% X[sub,],col="green")
### Some covariance visualization ###
sub <- 28
evals <- 5
zi <- X[sub,1]
alpha <- .05
eigen_bands <- get_posterior_eigen2(mcmc_results, evals, zi, alpha)
eig_names <- c()
eig_labs <- c()
for(k in 1:evals){
eig_names <- c(eig_names, paste("Eigenfunction", k))
eig_labs <- c(eig_labs, paste("Eigenfunction", k, " ", round(eigen_bands$eigenval_pve_intervals[1,k], 2), "-", round(eigen_bands$eigenval_pve_intervals[3,k], 2)))
}
names(eig_labs) <- eig_names
eigen_bands_tibble <- tibble(Time = rep(t, evals),
number = factor(rep(eig_names, each = length(t))),
lower = c(eigen_bands$lower),
mean = c(eigen_bands$mean),
upper = c(eigen_bands$upper),
val_lower = rep(eigen_bands$eigenval_intervals[1,], each = length(t)),
val_median = rep(eigen_bands$eigenval_intervals[2,], each = length(t)),
val_upper = rep(eigen_bands$eigenval_intervals[3,], each = length(t)))
eigen_bands_tibble %>%
ggplot(aes(x = Time)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = number), alpha = 0.5) +
geom_line(aes(y = mean)) +
facet_wrap(number ~., labeller = labeller(number = eig_labs)) +
theme_bw() +
theme(legend.position="none")
evals <- 2
zi <- X[sub,1]
alpha <- .05
eigen_bands <- get_posterior_eigen2(mcmc_results, evals, zi, alpha)
eig_names <- c()
eig_labs <- c()
for(k in 1:evals){
eig_names <- c(eig_names, paste("Eigenfunction", k))
eig_labs <- c(eig_labs, paste("Eigenfunction", k, " ", round(eigen_bands$eigenval_pve_intervals[1,k], 2), "-", round(eigen_bands$eigenval_pve_intervals[3,k], 2)))
}
names(eig_labs) <- eig_names
eigen_bands_tibble <- tibble(Time = rep(t, evals),
number = factor(rep(eig_names, each = length(t))),
lower = c(eigen_bands$lower),
mean = c(eigen_bands$mean),
upper = c(eigen_bands$upper),
val_lower = rep(eigen_bands$eigenval_intervals[1,], each = length(t)),
val_median = rep(eigen_bands$eigenval_intervals[2,], each = length(t)),
val_upper = rep(eigen_bands$eigenval_intervals[3,], each = length(t)))
eigen_bands_tibble %>%
ggplot(aes(x = Time)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = number), alpha = 0.5) +
geom_line(aes(y = mean)) +
facet_wrap(number ~., labeller = labeller(number = eig_labs)) +
theme_bw() +
theme(legend.position="none")
eigen_bands$magnitude
aX <- list(title = "Time")
aY <- list(title = "Time")
aZ <- list(title = "Response")
plotly::plot_ly(x = t, y = t, z = eigen_bands$surface, type = "surface") %>%
plotly::layout(scene = list(xaxis = aX, yaxis = aY, zaxis = aZ, dragmode = "turntable"))
plot(eigen_bands$raw_magnitude, type = "l")
truecov <- matrix(0, nrow = tmax, ncol = tmax)
truecov <- Btru %*% Lambda1 %*% outer(X[sub,], X[sub,]) %*% t(Lambda1) %*% t(Btru) +
Btru %*% Lambda2 %*% outer(X[sub,], X[sub,]) %*% t(Lambda2) %*% t(Btru)
par(mfrow = c(1,2))
persp3D(1:50, 1:50, eigen_bands$surface)
persp3D(1:50, 1:50, truecov)
