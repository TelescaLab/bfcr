p2 <- posterior_intervals %>%
group_by(ID) %>%
filter(Y > Lower_P & Y < Upper_P) %>%
summarize(coverage = n() / tmax)
p2
p1==p2
p1[3,]
p2[4,]
min(p1[,1])
min(p1[,2])
min(p2[,2])
which.min(p2[,2])
min(p2[,2])
p2[,2]
as.vector(p2[,2])
as.numeric(p2[,2])
c(p2[,2])
which.min(p2[,2])
which.min(c(p2[,2]))
which.min(p2$coverage)
### Visualization ###
sub <- 34
posterior_intervals <- get_posterior_predictive_bands2(mcmc_results, c(.025, .5, .975))
colnames(posterior_intervals) <- c("ID", "Time", "Y", "Lower_P", "Median_P", "Upper_P", "Lower_M", "Median_M", "Upper_M")
posterior_intervals <- as_tibble(posterior_intervals)
posterior_intervals %>%
filter(ID == sub) %>%
ggplot(aes(x = Time, y = Y)) +
geom_point(na.rm = TRUE) +
geom_ribbon(aes(ymin = Lower_P, ymax = Upper_P), alpha = 0.3) +
theme_bw()
posterior_intervals %>%
filter(ID == sub) %>%
ggplot(aes(x = Time, y = Y)) +
geom_point(na.rm = TRUE) +
geom_line(aes(y = Median_M)) +
theme_bw()
posterior_intervals %>%
filter(ID == sub) %>%
ggplot(aes(x = Time, y = Y)) +
geom_point(na.rm = TRUE) +
geom_ribbon(aes(ymin = Lower_M, ymax = Upper_M), alpha = 0.3) +
theme_bw()
p2 <- posterior_intervals %>%
group_by(ID) %>%
filter(Y > Lower_P & Y < Upper_P) %>%
summarize(coverage = n() / tmax)
posterior_intervals %>%
filter(ID == sub) %>%
ggplot(aes(x = Time, y = Y)) +
geom_point(na.rm = TRUE) +
geom_line(aes(y = Median_M)) +
theme_bw()
posterior_intervals %>%
filter(ID == sub) %>%
ggplot(aes(x = Time, y = Y)) +
geom_point(na.rm = TRUE) +
geom_ribbon(aes(ymin = Lower_P, ymax = Upper_P), alpha = 0.3) +
theme_bw()
posterior_intervals %>%
group_by(ID) %>%
filter(Y > Lower_P & Y < Upper_P) %>%
summarize(coverage = n() / tmax)
tab1 <- posterior_intervals %>%
group_by(ID) %>%
filter(Y > Lower_P & Y < Upper_P) %>%
summarize(coverage = n() / tmax)
tab1[34,]
posterior_intervals %>%
filter(ID == 34)
posterior_intervals %>%
filter(ID == 34) %>%
filter(Y > Lower_P & Y < Upper_P)
posterior_intervals %>%
filter(ID == 34) %>%
filter(Y > Lower_P & Y < Upper_P) %>%
summarize(coverage = n())
posterior_intervals %>%
filter(ID == 34) %>%
filter(Y > Lower_P & Y < Upper_P) %>%
summarize(coverage = n() / tmax)
posterior_intervals %>%
filter(ID == 34) %>%
filter(Y > Lower_P & Y < Upper_P) %>%
summarize(coverage = n() / (tmax * n))
posterior_intervals %>%
filter(ID == 34 & Y > Lower_P & Y < Upper_P) %>%
summarize(coverage = n() / (tmax))
tab1[34,]
posterior_intervals %>%
filter(ID == 33 & Y > Lower_P & Y < Upper_P) %>%
summarize(coverage = n() / (tmax))
### Visualization ###
sub <- 33
colnames(posterior_intervals) <- c("ID", "Time", "Y", "Lower_P", "Median_P", "Upper_P", "Lower_M", "Median_M", "Upper_M")
posterior_intervals <- as_tibble(posterior_intervals)
posterior_intervals %>%
filter(ID == sub) %>%
ggplot(aes(x = Time, y = Y)) +
geom_point(na.rm = TRUE) +
geom_ribbon(aes(ymin = Lower_P, ymax = Upper_P), alpha = 0.3) +
theme_bw()
5%%5
source('simulated_data.r')
mcmc_results <- run_mcmc_Morris(Y, t, X, cbind(X[,1]), Basis, K, iter = 5000, burnin = 5000, nchains = 1, thin = 3, loglik = 1)
### Visualization ###
sub <- 33
posterior_intervals <- get_posterior_predictive_bands2(mcmc_results, c(.025, .5, .975))
colnames(posterior_intervals) <- c("ID", "Time", "Y", "Lower_P", "Median_P", "Upper_P", "Lower_M", "Median_M", "Upper_M")
posterior_intervals <- as_tibble(posterior_intervals)
posterior_intervals %>%
filter(ID == sub) %>%
ggplot(aes(x = Time, y = Y)) +
geom_point(na.rm = TRUE) +
geom_ribbon(aes(ymin = Lower_P, ymax = Upper_P), alpha = 0.3) +
theme_bw()
posterior_intervals %>%
filter(ID == sub) %>%
ggplot(aes(x = Time, y = Y)) +
geom_point(na.rm = TRUE) +
geom_line(aes(y = Median_M)) +
theme_bw()
posterior_intervals %>%
filter(ID == sub) %>%
ggplot(aes(x = Time, y = Y)) +
geom_point(na.rm = TRUE) +
geom_ribbon(aes(ymin = Lower_M, ymax = Upper_M), alpha = 0.3) +
theme_bw()
tab1 <- posterior_intervals %>%
group_by(ID) %>%
filter(Y > Lower_P & Y < Upper_P) %>%
summarize(coverage = n() / tmax)
posterior_intervals %>%
filter(Y > Lower_P & Y < Upper_P) %>%
summarize(coverage = n() / (tmax * n))
tab1
mcmc_results <- run_mcmc_Morris(Y, t, X, cbind(X[,1]), Basis, K, iter = 5000, burnin = 5000, nchains = 1, thin = 3, loglik = 1)
### Visualization ###
sub <- 33
posterior_intervals <- get_posterior_predictive_bands2(mcmc_results, c(.025, .5, .975))
colnames(posterior_intervals) <- c("ID", "Time", "Y", "Lower_P", "Median_P", "Upper_P", "Lower_M", "Median_M", "Upper_M")
posterior_intervals <- as_tibble(posterior_intervals)
posterior_intervals %>%
filter(ID == sub) %>%
ggplot(aes(x = Time, y = Y)) +
geom_point(na.rm = TRUE) +
geom_ribbon(aes(ymin = Lower_P, ymax = Upper_P), alpha = 0.3) +
theme_bw()
posterior_intervals %>%
filter(ID == sub) %>%
ggplot(aes(x = Time, y = Y)) +
geom_point(na.rm = TRUE) +
geom_line(aes(y = Median_M)) +
theme_bw()
posterior_intervals %>%
filter(ID == sub) %>%
ggplot(aes(x = Time, y = Y)) +
geom_point(na.rm = TRUE) +
geom_ribbon(aes(ymin = Lower_M, ymax = Upper_M), alpha = 0.3) +
theme_bw()
tab1 <- posterior_intervals %>%
group_by(ID) %>%
filter(Y > Lower_P & Y < Upper_P) %>%
summarize(coverage = n() / tmax)
posterior_intervals %>%
filter(Y > Lower_P & Y < Upper_P) %>%
summarize(coverage = n() / (tmax * n))
source('simulated_data.r')
mcmc_results <- run_mcmc_Morris(Y, t, X, cbind(X[,1]), Basis, K, iter = 5000, burnin = 5000, nchains = 1, thin = 3, loglik = 1)
### Visualization ###
sub <- 33
posterior_intervals <- get_posterior_predictive_bands2(mcmc_results, c(.025, .5, .975))
colnames(posterior_intervals) <- c("ID", "Time", "Y", "Lower_P", "Median_P", "Upper_P", "Lower_M", "Median_M", "Upper_M")
posterior_intervals <- as_tibble(posterior_intervals)
posterior_intervals %>%
filter(ID == sub) %>%
ggplot(aes(x = Time, y = Y)) +
geom_point(na.rm = TRUE) +
geom_ribbon(aes(ymin = Lower_P, ymax = Upper_P), alpha = 0.3) +
theme_bw()
posterior_intervals %>%
filter(ID == sub) %>%
ggplot(aes(x = Time, y = Y)) +
geom_point(na.rm = TRUE) +
geom_line(aes(y = Median_M)) +
theme_bw()
posterior_intervals %>%
filter(ID == sub) %>%
ggplot(aes(x = Time, y = Y)) +
geom_point(na.rm = TRUE) +
geom_ribbon(aes(ymin = Lower_M, ymax = Upper_M), alpha = 0.3) +
theme_bw()
tab1 <- posterior_intervals %>%
group_by(ID) %>%
filter(Y > Lower_P & Y < Upper_P) %>%
summarize(coverage = n() / tmax)
posterior_intervals %>%
filter(Y > Lower_P & Y < Upper_P) %>%
summarize(coverage = n() / (tmax * n))
tab1
min(tab1$coverage)
mcmc_results <- run_mcmc_Morris(Y, t, X, X, Basis, K, iter = 5000, burnin = 5000, nchains = 1, thin = 3, loglik = 1)
posterior_intervals <- get_posterior_predictive_bands2(mcmc_results, c(.025, .5, .975))
colnames(posterior_intervals) <- c("ID", "Time", "Y", "Lower_P", "Median_P", "Upper_P", "Lower_M", "Median_M", "Upper_M")
posterior_intervals <- as_tibble(posterior_intervals)
posterior_intervals %>%
filter(ID == sub) %>%
ggplot(aes(x = Time, y = Y)) +
geom_point(na.rm = TRUE) +
geom_line(aes(y = Median_M)) +
theme_bw()
posterior_intervals %>%
filter(ID == sub) %>%
ggplot(aes(x = Time, y = Y)) +
geom_point(na.rm = TRUE) +
geom_ribbon(aes(ymin = Lower_M, ymax = Upper_M), alpha = 0.3) +
theme_bw()
tab2 <- posterior_intervals %>%
group_by(ID) %>%
filter(Y > Lower_P & Y < Upper_P) %>%
summarize(coverage = n() / tmax)
min(tab2$coverage)
min(tab1$coverage)
tab1$coverage==tab2$coverage
tab1$coverage[1]
tab2$coverage[1]
tab1$coverage[4]
tab2$coverage[4]
mean(tab1$coverage)
mean(tab2$coverage)
min(X[,2])
which.min(X[,2])
tab1$coverage[26]
tab2$coverage[26]
which.max(X[,2])
X[21,]
tab1$coverage[21]
tab2$coverage[21]
### Posterior mean bands ###
sub <- 13
xi <- X[sub,]
alpha <- .05
coef_bands <- get_posterior_means(mcmc_results, xi, alpha)
coef_bands <- cbind(t, coef_bands)
colnames(coef_bands) <- c("Time", "Lower", "Mean", "Upper")
coef_bands <- as_tibble(coef_bands)
coef_bands %>%
ggplot(aes(x = Time)) +
geom_ribbon(aes(ymin = Lower, ymax = Upper), alpha = 0.3, fill = "blue") +
geom_line(aes(y = Mean)) +
xlab("Time") +
ylab("Response") +
ggtitle("Conditional mean bands") +
theme_bw()
plot(t, coef_bands$Upper, type = "l", ylim = c(-.2, 1.2), xlab = "Time", ylab = "Response")
lines(t, coef_bands$Lower)
lines(t, Btru%*%Theta1 %*% X[sub,],col="green")
coef_bands <- get_posterior_coefs(mcmc_results, .05)
coef_bands <- tibble(Frequency = rep(t, times = dim(X)[2]),
Covariate = rep(c("Intercept", "Age"), each = dim(Basis)[1]),
Lower = c(coef_bands$lower),
Mean = c(coef_bands$mean),
Upper = c(coef_bands$upper))
coef_bands %>%
ggplot(aes(x = Frequency)) +
geom_ribbon(aes(ymin = Lower, ymax = Upper, fill = Covariate), alpha = 0.5) +
geom_line(aes(y = Mean)) +
geom_hline(yintercept = 0) +
facet_wrap(Covariate ~., scales = "free") +
ylab("Power") +
theme_minimal()
### Some covariance visualization ###
sub <- 21
evals <- 2
zi <- X[sub, ]
alpha <- .05
eigen_bands <- get_posterior_eigen2(mcmc_results, evals, zi, alpha)
eig_names <- c()
eig_labs <- c()
for(k in 1:evals){
eig_names <- c(eig_names, paste("Eigenfunction", k))
eig_labs <- c(eig_labs, paste("Eigenfunction", k, " ", round(eigen_bands$eigenval_pve_intervals[1,k], 2), "-", round(eigen_bands$eigenval_pve_intervals[3,k], 2)))
}
names(eig_labs) <- eig_names
eigen_bands_tibble <- tibble(Time = rep(t, evals),
number = factor(rep(eig_names, each = length(t))),
lower = c(eigen_bands$lower),
mean = c(eigen_bands$mean),
upper = c(eigen_bands$upper),
val_lower = rep(eigen_bands$eigenval_intervals[1,], each = length(t)),
val_median = rep(eigen_bands$eigenval_intervals[2,], each = length(t)),
val_upper = rep(eigen_bands$eigenval_intervals[3,], each = length(t)))
eigen_bands_tibble %>%
ggplot(aes(x = Time)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = number), alpha = 0.5) +
geom_line(aes(y = mean)) +
facet_wrap(number ~., labeller = labeller(number = eig_labs)) +
theme_bw() +
theme(legend.position="none")
eigen_bands$magnitude
source('simulated_data.r')
mcmc_results <- run_mcmc_Morris(Y, t, X, X, Basis, K, iter = 5000, burnin = 5000, nchains = 1, thin = 3, loglik = 1)
### Some covariance visualization ###
sub <- 21
evals <- 2
zi <- X[sub, ]
alpha <- .05
eigen_bands <- get_posterior_eigen2(mcmc_results, evals, zi, alpha)
eig_names <- c()
eig_labs <- c()
for(k in 1:evals){
eig_names <- c(eig_names, paste("Eigenfunction", k))
eig_labs <- c(eig_labs, paste("Eigenfunction", k, " ", round(eigen_bands$eigenval_pve_intervals[1,k], 2), "-", round(eigen_bands$eigenval_pve_intervals[3,k], 2)))
}
names(eig_labs) <- eig_names
eigen_bands_tibble <- tibble(Time = rep(t, evals),
number = factor(rep(eig_names, each = length(t))),
lower = c(eigen_bands$lower),
mean = c(eigen_bands$mean),
upper = c(eigen_bands$upper),
val_lower = rep(eigen_bands$eigenval_intervals[1,], each = length(t)),
val_median = rep(eigen_bands$eigenval_intervals[2,], each = length(t)),
val_upper = rep(eigen_bands$eigenval_intervals[3,], each = length(t)))
eigen_bands_tibble %>%
ggplot(aes(x = Time)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = number), alpha = 0.5) +
geom_line(aes(y = mean)) +
facet_wrap(number ~., labeller = labeller(number = eig_labs)) +
theme_bw() +
theme(legend.position="none")
4*500/60
devtools::document()
library(BayesianConditionalFPCA)
library(MASS)
library(plot3D)
library(dlnm)
library(BayesianConditionalFPCA)
library(rstan)
library(loo)
library(tidyverse)
library(pracma)
setwd("/Users/johnshamshoian/Rcpp/BayesianConditionalFPCA/Rfuns")
source('simulated_data.r')
#matplot(t, t(Y), type = "l", col = "black", xlab = "Time", ylab = "Response")
par(mfrow = c(1,2))
matplot(t, t(Y[1:(n/2),]), type = "l", xlab = "Time", ylab = "Response", col = "black", main = "Group 1")
matplot(t, t(Y[(n/2 + 1):n,]), type = "l", xlab = "Time", ylab = "Response", col = "black", main = "Group 2")
par(mfrow = c(1,1))
### MCMC ###
K <- 4
Basis <- ps(t, df = 30, intercept = TRUE)
X_red <- cbind(X, X[,2]^2, X[,2]^3)
mcmc_results <- run_mcmc_Morris(Y, t, X, X, Basis, K, iter = 10000, burnin = 30000, nchains = 1, thin = 4, loglik = 0)
mcmc_results$Tausq[[1]][,1]
mcmc_results$Tausq[[1]][,,1]
mcmc_results$Tausq[[1]][1,]
mcmc_results$Tausq[[1]][2,]
dim(mcmc_results$Tausq[[1]])
dim(mcmc_results$Tau[[1]])
mcmc_results$Tau[[1]][,10000]
colnames(posterior_intervals) <- c("ID", "Time", "Y", "Lower_P", "Median_P", "Upper_P", "Lower_M", "Median_M", "Upper_M")
### Visualization ###
# sub <- 4
posterior_intervals <- get_posterior_predictive_bands2(mcmc_results, c(.025, .5, .975))
colnames(posterior_intervals) <- c("ID", "Time", "Y", "Lower_P", "Median_P", "Upper_P", "Lower_M", "Median_M", "Upper_M")
posterior_intervals <- as_tibble(posterior_intervals)
posterior_intervals$Y_no_error <- c(t(Y_no_error))
posterior_intervals %>%
filter(ID == sub) %>%
ggplot(aes(x = Time, y = Y_no_error)) +
geom_point(na.rm = TRUE) +
geom_ribbon(aes(ymin = Lower_P, ymax = Upper_P), alpha = 0.3) +
theme_bw()
### Visualization ###
sub <- 4
posterior_intervals %>%
filter(ID == sub) %>%
ggplot(aes(x = Time, y = Y_no_error)) +
geom_point(na.rm = TRUE) +
geom_ribbon(aes(ymin = Lower_P, ymax = Upper_P), alpha = 0.3) +
theme_bw()
posterior_intervals %>%
filter(ID == sub) %>%
ggplot(aes(x = Time, y = Y)) +
geom_point(na.rm = TRUE) +
geom_line(aes(y = Median_M)) +
theme_bw()
posterior_intervals %>%
filter(ID == sub) %>%
ggplot(aes(x = Time, y = Y_no_error)) +
geom_point(na.rm = TRUE) +
geom_ribbon(aes(ymin = Lower_M, ymax = Upper_M), alpha = 0.3) +
theme_bw()
posterior_intervals %>%
filter(ID == sub) %>%
ggplot(aes(x = Time, y = Y)) +
geom_point(na.rm = TRUE) +
geom_line(aes(y = Median_M)) +
theme_bw()
posterior_intervals %>%
filter(ID == sub) %>%
ggplot(aes(x = Time, y = Y_no_error)) +
geom_point(na.rm = TRUE) +
geom_ribbon(aes(ymin = Lower_M, ymax = Upper_M), alpha = 0.3) +
theme_bw()
posterior_intervals %>%
group_by(ID) %>%
filter(Y_no_error > Lower_M & Y_no_error < Upper_M) %>%
summarize(coverage = n() / tmax)
posterior_intervals %>%
filter(Y > Lower_P & Y < Upper_P) %>%
summarize(coverage = n() / (tmax * n))
unlist(posterior_intervals %>%
group_by(ID) %>%
summarize(mymean = trapz(t,(Median_P - Y_no_error)^2) /
trapz(t, (Y_no_error)^2)) %>%
ungroup() %>%
summarize(mmean = mean(mymean)))
unlist(posterior_intervals %>%
filter(Y_no_error > Lower_M & Y_no_error < Upper_M) %>%
summarize(coverage = n() / (n * tmax)))
unlist(posterior_intervals %>%
filter(Y > Lower_P & Y < Upper_P) %>%
summarize(coverage = n() / (n * tmax)))
mean(posterior_intervals$Upper_P - posterior_intervals$Lower_P)
mean(posterior_intervals$Upper_M - posterior_intervals$Lower_M)
### Some covariance visualization ###
z_seq <- seq(from = -2, to = 2, length.out = 10)
evals <- 2
i <- 5
zi <- c(1, z_seq[i])
alpha <- .05
eigen_bands <- get_posterior_eigen2(mcmc_results, evals, zi, alpha)
eig_names <- c()
eig_labs <- c()
for(k in 1:evals){
eig_names <- c(eig_names, paste("Eigenfunction", k))
eig_labs <- c(eig_labs, paste("Eigenfunction", k, " ", round(eigen_bands$eigenval_pve_intervals[1,k], 2), "-", round(eigen_bands$eigenval_pve_intervals[3,k], 2)))
}
names(eig_labs) <- eig_names
eigen_bands_tibble <- tibble(Time = rep(t, evals),
number = factor(rep(eig_names, each = length(t))),
lower = c(eigen_bands$lower),
mean = c(eigen_bands$mean),
upper = c(eigen_bands$upper),
val_lower = rep(eigen_bands$eigenval_intervals[1,], each = length(t)),
val_median = rep(eigen_bands$eigenval_intervals[2,], each = length(t)),
val_upper = rep(eigen_bands$eigenval_intervals[3,], each = length(t)))
truecov <- matrix(0, nrow = tmax, ncol = tmax)
truecov <- Btru %*% Lambda1 %*% outer(zi, zi) %*% t(Lambda1) %*% t(Btru) +
Btru %*% Lambda2 %*% outer(zi, zi) %*% t(Lambda2) %*% t(Btru)
eigvec <- eigen(truecov)$vectors
for(i in 1:2){
eigvec[,i] <- eigvec[,i] / sqrt(trapz(t, eigvec[,i]^2))
}
eigen_bands_tibble <- eigen_bands_tibble %>%
mutate(eigvec = c(eigvec[,1], eigvec[,2]))
eigen_bands_tibble <- eigen_bands_tibble %>%
group_by(number) %>%
mutate(eigvec = case_when(as.numeric(trapz(t, (mean + eigvec)^2) < trapz(t,
(mean - eigvec)^2)) == 1 ~ -eigvec, TRUE ~ eigvec))
results[12:13] <- 100 * unlist((eigen_bands_tibble %>%
group_by(number) %>%
summarize(RISE = trapz(t, (mean - eigvec)^2) / trapz(t, eigvec^2)))[,2]) +
results[12:13]
plot(eigen_bands_tibble$eigvec[1:50], type = "l")
lines(eigen_bands_tibble$mean[1:50], col = "green")
plot(eigen_bands_tibble$eigvec[51:100], type = "l")
lines(eigen_bands_tibble$mean[51:100], col = "green")
plot(eigen_bands$raw_magnitude, type = "l")
sapply(1:10000, function(i) mcmc_results$Lambda[[1, i]][1,1,1])
L <- sapply(1:10000, function(i) mcmc_results$Lambda[[1, i]][1,1,1])
plot(L, type = "l")
L <- sapply(1:10000, function(i) mcmc_results$Lambda[[1, i]][2,1,1])
plot(L, type = "l")
L <- sapply(1:10000, function(i) mcmc_results$Lambda[[1, i]][1,1,2])
plot(L, type = "l")
L <- sapply(1:10000, function(i) mcmc_results$Lambda[[1, i]][2,1,2])
plot(L, type = "l")
plot(mcmc_results$Eta[[1]][1,1,],type="l")
getwd()
setwd("/Users/johnshamshoian/Rcpp/BayesianConditionalFPCA/simulation")
matlist <- matrix(0, nrow = 179, ncol = 20)
for(i in 1:179){
load(paste0("N200Full",i,".RData"))
matlist[i, ] <- results
}
sapply(1:18, function(i) mean(matlist[,i]))
X
which(X<-1)
which(X< -1)
which(X[,2]< -1)
which(X[,2] < -1)
X[,2] < -2
X[,2]
dim(X)
X
X
source('simulated_data.r')
setwd("/Users/johnshamshoian/Rcpp/BayesianConditionalFPCA/simulation")
matlist <- matrix(0, nrow = 450, ncol = 20)
for(i in 1:450){
load(paste0("N200Full",i,".RData"))
matlist[i, ] <- results
}
sapply(1:18, function(i) mean(matlist[,i]))
matlist <- matrix(0, nrow = 500, ncol = 20)
for(i in 1:500){
load(paste0("N200Full",i,".RData"))
matlist[i, ] <- results
}
sapply(1:18, function(i) mean(matlist[,i]))
