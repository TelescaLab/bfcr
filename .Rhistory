peak_current = voltage_in$peak_current) %>%
add_column(node = rep(this_node, 2*length(predictions)),
combination = rep(this_combo, 2*length(predictions)),
predicted = c(rep(0, length(predictions)),
rep(1, length(predictions))))
plot(voltage_out$voltage, type = "l")
lines(predictions, col = "blue")
plot(voltage_in$voltage, type = "l")
lines(predictions, col = "blue")
Fit1 <- train(voltage ~ ., data = training,
method = "cubist",
trControl = fitControl)
Fit1 <- train(voltage ~ ., data = training,
method = "cubist",
trControl = fitControl)
voltage_in <- voltage_database %>%
filter(peak_current == 2.5e-5, node == "tn1", combination == "10", row_number() %% 5 ==1) %>%
select(-fall, -rise, -node, -combination)
predictions <- predict(list(rfFit1), newdata = voltage_in)[[1]]
voltage_in <- voltage_in %>%
add_row(voltage = predictions, timing = voltage_in$timing,
peak_current = voltage_in$peak_current) %>%
add_column(node = rep(this_node, 2*length(predictions)),
combination = rep(this_combo, 2*length(predictions)),
predicted = c(rep(0, length(predictions)),
rep(1, length(predictions))))
plot(voltage_in$voltage, type = "l")
lines(predictions, col = "blue")
Fit1 <- train(voltage ~ ., data = training,
method = "lasso",
trControl = fitControl)
voltage_in <- voltage_database %>%
filter(peak_current == 2.5e-5, node == "tn1", combination == "10", row_number() %% 5 ==1) %>%
select(-fall, -rise, -node, -combination)
voltage_in <- voltage_database %>%
filter(peak_current == 2.5e-5, node == "tn1", combination == "10", row_number() %% 5 ==1) %>%
select(-fall, -rise, -node, -combination)
predictions <- predict(list(rfFit1), newdata = voltage_in)[[1]]
voltage_in <- voltage_in %>%
add_row(voltage = predictions, timing = voltage_in$timing,
peak_current = voltage_in$peak_current) %>%
add_column(node = rep(this_node, 2*length(predictions)),
combination = rep(this_combo, 2*length(predictions)),
predicted = c(rep(0, length(predictions)),
rep(1, length(predictions))))
plot(voltage_in$voltage, type = "l")
lines(predictions, col = "blue")
Fit1 <- train(voltage ~ ., data = training,
method = "cubist",
trControl = fitControl)
voltage_in <- voltage_database %>%
filter(peak_current == 2.5e-5, node == "tn1", combination == "10", row_number() %% 5 ==1) %>%
select(-fall, -rise, -node, -combination)
predictions <- predict(list(Fit1), newdata = voltage_in)[[1]]
voltage_in <- voltage_in %>%
add_row(voltage = predictions, timing = voltage_in$timing,
peak_current = voltage_in$peak_current) %>%
add_column(node = rep(this_node, 2*length(predictions)),
combination = rep(this_combo, 2*length(predictions)),
predicted = c(rep(0, length(predictions)),
rep(1, length(predictions))))
plot(voltage_in$voltage, type = "l")
Fit1 <- train(voltage ~ ., data = training,
method = "bstTree",
trControl = fitControl)
voltage_in <- voltage_database %>%
filter(peak_current == 2.5e-5, node == "tn1", combination == "10", row_number() %% 5 ==1) %>%
select(-fall, -rise, -node, -combination)
predictions <- predict(list(Fit1), newdata = voltage_in)[[1]]
voltage_in <- voltage_in %>%
add_row(voltage = predictions, timing = voltage_in$timing,
peak_current = voltage_in$peak_current) %>%
add_column(node = rep(this_node, 2*length(predictions)),
combination = rep(this_combo, 2*length(predictions)),
predicted = c(rep(0, length(predictions)),
rep(1, length(predictions))))
plot(voltage_in$voltage, type = "l")
lines(predictions, col = "blue")
Fit1 <- train(voltage ~ ., data = training,
method = "bstSim",
trControl = fitControl)
Fit1 <- train(voltage ~ ., data = training,
method = "bstSm",
trControl = fitControl)
voltage_in <- voltage_database %>%
filter(peak_current == 2.5e-5, node == "tn1", combination == "10", row_number() %% 5 ==1) %>%
select(-fall, -rise, -node, -combination)
predictions <- predict(list(Fit1), newdata = voltage_in)[[1]]
voltage_in <- voltage_in %>%
add_row(voltage = predictions, timing = voltage_in$timing,
peak_current = voltage_in$peak_current) %>%
add_column(node = rep(this_node, 2*length(predictions)),
combination = rep(this_combo, 2*length(predictions)),
predicted = c(rep(0, length(predictions)),
rep(1, length(predictions))))
plot(voltage_in$voltage, type = "l")
Fit1 <- train(voltage ~ ., data = training,
method = "gamboost",
trControl = fitControl)
voltage_in <- voltage_database %>%
filter(peak_current == 2.5e-5, node == "tn1", combination == "10", row_number() %% 5 ==1) %>%
select(-fall, -rise, -node, -combination)
predictions <- predict(list(Fit1), newdata = voltage_in)[[1]]
voltage_in <- voltage_in %>%
add_row(voltage = predictions, timing = voltage_in$timing,
peak_current = voltage_in$peak_current) %>%
add_column(node = rep(this_node, 2*length(predictions)),
combination = rep(this_combo, 2*length(predictions)),
predicted = c(rep(0, length(predictions)),
rep(1, length(predictions))))
plot(voltage_in$voltage, type = "l")
Fit1 <- train(voltage ~ ., data = training,
method = "bartMachine",
trControl = fitControl)
Fit1 <- train(voltage ~ ., data = training,
method = "bartMachine",
trControl = fitControl)
Fit1 <- train(voltage ~ ., data = training,
method = "earth",
trControl = fitControl)
voltage_in <- voltage_database %>%
filter(peak_current == 2.5e-5, node == "tn1", combination == "10", row_number() %% 5 ==1) %>%
select(-fall, -rise, -node, -combination)
predictions <- predict(list(Fit1), newdata = voltage_in)[[1]]
voltage_in <- voltage_in %>%
add_row(voltage = predictions, timing = voltage_in$timing,
peak_current = voltage_in$peak_current) %>%
add_column(node = rep(this_node, 2*length(predictions)),
combination = rep(this_combo, 2*length(predictions)),
predicted = c(rep(0, length(predictions)),
rep(1, length(predictions))))
plot(voltage_in$voltage, type = "l")
modelLookup()
head(modelLookup())
getModelInfo("ada")
getModelInfo("rf")[[1]]
getModelInfo("rf")[[1]]$grid
getModelInfo("rf")[[1]]
Fit1 <- train(voltage ~ ., data = training,
method = "rf",
trControl = fitControl)
voltage_in <- voltage_database %>%
filter(peak_current == 2.5e-5, node == "tn1", combination == "10", row_number() %% 5 ==1) %>%
select(-fall, -rise, -node, -combination)
predictions <- predict(list(Fit1), newdata = voltage_in)[[1]]
voltage_in <- voltage_in %>%
add_row(voltage = predictions, timing = voltage_in$timing,
peak_current = voltage_in$peak_current) %>%
add_column(node = rep(this_node, 2*length(predictions)),
combination = rep(this_combo, 2*length(predictions)),
predicted = c(rep(0, length(predictions)),
rep(1, length(predictions))))
plot(voltage_in$voltage, type = "l")
lines(predictions, col = "blue")
Fit1
print(Fit1)
Fit1$control
Fit1$modelType
Fit1$bestTune
Fit1 <- train(voltage ~ ., data = training,
method = "mlpWeightDecayML",
trControl = fitControl)
warnings()
voltage_in <- voltage_database %>%
filter(peak_current == 2.5e-5, node == "tn1", combination == "10", row_number() %% 5 ==1) %>%
select(-fall, -rise, -node, -combination)
predictions <- predict(list(Fit1), newdata = voltage_in)[[1]]
voltage_in <- voltage_in %>%
add_row(voltage = predictions, timing = voltage_in$timing,
peak_current = voltage_in$peak_current) %>%
add_column(node = rep(this_node, 2*length(predictions)),
combination = rep(this_combo, 2*length(predictions)),
predicted = c(rep(0, length(predictions)),
rep(1, length(predictions))))
plot(voltage_in$voltage, type = "l")
lines(predictions, col = "blue")
Fit1 <- train(voltage ~ ., data = training,
method = "mlpSGD",
trControl = fitControl)
Fit1 <- train(voltage ~ ., data = training,
method = "mlpML",
trControl = fitControl)
voltage_in <- voltage_database %>%
filter(peak_current == 2.5e-5, node == "tn1", combination == "10", row_number() %% 5 ==1) %>%
select(-fall, -rise, -node, -combination)
predictions <- predict(list(Fit1), newdata = voltage_in)[[1]]
voltage_in <- voltage_in %>%
add_row(voltage = predictions, timing = voltage_in$timing,
peak_current = voltage_in$peak_current) %>%
add_column(node = rep(this_node, 2*length(predictions)),
combination = rep(this_combo, 2*length(predictions)),
predicted = c(rep(0, length(predictions)),
rep(1, length(predictions))))
plot(voltage_in$voltage, type = "l")
Fit1 <- train(voltage ~ ., data = training,
method = "gam",
trControl = fitControl)
voltage_in <- voltage_database %>%
filter(peak_current == 2.5e-5, node == "tn1", combination == "10", row_number() %% 5 ==1) %>%
select(-fall, -rise, -node, -combination)
predictions <- predict(list(Fit1), newdata = voltage_in)[[1]]
voltage_in <- voltage_in %>%
add_row(voltage = predictions, timing = voltage_in$timing,
peak_current = voltage_in$peak_current) %>%
add_column(node = rep(this_node, 2*length(predictions)),
combination = rep(this_combo, 2*length(predictions)),
predicted = c(rep(0, length(predictions)),
rep(1, length(predictions))))
plot(voltage_in$voltage, type = "l")
Fit1 <- train(voltage ~ ., data = training,
method = "gamboost",
trControl = fitControl)
voltage_in <- voltage_database %>%
filter(peak_current == 2.5e-5, node == "tn1", combination == "10", row_number() %% 5 ==1) %>%
select(-fall, -rise, -node, -combination)
predictions <- predict(list(Fit1), newdata = voltage_in)[[1]]
voltage_in <- voltage_in %>%
add_row(voltage = predictions, timing = voltage_in$timing,
peak_current = voltage_in$peak_current) %>%
add_column(node = rep(this_node, 2*length(predictions)),
combination = rep(this_combo, 2*length(predictions)),
predicted = c(rep(0, length(predictions)),
rep(1, length(predictions))))
plot(voltage_in$voltage, type = "l")
Fit1 <- train(voltage ~ ., data = training,
method = "gaussprPoly",
trControl = fitControl)
voltage_in <- voltage_database %>%
filter(peak_current == 2.5e-5, node == "tn1", combination == "10", row_number() %% 5 ==1) %>%
select(-fall, -rise, -node, -combination)
predictions <- predict(list(Fit1), newdata = voltage_in)[[1]]
voltage_in <- voltage_in %>%
add_row(voltage = predictions, timing = voltage_in$timing,
peak_current = voltage_in$peak_current) %>%
add_column(node = rep(this_node, 2*length(predictions)),
combination = rep(this_combo, 2*length(predictions)),
predicted = c(rep(0, length(predictions)),
rep(1, length(predictions))))
Fit1 <- train(voltage ~ ., data = training,
method = "gbm",
trControl = fitControl)
voltage_in <- voltage_database %>%
filter(peak_current == 2.5e-5, node == "tn1", combination == "10", row_number() %% 5 ==1) %>%
select(-fall, -rise, -node, -combination)
predictions <- predict(list(Fit1), newdata = voltage_in)[[1]]
voltage_in <- voltage_in %>%
add_row(voltage = predictions, timing = voltage_in$timing,
peak_current = voltage_in$peak_current) %>%
add_column(node = rep(this_node, 2*length(predictions)),
combination = rep(this_combo, 2*length(predictions)),
predicted = c(rep(0, length(predictions)),
rep(1, length(predictions))))
plot(voltage_in$voltage, type = "l")
lines(predictions, col = "blue")
predictions <- predict(list(Fit1), newdata = voltage_out)[[1]]
plot(voltage_out$voltage, type = "l")
lines(predictions, col = "blue")
### Node - combination specific model ###
node_list <- c("tn1", "tn2", "tn3", "tp1", "tp2", "tp3")
combination_list <- c("00", "01", "10", "11")
this_node <- node_list[1]
this_combo <- combination_list[1]
voltage_predictions <- tibble(voltage = numeric(),
timing = numeric(),
node = character(),
peak_current = numeric(),
combination = character(),
predicted = numeric())
### Node - combination specific model ###
node_list <- c("tn1", "tn2", "tn3", "tp1", "tp2", "tp3")
combination_list <- c("00", "01", "10", "11")
this_node <- node_list[1]
this_combo <- combination_list[1]
voltage_predictions <- tibble(voltage = numeric(),
timing = numeric(),
node = character(),
peak_current = numeric(),
combination = character(),
predicted = numeric())
for (this_node in node_list) {
for (this_combo in combination_list) {
voltage_out <- voltage_database %>%
filter(peak_current != 2.5e-5, node == this_node, timing <= 5e-9,
combination == this_combo) %>%
select(-fall, -rise, -node, -combination)
voltage_in <- voltage_database %>%
filter(peak_current == 2.5e-5, node == this_node, timing <= 5e-9,
combination == this_combo) %>%
select(-fall, -rise, -node, -combination)
inTraining <- createDataPartition(voltage_out$voltage, p = .80, list = F)
training <- voltage_out[inTraining,]
test <- voltage_out[-inTraining,]
rfFit1 <- train(voltage ~ ., data = training,
method = "gbm",
trControl = fitControl,
ntree = 500)
predictions <- predict(list(rfFit1), newdata = voltage_in)[[1]]
voltage_in <- voltage_in %>%
add_row(voltage = predictions, timing = voltage_in$timing,
peak_current = voltage_in$peak_current)
voltage_in <- voltage_in %>%
add_column(node = rep(this_node, 2 * length(predictions)),
combination = rep(this_combo, 2 * length(predictions)),
predicted = c(rep(0, length(predictions)),
rep(1, length(predictions))))
voltage_predictions <- voltage_predictions %>% add_row(voltage_in)
}
}
voltage_predictions <- tibble(voltage = numeric(),
timing = numeric(),
node = character(),
peak_current = numeric(),
combination = character(),
predicted = numeric())
voltage_predictions <- tibble(voltage = numeric(),
timing = numeric(),
node = character(),
peak_current = numeric(),
combination = character(),
predicted = numeric())
for (this_node in node_list) {
for (this_combo in combination_list) {
voltage_out <- voltage_database %>%
filter(peak_current != 2.5e-5, node == this_node, timing <= 5e-9,
combination == this_combo) %>%
select(-fall, -rise, -node, -combination)
voltage_in <- voltage_database %>%
filter(peak_current == 2.5e-5, node == this_node, timing <= 5e-9,
combination == this_combo) %>%
select(-fall, -rise, -node, -combination)
inTraining <- createDataPartition(voltage_out$voltage, p = .80, list = F)
training <- voltage_out[inTraining,]
test <- voltage_out[-inTraining,]
rfFit1 <- train(voltage ~ ., data = training,
method = "rf",
trControl = fitControl,
ntree = 500)
predictions <- predict(list(rfFit1), newdata = voltage_in)[[1]]
voltage_in <- voltage_in %>%
add_row(voltage = predictions, timing = voltage_in$timing,
peak_current = voltage_in$peak_current)
voltage_in <- voltage_in %>%
add_column(node = rep(this_node, 2 * length(predictions)),
combination = rep(this_combo, 2 * length(predictions)),
predicted = c(rep(0, length(predictions)),
rep(1, length(predictions))))
voltage_predictions <- voltage_predictions %>% add_row(voltage_in)
}
}
### Node - combination specific model ###
node_list <- c("tn1", "tn2", "tn3", "tp1", "tp2", "tp3")
combination_list <- c("00", "01", "10", "11")
voltage_predictions <- tibble(voltage = numeric(),
timing = numeric(),
node = character(),
peak_current = numeric(),
combination = character(),
predicted = numeric())
for (this_node in node_list) {
for (this_combo in combination_list) {
voltage_out <- voltage_database %>%
filter(peak_current != 2.5e-5, node == this_node, timing <= 5e-9,
combination == this_combo) %>%
select(-fall, -rise, -node, -combination)
voltage_in <- voltage_database %>%
filter(peak_current == 2.5e-5, node == this_node, timing <= 5e-9,
combination == this_combo) %>%
select(-fall, -rise, -node, -combination)
inTraining <- createDataPartition(voltage_out$voltage, p = .80, list = F)
training <- voltage_out[inTraining,]
test <- voltage_out[-inTraining,]
rfFit1 <- train(voltage ~ ., data = training,
method = "gbm",
trControl = fitControl)
predictions <- predict(list(rfFit1), newdata = voltage_in)[[1]]
voltage_in <- voltage_in %>%
add_row(voltage = predictions, timing = voltage_in$timing,
peak_current = voltage_in$peak_current)
voltage_in <- voltage_in %>%
add_column(node = rep(this_node, 2 * length(predictions)),
combination = rep(this_combo, 2 * length(predictions)),
predicted = c(rep(0, length(predictions)),
rep(1, length(predictions))))
voltage_predictions <- voltage_predictions %>% add_row(voltage_in)
}
}
voltage_predictions %>%
filter(combination == "11") %>%
ggplot(mapping = aes(x = timing, y = voltage)) +
geom_line(aes(color = as.factor(predicted))) +
facet_wrap(~ node, scales = "free") +
labs(x = "time (s)", y = "Voltage (V)", title = "Combination 10",
color = "") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_color_discrete(labels = c("Actual", "Prediction"))
library(tidyverse)
library(LFBayes)
library(splines)
library(loo)
# R file to assess sensitivity to number of splines and number of latent factors
# Uses case 1 from manuscript
library(splines)
library(MASS)
library(fdapace)
library(LFBayes)
library(pracma)
#library(roahd)
#setwd("/Users/John/Downloads/LongFunc Code/ChenCode")
setwd("/Users/johnshamshoian/Documents/R_projects/LFBayes/Rfuns")
errorvar <- .025
SS <- 20
TT <- 20
t <- seq(from = 0, to = 1, length.out = TT)
s <- seq(from = 0, to = 1, length.out = SS)
n <- 60
tt <- list()
tt[[1]] <- 1:(TT*SS)
tt <- rep(tt, n)
p1 <- 12
p2 <- 12
q1 <- 3
q2 <- 3
Bt <- bs(t, df = p1, intercept = TRUE)
Bs <- bs(s, df = p2, intercept = TRUE)
Loading.Brown.Bridge <- function(t, p, k){
B <- bs(t, df = p, intercept = TRUE)
Loading <- matrix(nrow = p, ncol = k)
for(i in 1:k){
eigval <- 1/(i^2*pi^2)
#if(i %% 2 == 0){
#  psi <- sqrt(2) * -sqrt(2)*cos((i+1)*pi*t)
#}else{
psi <- sqrt(2)*sin(i*pi*t)
#}
Loading[,i] <- sqrt(eigval)*solve(t(B)%*%B)%*%t(B)%*%psi
}
return(Loading)
}
Matern.Cov <- function(s){
rho <- 0.5
sigmasq <- 1
Matern.Cov <- matrix(nrow = length(s), ncol = length(s))
for(i in 1:length(s)){
for(j in 1:length(s)){
d <- abs(s[i] - s[j])
Matern.Cov[i, j] <- sigmasq * (1 + sqrt(3) * d / rho) * exp(- sqrt(3) * d / rho)
#Matern.Cov[i, j] <- (1 + sqrt(5) * d / rho + 5 * d^2 / (3*rho^2)) * exp(-sqrt(5) * d / rho)
}
}
Matern.Cov
}
Loading.Matern <- function(s, p, k, B){
rho <- 0.5
sigmasq <- 1
Matern.Cov <- matrix(nrow = length(s), ncol = length(s))
for(i in 1:length(s)){
for(j in 1:length(s)){
d <- abs(s[i] - s[j])
Matern.Cov[i, j] <- sigmasq * (1 + sqrt(3) * d / rho) * exp(- sqrt(3) * d / rho)
}
}
Loading <- matrix(nrow = p, ncol = k)
evec <- eigen(Matern.Cov)$vectors
eval <- eigen(Matern.Cov)$values
for(i in 1:k){
Loading[,i] <- sqrt(eval[i]) * solve(t(B)%*%B)%*%t(B)%*%evec[,i]
}
Loading
}
GenerateH <- function(q1,q2){
H <- matrix(0,q1, q2)
for(i in 1:q1){
for(j in 1:q2){
H[i,j] <- exp(-(sqrt(.01*i) + sqrt(.1*j)))
}
}
H <- diag(c(H))
H
}
GenerateMu1 <- function(s,t){
mu <- matrix(0, nrow= length(t),ncol=length(s))
for(i in 1:length(t)){
for(j in 1:length(s)){
mu[i,j] <- sqrt(1/(5*sqrt(s[j]+1)))*sin(5*t[i])
}
}
c(mu)
}
H <- GenerateH(q1, q2)
mu1 <- GenerateMu1(s,t)
Lambda <- Loading.Matern(t, p1, q1, Bt)
Gamma <- Loading.Brown.Bridge(s, p2, q2)
Cov <- kronecker(Bs%*%Gamma, Bt%*%Lambda)%*%H%*%t(kronecker(Bs%*%Gamma, Bt%*%Lambda)) + errorvar * diag(SS * TT)
num_i <- c(63, 284, 1)
iter <- 20000 # Number of iterations
burnin <- 5000 # Burnin iterations
thin <- 1 # Thinning for each chain
nchain <- 1 # Number of chains
neig <- 3 # Number of eigenfunctions for inference
q1s <- 3 # Number of latent factors for functional dimension
q2s <- 3 # Number of latent factors for longitudinal dimension
splinenum <- 12
Bt1 <- bs(t, df = 10, intercept = TRUE)
Bs1 <- bs(s, df = 12, intercept = TRUE)
x <- mvrnorm(n, mu  = as.vector(mu1), Sigma = Cov)
sx <- sd(x)
mx <- mean(x)
x <- (x-mx)/sx
Smooth_scaled_cov <- (Cov - errorvar * diag(SS * TT)) / sx^2
mu <- (mu1 - mx)/sx
Marg.Long <- LFBayes::getMarginalLong(Smooth_scaled_cov,SS,TT)
